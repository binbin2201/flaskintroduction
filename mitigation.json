[
    {
        "description": "Adversaries may introduce computer accessories, computers, or networking hardware into a system or network that can be used as a vector to gain access. While public references of usage by APT groups are scarce, many penetration testers leverage hardware additions for initial access. Commercial and open source products are leveraged with capabilities such as passive network tapping , man-in-the middle encryption breaking , keystroke injection , kernel memory reading via DMA , adding new wireless access to an existing network , and others.",
        "id": "1",
        "mitigation": "Limit Hardware Installation",
        "mitigationid": "M1034",
        "technique": "Hardware Additions",
        "techniqueid": "T1200"
    },
    {
        "description": "Adversaries may introduce computer accessories, computers, or networking hardware into a system or network that can be used as a vector to gain access. While public references of usage by APT groups are scarce, many penetration testers leverage hardware additions for initial access. Commercial and open source products are leveraged with capabilities such as passive network tapping , man-in-the middle encryption breaking , keystroke injection , kernel memory reading via DMA , adding new wireless access to an existing network , and others.",
        "id": "2",
        "mitigation": "Limit Access to Resource Over Network",
        "mitigationid": "M1035",
        "technique": "Hardware Additions",
        "techniqueid": "T1200"
    },
    {
        "description": "Adversaries may introduce computer accessories, computers, or networking hardware into a system or network that can be used as a vector to gain access. While public references of usage by APT groups are scarce, many penetration testers leverage hardware additions for initial access. Commercial and open source products are leveraged with capabilities such as passive network tapping , man-in-the middle encryption breaking , keystroke injection , kernel memory reading via DMA , adding new wireless access to an existing network , and others.",
        "id": "3",
        "mitigation": "Limit Hardware Installation",
        "mitigationid": "M1034",
        "technique": "Hardware Additions",
        "techniqueid": "T1200"
    },
    {
        "description": "Adversaries may introduce computer accessories, computers, or networking hardware into a system or network that can be used as a vector to gain access. While public references of usage by APT groups are scarce, many penetration testers leverage hardware additions for initial access. Commercial and open source products are leveraged with capabilities such as passive network tapping , man-in-the middle encryption breaking , keystroke injection , kernel memory reading via DMA , adding new wireless access to an existing network , and others.",
        "id": "4",
        "mitigation": "Limit Access to Resource Over Network",
        "mitigationid": "M1035",
        "technique": "Hardware Additions",
        "techniqueid": "T1200"
    },
    {
        "description": "Adversaries may introduce computer accessories, computers, or networking hardware into a system or network that can be used as a vector to gain access. While public references of usage by APT groups are scarce, many penetration testers leverage hardware additions for initial access. Commercial and open source products are leveraged with capabilities such as passive network tapping , man-in-the middle encryption breaking , keystroke injection , kernel memory reading via DMA , adding new wireless access to an existing network , and others.",
        "id": "5",
        "mitigation": "Limit Access to Resource Over Network",
        "mitigationid": "M1035",
        "technique": "Hardware Additions",
        "techniqueid": "T1200"
    },
    {
        "description": "An adversary may compress and/or encrypt data that is collected prior to exfiltration. Compressing the data can help to obfuscate the collected data and minimize the amount of data sent over the network. Encryption can be used to hide information that is being exfiltrated from detection or make exfiltration less conspicuous upon inspection by a defender.",
        "id": "6",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Archive Collected Data",
        "techniqueid": "T1560"
    },
    {
        "description": "An adversary may compress or encrypt data that is collected prior to exfiltration using 3rd party utilities. Many utilities exist that can archive data, including 7-Zip, WinRAR, and WinZip. Most utilities include functionality to encrypt and/or compress data.",
        "id": "7",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Archive via Utility",
        "techniqueid": "T1560.001"
    },
    {
        "description": "Adversaries may abuse Python commands and scripts for execution. Python is a very popular scripting/programming language, with capabilities to perform many functions. Python can be executed interactively from the command-line (via the?python.exe?interpreter) or via scripts (.py) that can be written and distributed to different systems. Python code can also be compiled into binary executables.",
        "id": "8",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Python",
        "techniqueid": "T1059.006"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to remotely control machines using Virtual Network Computing (VNC). The adversary may then perform actions as the logged-on user.",
        "id": "9",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "VNC",
        "techniqueid": "T1021.005"
    },
    {
        "description": "An adversary may compress and/or encrypt data that is collected prior to exfiltration. Compressing the data can help to obfuscate the collected data and minimize the amount of data sent over the network. Encryption can be used to hide information that is being exfiltrated from detection or make exfiltration less conspicuous upon inspection by a defender.",
        "id": "10",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Archive Collected Data",
        "techniqueid": "T1560"
    },
    {
        "description": "An adversary may compress or encrypt data that is collected prior to exfiltration using 3rd party utilities. Many utilities exist that can archive data, including 7-Zip, WinRAR, and WinZip. Most utilities include functionality to encrypt and/or compress data.",
        "id": "11",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Archive via Utility",
        "techniqueid": "T1560.001"
    },
    {
        "description": "Adversaries may abuse Python commands and scripts for execution. Python is a very popular scripting/programming language, with capabilities to perform many functions. Python can be executed interactively from the command-line (via the?python.exe?interpreter) or via scripts (.py) that can be written and distributed to different systems. Python code can also be compiled into binary executables.",
        "id": "12",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Python",
        "techniqueid": "T1059.006"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to remotely control machines using Virtual Network Computing (VNC). The adversary may then perform actions as the logged-on user.",
        "id": "13",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "VNC",
        "techniqueid": "T1021.005"
    },
    {
        "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of?Unix Shell?while Windows installations include the?Windows Command Shell?and?PowerShell.",
        "id": "14",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "Command and Scripting Interpreter",
        "techniqueid": "T1059"
    },
    {
        "description": "Adversaries may abuse JavaScript and/or JScript for execution. JavaScript (JS) is a platform-agnostic scripting language (compiled just-in-time at runtime) commonly associated with scripts in webpages, though JS can be executed in runtime environments outside the browser.",
        "id": "15",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "JavaScript/JScript",
        "techniqueid": "T1059.007"
    },
    {
        "description": "Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as?Component Object Model?and the?Native API?through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.",
        "id": "16",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "Visual Basic",
        "techniqueid": "T1059.005"
    },
    {
        "description": "Adversaries may gain access to a system through a user visiting a website over the normal course of browsing. With this technique, the user's web browser is typically targeted for exploitation, but adversaries may also use compromised websites for non-exploitation behavior such as acquiring?Application Access Token.",
        "id": "17",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "Drive-by Compromise",
        "techniqueid": "T1189"
    },
    {
        "description": "Adversaries may use an existing, legitimate external Web service to exfiltrate data rather than their primary command and control channel. Popular Web services acting as an exfiltration mechanism may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to compromise. Firewall rules may also already exist to permit traffic to these services.",
        "id": "18",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "Exfiltration Over Web Service",
        "techniqueid": "T1567"
    },
    {
        "description": "Adversaries may exfiltrate data to a code repository rather than over their primary command and control channel. Code repositories are often accessible via an API (ex: https://api.github.com). Access to these APIs are often over HTTPS, which gives the adversary an additional level of protection.",
        "id": "19",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "Exfiltration to Code Repository",
        "techniqueid": "T1567.001"
    },
    {
        "description": "Adversaries may exfiltrate data to a cloud storage service rather than over their primary command and control channel. Cloud storage services allow for the storage, edit, and retrieval of data from a remote cloud storage server over the Internet.",
        "id": "20",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "Exfiltration to Cloud Storage",
        "techniqueid": "T1567.002"
    },
    {
        "description": "Adversaries may send phishing messages to gain access to victim systems. All forms of phishing are electronically delivered social engineering. Phishing can be targeted, known as spearphishing. In spearphishing, a specific individual, company, or industry will be targeted by the adversary. More generally, adversaries can conduct non-targeted phishing, such as in mass malware spam campaigns.",
        "id": "21",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "Phishing",
        "techniqueid": "T1566"
    },
    {
        "description": "Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon?User Execution?to gain execution.",
        "id": "22",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "Spearphishing Attachment",
        "techniqueid": "T1566.001"
    },
    {
        "description": "Adversaries may send spearphishing emails with a malicious link in an attempt to gain access to victim systems. Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments.",
        "id": "23",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "Spearphishing Link",
        "techniqueid": "T1566.002"
    },
    {
        "description": "Adversaries may send spearphishing messages via third-party services in an attempt to gain access to victim systems. Spearphishing via service is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of third party services rather than directly via enterprise email channels.",
        "id": "24",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "Spearphishing via Service",
        "techniqueid": "T1566.003"
    },
    {
        "description": "Adversaries may abuse Compiled HTML files (.chm) to conceal malicious code. CHM files are commonly distributed as part of the Microsoft HTML Help system. CHM files are compressed compilations of various content such as HTML documents, images, and scripting/web related programming languages such VBA, JScript, Java, and ActiveX. CHM content is displayed using underlying components of the Internet Explorer browser loaded by the HTML Help executable program (hh.exe).",
        "id": "25",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "Compiled HTML File",
        "techniqueid": "T1218.001"
    },
    {
        "description": "Adversaries can steal user application access tokens as a means of acquiring credentials to access remote systems and resources. This can occur through social engineering and typically requires user action to grant access.",
        "id": "26",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "Steal Application Access Token",
        "techniqueid": "T1528"
    },
    {
        "description": "Adversaries may use stolen application access tokens to bypass the typical authentication process and access restricted accounts, information, or services on remote systems. These tokens are typically stolen from users and used in lieu of login credentials.",
        "id": "27",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "Application Access Token",
        "techniqueid": "T1550.001"
    },
    {
        "description": "An adversary may rely upon specific actions by a user in order to gain execution. Users may be subjected to social engineering to get them to execute malicious code by, for example, opening a malicious document file or link. These user actions will typically be observed as follow-on behavior from forms of?Phishing.",
        "id": "28",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "User Execution",
        "techniqueid": "T1204"
    },
    {
        "description": "An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from?Spearphishing Link. Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via?Exploitation for Client Execution. Links may also lead users to download files that require execution via?Malicious File.",
        "id": "29",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "Malicious Link",
        "techniqueid": "T1204.001"
    },
    {
        "description": "Adversaries may use an existing, legitimate external Web service as a means for relaying data to/from a compromised system. Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.",
        "id": "30",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "Web Service",
        "techniqueid": "T1102"
    },
    {
        "description": "Adversaries may use an existing, legitimate external Web service to host information that points to additional command and control (C2) infrastructure. Adversaries may post content, known as a dead drop resolver, on Web services with embedded (and often obfuscated/encoded) domains or IP addresses. Once infected, victims will reach out to and be redirected by these resolvers.",
        "id": "31",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "Dead Drop Resolver",
        "techniqueid": "T1102.001"
    },
    {
        "description": "Adversaries may use an existing, legitimate external Web service as a means for sending commands to and receiving output from a compromised system over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems can then send the output from those commands back over that Web service channel. The return traffic may occur in a variety of ways, depending on the Web service being utilized. For example, the return traffic may take the form of the compromised system posting a comment on a forum, issuing a pull request to development project, updating a document hosted on a Web service, or by sending a Tweet.",
        "id": "32",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "Bidirectional Communication",
        "techniqueid": "T1102.002"
    },
    {
        "description": "Adversaries may use an existing, legitimate external Web service as a means for sending commands to a compromised system without receiving return output over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems may opt to send the output from those commands back over a different C2 channel, including to another distinct Web service. Alternatively, compromised systems may return no output at all in cases where adversaries want to send instructions to systems and do not want a response.",
        "id": "33",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "One-Way Communication",
        "techniqueid": "T1102.003"
    },
    {
        "description": "Adversaries may abuse Internet browser extensions to establish persistence access to victim systems. Browser extensions or plugins are small programs that can add functionality and customize aspects of Internet browsers. They can be installed directly or through a browser's app store and generally have access and permissions to everything that the browser can access.",
        "id": "34",
        "mitigation": "Limit Software Installation",
        "mitigationid": "M1033",
        "technique": "Browser Extensions",
        "techniqueid": "T1176"
    },
    {
        "description": "Adversaries may abuse Python commands and scripts for execution. Python is a very popular scripting/programming language, with capabilities to perform many functions. Python can be executed interactively from the command-line (via the?python.exe?interpreter) or via scripts (.py) that can be written and distributed to different systems. Python code can also be compiled into binary executables.",
        "id": "35",
        "mitigation": "Limit Software Installation",
        "mitigationid": "M1033",
        "technique": "Python",
        "techniqueid": "T1059.006"
    },
    {
        "description": "Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services. On macOS, launchd processes known as?Launch Daemon?and?Launch Agent?are run to finish system initialization and load user specific parameters.",
        "id": "36",
        "mitigation": "Limit Software Installation",
        "mitigationid": "M1033",
        "technique": "Create or Modify System Process",
        "techniqueid": "T1543"
    },
    {
        "description": "Adversaries may create or modify systemd services to repeatedly execute malicious payloads as part of persistence. The systemd service manager is commonly used for managing background daemon processes (also known as services) and other system resources. Systemd is the default initialization (init) system on many Linux distributions starting with Debian 8, Ubuntu 15.04, CentOS 7, RHEL 7, Fedora 15, and replaces legacy init systems including SysVinit and Upstart while remaining backwards compatible with the aforementioned init systems.",
        "id": "37",
        "mitigation": "Limit Software Installation",
        "mitigationid": "M1033",
        "technique": "Systemd Service",
        "techniqueid": "T1543.002"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to remotely control machines using Virtual Network Computing (VNC). The adversary may then perform actions as the logged-on user.",
        "id": "38",
        "mitigation": "Limit Software Installation",
        "mitigationid": "M1033",
        "technique": "VNC",
        "techniqueid": "T1021.005"
    },
    {
        "description": "Adversaries may modify the SSH?authorized_keys?file to maintain persistence on a victim host. Linux distributions and macOS commonly use key-based authentication to secure the authentication process of SSH sessions for remote management. The?authorized_keys?file in SSH specifies the SSH keys that can be used for logging into the user account for which the file is configured. This file is usually found in the user's home directory under?<user-home>/.ssh/authorized_keys. Users may edit the system��s SSH config file to modify the directives PubkeyAuthentication and RSAAuthentication to the value \"yes\" to ensure public key and RSA authentication are enabled. The SSH config file is usually located under?/etc/ssh/sshd_config.",
        "id": "39",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "SSH Authorized Keys",
        "techniqueid": "T1098.004"
    },
    {
        "description": "Adversaries may modify plist files to automatically run an application when a user logs in. Starting in Mac OS X 10.7 (Lion), users can specify certain applications to be re-opened when a user logs into their machine after reboot. While this is usually done via a Graphical User Interface (GUI) on an app-by-app basis, there are property list files (plist) that contain this information as well located at?~/Library/Preferences/com.apple.loginwindow.plist?and?~/Library/Preferences/ByHost/com.apple.loginwindow.* .plist.",
        "id": "40",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Re-opened Applications",
        "techniqueid": "T1547.007"
    },
    {
        "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of?Unix Shell?while Windows installations include the?Windows Command Shell?and?PowerShell.",
        "id": "41",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Command and Scripting Interpreter",
        "techniqueid": "T1059"
    },
    {
        "description": "Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the?Start-Process?cmdlet which can be used to run an executable and the?Invoke-Command?cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).",
        "id": "42",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "PowerShell",
        "techniqueid": "T1059.001"
    },
    {
        "description": "Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as?Component Object Model?and the?Native API?through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.",
        "id": "43",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Visual Basic",
        "techniqueid": "T1059.005"
    },
    {
        "description": "Adversaries may abuse JavaScript and/or JScript for execution. JavaScript (JS) is a platform-agnostic scripting language (compiled just-in-time at runtime) commonly associated with scripts in webpages, though JS can be executed in runtime environments outside the browser.",
        "id": "44",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "JavaScript/JScript",
        "techniqueid": "T1059.007"
    },
    {
        "description": "Adversaries can perform command and control between compromised hosts on potentially disconnected networks using removable media to transfer commands from system to system. Both systems would need to be compromised, with the likelihood that an Internet-connected system was compromised first and the second through lateral movement by?Replication Through Removable Media. Commands and files would be relayed from the disconnected system to the Internet-connected system to which the adversary has direct access.",
        "id": "45",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Communication Through Removable Media",
        "techniqueid": "T1092"
    },
    {
        "description": "Adversaries may establish persistence by executing malicious content triggered by user inactivity. Screensavers are programs that execute after a configurable time of user inactivity and consist of Portable Executable (PE) files with a .scr file extension. The Windows screensaver application scrnsave.scr is located in?C:\\Windows\\System32\\, and?C:\\Windows\\sysWOW64\\?on 64-bit Windows systems, along with screensavers included with base Windows installations.",
        "id": "46",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Screensaver",
        "techniqueid": "T1546.002"
    },
    {
        "description": "Adversaries may gain persistence and elevate privileges by executing malicious content triggered by the Event Monitor Daemon (emond). Emond is a?Launch Daemon?that accepts events from various services, runs them through a simple rules engine, and takes action. The emond binary at?/sbin/emond?will load any rules from the?/etc/emond.d/rules/?directory and take action once an explicitly defined event takes place.",
        "id": "47",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Emond",
        "techniqueid": "T1546.014"
    },
    {
        "description": "Adversaries may attempt to exfiltrate data over Bluetooth rather than the command and control channel. If the command and control network is a wired Internet connection, an attacker may opt to exfiltrate data using a Bluetooth communication channel.",
        "id": "48",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Exfiltration Over Bluetooth",
        "techniqueid": "T1011.001"
    },
    {
        "description": "Adversaries may attempt to exfiltrate data via a physical medium, such as a removable drive. In certain circumstances, such as an air-gapped network compromise, exfiltration could occur via a physical medium or device introduced by a user. Such media could be an external hard drive, USB drive, cellular phone, MP3 player, or other removable storage and processing device. The physical medium or device could be used as the final exfiltration point or to hop between otherwise disconnected systems.",
        "id": "49",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Exfiltration Over Physical Medium",
        "techniqueid": "T1052"
    },
    {
        "description": "Adversaries may attempt to exfiltrate data over a USB connected physical device. In certain circumstances, such as an air-gapped network compromise, exfiltration could occur via a USB device introduced by a user. The USB device could be used as the final exfiltration point or to hop between otherwise disconnected systems.",
        "id": "50",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Exfiltration over USB",
        "techniqueid": "T1052.001"
    },
    {
        "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.?A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.",
        "id": "51",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Exploitation of Remote Services",
        "techniqueid": "T1210"
    },
    {
        "description": "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as?Windows Remote Management?can also be used externally.",
        "id": "52",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "External Remote Services",
        "techniqueid": "T1133"
    },
    {
        "description": "Adversaries may carry out malicious operations using a virtual instance to avoid detection. A wide variety of virtualization technologies exist that allow for the emulation of a computer or computing environment. By running malicious code inside of a virtual instance, adversaries can hide artifacts associated with their behavior from security tools that are unable to monitor activity inside the virtual instance. Additionally, depending on the virtual networking implementation (ex: bridged adapter), network traffic generated by the virtual instance can be difficult to trace back to the compromised host as the IP address and hostname might not match known values.",
        "id": "53",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Run Virtual Instance",
        "techniqueid": "T1564.006"
    },
    {
        "description": "Adversaries may hide malicious Visual Basic for Applications (VBA) payloads embedded within MS Office documents by replacing the VBA source code with benign data.",
        "id": "54",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "VBA Stomping",
        "techniqueid": "T1564.007"
    },
    {
        "description": "Adversaries may leverage Microsoft Office-based applications for persistence between startups. Microsoft Office is a fairly common application suite on Windows-based operating systems within an enterprise network. There are multiple mechanisms that can be used with Office for persistence when an Office-based application is started; this can include the use of Office Template Macros and add-ins.",
        "id": "55",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Office Application Startup",
        "techniqueid": "T1137"
    },
    {
        "description": "Adversaries may abuse Microsoft Office templates to obtain persistence on a compromised system. Microsoft Office contains templates that are part of common Office applications and are used to customize styles. The base templates within the application are used each time an application starts.",
        "id": "56",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Office Template Macros",
        "techniqueid": "T1137.001"
    },
    {
        "description": "Adversaries may take control of preexisting sessions with remote services to move laterally in an environment. Users may use valid credentials to log into a service specifically designed to accept remote connections, such as telnet, SSH, and RDP. When a user logs into a service, a session will be established that will allow them to maintain a continuous interaction with that service.",
        "id": "57",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Remote Service Session Hijacking",
        "techniqueid": "T1563"
    },
    {
        "description": "Adversaries may hijack a legitimate user's SSH session to move laterally within an environment. Secure Shell (SSH) is a standard means of remote access on Linux and macOS systems. It allows a user to connect to another system via an encrypted tunnel, commonly authenticating through a password, certificate or the use of an asymmetric encryption key pair.",
        "id": "58",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "SSH Hijacking",
        "techniqueid": "T1563.001"
    },
    {
        "description": "Adversaries may hijack a legitimate user��s remote desktop session to move laterally within an environment. Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).",
        "id": "59",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "RDP Hijacking",
        "techniqueid": "T1563.002"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.",
        "id": "60",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Remote Desktop Protocol",
        "techniqueid": "T1021.001"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to interact with remote machines by taking advantage of Distributed Component Object Model (DCOM). The adversary may then perform actions as the logged-on user.",
        "id": "61",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Distributed Component Object Model",
        "techniqueid": "T1021.003"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into remote machines using Secure Shell (SSH). The adversary may then perform actions as the logged-on user.",
        "id": "62",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "SSH",
        "techniqueid": "T1021.004"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to remotely control machines using Virtual Network Computing (VNC). The adversary may then perform actions as the logged-on user.",
        "id": "63",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "VNC",
        "techniqueid": "T1021.005"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to interact with remote systems using Windows Remote Management (WinRM). The adversary may then perform actions as the logged-on user.",
        "id": "64",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Windows Remote Management",
        "techniqueid": "T1021.006"
    },
    {
        "description": "Adversaries may move onto systems, possibly those on disconnected or air-gapped networks, by copying malware to removable media and taking advantage of Autorun features when the media is inserted into a system and executes. In the case of Lateral Movement, this may occur through modification of executable files stored on removable media or by copying malware and renaming it to look like a legitimate file to trick users into executing it on a separate system. In the case of Initial Access, this may occur through manual manipulation of the media, modification of systems used to initially format the media, or modification to the media's firmware itself.",
        "id": "65",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Replication Through Removable Media",
        "techniqueid": "T1091"
    },
    {
        "description": "Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed binaries. Binaries signed with trusted digital certificates can execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files.",
        "id": "66",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Signed Binary Proxy Execution",
        "techniqueid": "T1218"
    },
    {
        "description": "Adversaries may abuse CMSTP to proxy execution of malicious code. The Microsoft Connection Manager Profile Installer (CMSTP.exe) is a command-line program used to install Connection Manager service profiles. CMSTP.exe accepts an installation information file (INF) as a parameter and installs a service profile leveraged for remote access connections.",
        "id": "67",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "CMSTP",
        "techniqueid": "T1218.003"
    },
    {
        "description": "Adversaries may use InstallUtil to proxy execution of code through a trusted Windows utility. InstallUtil is a command-line utility that allows for installation and uninstallation of resources by executing specific installer components specified in .NET binaries. InstallUtil is digitally signed by Microsoft and located in the .NET directories on a Windows system:?C:\\Windows\\Microsoft.NET\\Framework\\v\\InstallUtil.exe?and?C:\\Windows\\Microsoft.NET\\Framework64\\v\\InstallUtil.exe.",
        "id": "68",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "InstallUtil",
        "techniqueid": "T1218.004"
    },
    {
        "description": "Adversaries may abuse mshta.exe to proxy execution of malicious .hta files and Javascript or VBScript through a trusted Windows utility. There are several examples of different types of threats leveraging mshta.exe during initial compromise and for execution of code",
        "id": "69",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Mshta",
        "techniqueid": "T1218.005"
    },
    {
        "description": "Adversaries may abuse Regsvcs and Regasm to proxy execution of code through a trusted Windows utility. Regsvcs and Regasm are Windows command-line utilities that are used to register .NET?Component Object Model?(COM) assemblies. Both are digitally signed by Microsoft.",
        "id": "70",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Regsvcs/Regasm",
        "techniqueid": "T1218.009"
    },
    {
        "description": "Adversaries may abuse odbcconf.exe to proxy execution of malicious payloads. Odbcconf.exe is a Windows utility that allows you to configure Open Database Connectivity (ODBC) drivers and data source names. Odbcconf.exe is digitally signed by Microsoft.",
        "id": "71",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Odbcconf",
        "techniqueid": "T1218.008"
    },
    {
        "description": "Adversaries may abuse verclsid.exe to proxy execution of malicious code. Verclsid.exe is known as the Extension CLSID Verification Host and is responsible for verifying each shell extension before they are used by Windows Explorer or the Windows Shell.",
        "id": "72",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Verclsid",
        "techniqueid": "T1218.012"
    },
    {
        "description": "Adversaries may create or modify references in Office document templates to conceal malicious code or force authentication attempts. Microsoft��s Office Open XML (OOXML) specification defines an XML-based format for Office documents (.docx, xlsx, .pptx) to replace older binary formats (.doc, .xls, .ppt). OOXML files are packed together ZIP archives compromised of various XML files, referred to as parts, containing properties that collectively define how a document is rendered.",
        "id": "73",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Template Injection",
        "techniqueid": "T1221"
    },
    {
        "description": "Adversaries may take advantage of trusted developer utilities to proxy execution of malicious payloads. There are many utilities used for software development related tasks that can be used to execute code in various forms to assist in development, debugging, and reverse engineering. These utilities may often be signed with legitimate certificates that allow them to execute on a system and proxy execution of malicious code through a trusted process that effectively bypasses application control solutions.",
        "id": "74",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Trusted Developer Utilities Proxy Execution",
        "techniqueid": "T1127"
    },
    {
        "description": "Adversaries may use MSBuild to proxy execution of code through a trusted Windows utility. MSBuild.exe (Microsoft Build Engine) is a software build platform used by Visual Studio. It handles XML formatted project files that define requirements for loading and building various platforms and configurations.",
        "id": "75",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "MSBuild",
        "techniqueid": "T1127.001"
    },
    {
        "description": "Adversaries may attempt to access the Cloud Instance Metadata API to collect credentials and other sensitive data.",
        "id": "76",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Cloud Instance Metadata API",
        "techniqueid": "T1552.005"
    },
    {
        "description": "An adversary may compress and/or encrypt data that is collected prior to exfiltration. Compressing the data can help to obfuscate the collected data and minimize the amount of data sent over the network. Encryption can be used to hide information that is being exfiltrated from detection or make exfiltration less conspicuous upon inspection by a defender.",
        "id": "77",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Archive Collected Data",
        "techniqueid": "T1560"
    },
    {
        "description": "An adversary may compress or encrypt data that is collected prior to exfiltration using 3rd party utilities. Many utilities exist that can archive data, including 7-Zip, WinRAR, and WinZip. Most utilities include functionality to encrypt and/or compress data.",
        "id": "78",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Archive via Utility",
        "techniqueid": "T1560.001"
    },
    {
        "description": "Adversaries may abuse Python commands and scripts for execution. Python is a very popular scripting/programming language, with capabilities to perform many functions. Python can be executed interactively from the command-line (via the?python.exe?interpreter) or via scripts (.py) that can be written and distributed to different systems. Python code can also be compiled into binary executables.",
        "id": "79",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Python",
        "techniqueid": "T1059.006"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to remotely control machines using Virtual Network Computing (VNC). The adversary may then perform actions as the logged-on user.",
        "id": "80",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "VNC",
        "techniqueid": "T1021.005"
    },
    {
        "description": "An adversary may compress and/or encrypt data that is collected prior to exfiltration. Compressing the data can help to obfuscate the collected data and minimize the amount of data sent over the network. Encryption can be used to hide information that is being exfiltrated from detection or make exfiltration less conspicuous upon inspection by a defender.",
        "id": "81",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Archive Collected Data",
        "techniqueid": "T1560"
    },
    {
        "description": "An adversary may compress or encrypt data that is collected prior to exfiltration using 3rd party utilities. Many utilities exist that can archive data, including 7-Zip, WinRAR, and WinZip. Most utilities include functionality to encrypt and/or compress data.",
        "id": "82",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Archive via Utility",
        "techniqueid": "T1560.001"
    },
    {
        "description": "Adversaries may abuse Python commands and scripts for execution. Python is a very popular scripting/programming language, with capabilities to perform many functions. Python can be executed interactively from the command-line (via the?python.exe?interpreter) or via scripts (.py) that can be written and distributed to different systems. Python code can also be compiled into binary executables.",
        "id": "83",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Python",
        "techniqueid": "T1059.006"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to remotely control machines using Virtual Network Computing (VNC). The adversary may then perform actions as the logged-on user.",
        "id": "84",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "VNC",
        "techniqueid": "T1021.005"
    },
    {
        "description": "Adversaries may abuse JavaScript and/or JScript for execution. JavaScript (JS) is a platform-agnostic scripting language (compiled just-in-time at runtime) commonly associated with scripts in webpages, though JS can be executed in runtime environments outside the browser.",
        "id": "85",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "JavaScript/JScript",
        "techniqueid": "T1059.007"
    },
    {
        "description": "Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as?Component Object Model?and the?Native API?through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.",
        "id": "86",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "Visual Basic",
        "techniqueid": "T1059.005"
    },
    {
        "description": "Adversaries may use an existing, legitimate external Web service to exfiltrate data rather than their primary command and control channel. Popular Web services acting as an exfiltration mechanism may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to compromise. Firewall rules may also already exist to permit traffic to these services.",
        "id": "87",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "Exfiltration Over Web Service",
        "techniqueid": "T1567"
    },
    {
        "description": "Adversaries may exfiltrate data to a code repository rather than over their primary command and control channel. Code repositories are often accessible via an API (ex: https://api.github.com). Access to these APIs are often over HTTPS, which gives the adversary an additional level of protection.",
        "id": "88",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "Exfiltration to Code Repository",
        "techniqueid": "T1567.001"
    },
    {
        "description": "Adversaries may exfiltrate data to a cloud storage service rather than over their primary command and control channel. Cloud storage services allow for the storage, edit, and retrieval of data from a remote cloud storage server over the Internet.",
        "id": "89",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "Exfiltration to Cloud Storage",
        "techniqueid": "T1567.002"
    },
    {
        "description": "Adversaries may send spearphishing messages via third-party services in an attempt to gain access to victim systems. Spearphishing via service is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of third party services rather than directly via enterprise email channels.",
        "id": "90",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "Spearphishing via Service",
        "techniqueid": "T1566.003"
    },
    {
        "description": "Adversaries may abuse Compiled HTML files (.chm) to conceal malicious code. CHM files are commonly distributed as part of the Microsoft HTML Help system. CHM files are compressed compilations of various content such as HTML documents, images, and scripting/web related programming languages such VBA, JScript, Java, and ActiveX. CHM content is displayed using underlying components of the Internet Explorer browser loaded by the HTML Help executable program (hh.exe).",
        "id": "91",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "Compiled HTML File",
        "techniqueid": "T1218.001"
    },
    {
        "description": "Adversaries can steal user application access tokens as a means of acquiring credentials to access remote systems and resources. This can occur through social engineering and typically requires user action to grant access.",
        "id": "92",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "Steal Application Access Token",
        "techniqueid": "T1528"
    },
    {
        "description": "Adversaries may use stolen application access tokens to bypass the typical authentication process and access restricted accounts, information, or services on remote systems. These tokens are typically stolen from users and used in lieu of login credentials.",
        "id": "93",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "Application Access Token",
        "techniqueid": "T1550.001"
    },
    {
        "description": "An adversary may rely upon specific actions by a user in order to gain execution. Users may be subjected to social engineering to get them to execute malicious code by, for example, opening a malicious document file or link. These user actions will typically be observed as follow-on behavior from forms of?Phishing.",
        "id": "94",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "User Execution",
        "techniqueid": "T1204"
    },
    {
        "description": "An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from?Spearphishing Link. Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via?Exploitation for Client Execution. Links may also lead users to download files that require execution via?Malicious File.",
        "id": "95",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "Malicious Link",
        "techniqueid": "T1204.001"
    },
    {
        "description": "Adversaries may use an existing, legitimate external Web service as a means for relaying data to/from a compromised system. Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.",
        "id": "96",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "Web Service",
        "techniqueid": "T1102"
    },
    {
        "description": "Adversaries may use an existing, legitimate external Web service to host information that points to additional command and control (C2) infrastructure. Adversaries may post content, known as a dead drop resolver, on Web services with embedded (and often obfuscated/encoded) domains or IP addresses. Once infected, victims will reach out to and be redirected by these resolvers.",
        "id": "97",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "Dead Drop Resolver",
        "techniqueid": "T1102.001"
    },
    {
        "description": "Adversaries may use an existing, legitimate external Web service as a means for sending commands to and receiving output from a compromised system over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems can then send the output from those commands back over that Web service channel. The return traffic may occur in a variety of ways, depending on the Web service being utilized. For example, the return traffic may take the form of the compromised system posting a comment on a forum, issuing a pull request to development project, updating a document hosted on a Web service, or by sending a Tweet.",
        "id": "98",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "Bidirectional Communication",
        "techniqueid": "T1102.002"
    },
    {
        "description": "Adversaries may use an existing, legitimate external Web service as a means for sending commands to a compromised system without receiving return output over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems may opt to send the output from those commands back over a different C2 channel, including to another distinct Web service. Alternatively, compromised systems may return no output at all in cases where adversaries want to send instructions to systems and do not want a response.",
        "id": "99",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "One-Way Communication",
        "techniqueid": "T1102.003"
    },
    {
        "description": "Adversaries may abuse Internet browser extensions to establish persistence access to victim systems. Browser extensions or plugins are small programs that can add functionality and customize aspects of Internet browsers. They can be installed directly or through a browser's app store and generally have access and permissions to everything that the browser can access.",
        "id": "100",
        "mitigation": "Limit Software Installation",
        "mitigationid": "M1033",
        "technique": "Browser Extensions",
        "techniqueid": "T1176"
    },
    {
        "description": "Adversaries may abuse Python commands and scripts for execution. Python is a very popular scripting/programming language, with capabilities to perform many functions. Python can be executed interactively from the command-line (via the?python.exe?interpreter) or via scripts (.py) that can be written and distributed to different systems. Python code can also be compiled into binary executables.",
        "id": "101",
        "mitigation": "Limit Software Installation",
        "mitigationid": "M1033",
        "technique": "Python",
        "techniqueid": "T1059.006"
    },
    {
        "description": "Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services. On macOS, launchd processes known as?Launch Daemon?and?Launch Agent?are run to finish system initialization and load user specific parameters.",
        "id": "102",
        "mitigation": "Limit Software Installation",
        "mitigationid": "M1033",
        "technique": "Create or Modify System Process",
        "techniqueid": "T1543"
    },
    {
        "description": "Adversaries may create or modify systemd services to repeatedly execute malicious payloads as part of persistence. The systemd service manager is commonly used for managing background daemon processes (also known as services) and other system resources. Systemd is the default initialization (init) system on many Linux distributions starting with Debian 8, Ubuntu 15.04, CentOS 7, RHEL 7, Fedora 15, and replaces legacy init systems including SysVinit and Upstart while remaining backwards compatible with the aforementioned init systems.",
        "id": "103",
        "mitigation": "Limit Software Installation",
        "mitigationid": "M1033",
        "technique": "Systemd Service",
        "techniqueid": "T1543.002"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to remotely control machines using Virtual Network Computing (VNC). The adversary may then perform actions as the logged-on user.",
        "id": "104",
        "mitigation": "Limit Software Installation",
        "mitigationid": "M1033",
        "technique": "VNC",
        "techniqueid": "T1021.005"
    },
    {
        "description": "Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk. An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.",
        "id": "105",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Abuse Elevation Control Mechanism",
        "techniqueid": "T1548"
    },
    {
        "description": "Adversaries may leverage the?AuthorizationExecuteWithPrivileges?API to escalate privileges by prompting the user for credentials. The purpose of this API is to give application developers an easy way to perform operations with root privileges, such as for application installation or updating. This API does not validate that the program requesting root privileges comes from a reputable source or has been maliciously modified.",
        "id": "106",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Elevated Execution with Prompt",
        "techniqueid": "T1548.004"
    },
    {
        "description": "Adversaries may abuse features of Winlogon to execute DLLs and/or executables when a user logs in. Winlogon.exe is a Windows component responsible for actions at logon/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete. Registry entries in?HKLM\\Software[\\Wow6432Node\\]\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\?and?HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\?are used to manage additional helper programs and functionalities that support Winlogon.",
        "id": "107",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Winlogon Helper DLL",
        "techniqueid": "T1547.004"
    },
    {
        "description": "Adversaries may modify the kernel to automatically execute programs on system boot. Loadable Kernel Modules (LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. ?",
        "id": "108",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Kernel Modules and Extensions",
        "techniqueid": "T1547.006"
    },
    {
        "description": "Adversaries may abuse Internet browser extensions to establish persistence access to victim systems. Browser extensions or plugins are small programs that can add functionality and customize aspects of Internet browsers. They can be installed directly or through a browser's app store and generally have access and permissions to everything that the browser can access.",
        "id": "109",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Browser Extensions",
        "techniqueid": "T1176"
    },
    {
        "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of?Unix Shell?while Windows installations include the?Windows Command Shell?and?PowerShell.",
        "id": "110",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Command and Scripting Interpreter",
        "techniqueid": "T1059"
    },
    {
        "description": "Adversaries may abuse AppleScript for execution. AppleScript is a macOS scripting language designed to control applications and parts of the OS via inter-application messages called AppleEvents. These AppleEvent messages can be sent independently or easily scripted with AppleScript. These events can locate open windows, send keystrokes, and interact with almost any open application locally or remotely.",
        "id": "111",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "AppleScript",
        "techniqueid": "T1059.002"
    },
    {
        "description": "Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd.exe) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands.",
        "id": "112",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Windows Command Shell",
        "techniqueid": "T1059.003"
    },
    {
        "description": "Adversaries may abuse Unix shell commands and scripts for execution. Unix shells are the primary command prompt on Linux and macOS systems, though many variations of the Unix shell exist (e.g. sh, bash, zsh, etc.) depending on the specific OS or distribution. Unix shells can control every aspect of a system, with certain commands requiring elevated privileges.",
        "id": "113",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Unix Shell",
        "techniqueid": "T1059.004"
    },
    {
        "description": "Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as?Component Object Model?and the?Native API?through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.",
        "id": "114",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Visual Basic",
        "techniqueid": "T1059.005"
    },
    {
        "description": "Adversaries may abuse Python commands and scripts for execution. Python is a very popular scripting/programming language, with capabilities to perform many functions. Python can be executed interactively from the command-line (via the?python.exe?interpreter) or via scripts (.py) that can be written and distributed to different systems. Python code can also be compiled into binary executables.",
        "id": "115",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Python",
        "techniqueid": "T1059.006"
    },
    {
        "description": "Adversaries may abuse JavaScript and/or JScript for execution. JavaScript (JS) is a platform-agnostic scripting language (compiled just-in-time at runtime) commonly associated with scripts in webpages, though JS can be executed in runtime environments outside the browser.",
        "id": "116",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "JavaScript/JScript",
        "techniqueid": "T1059.007"
    },
    {
        "description": "Adversaries may establish persistence by executing malicious content triggered by user inactivity. Screensavers are programs that execute after a configurable time of user inactivity and consist of Portable Executable (PE) files with a .scr file extension. The Windows screensaver application scrnsave.scr is located in?C:\\Windows\\System32\\, and?C:\\Windows\\sysWOW64\\?on 64-bit Windows systems, along with screensavers included with base Windows installations.",
        "id": "117",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Screensaver",
        "techniqueid": "T1546.002"
    },
    {
        "description": "Adversaries may establish persistence by executing malicious content triggered by the execution of tainted binaries. Mach-O binaries have a series of headers that are used to perform certain operations when a binary is loaded. The LC_LOAD_DYLIB header in a Mach-O binary tells macOS and OS X which dynamic libraries (dylibs) to load during execution time. These can be added ad-hoc to the compiled binary as long as adjustments are made to the rest of the fields and dependencies. There are tools available to perform these changes.",
        "id": "118",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "LC_LOAD_DYLIB Addition",
        "techniqueid": "T1546.006"
    },
    {
        "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by accessibility features. Windows contains accessibility features that may be launched with a key combination before a user has logged in (ex: when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system.",
        "id": "119",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Accessibility Features",
        "techniqueid": "T1546.008"
    },
    {
        "description": "Adversaries may use hidden windows to conceal malicious activity from the plain sight of users. In some cases, windows that would typically be displayed when an application carries out an operation can be hidden. This may be utilized by system administrators to avoid disrupting user work environments when carrying out administrative tasks.",
        "id": "120",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Hidden Window",
        "techniqueid": "T1564.003"
    },
    {
        "description": "Adversaries may carry out malicious operations using a virtual instance to avoid detection. A wide variety of virtualization technologies exist that allow for the emulation of a computer or computing environment. By running malicious code inside of a virtual instance, adversaries can hide artifacts associated with their behavior from security tools that are unable to monitor activity inside the virtual instance. Additionally, depending on the virtual networking implementation (ex: bridged adapter), network traffic generated by the virtual instance can be difficult to trace back to the compromised host as the IP address and hostname might not match known values.",
        "id": "121",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Run Virtual Instance",
        "techniqueid": "T1564.006"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.",
        "id": "122",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Hijack Execution Flow",
        "techniqueid": "T1574"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking vulnerable file path references. Adversaries can take advantage of paths that lack surrounding quotations by placing an executable in a higher level directory within the path, so that Windows will choose the adversary's executable to launch.",
        "id": "123",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Path Interception by Unquoted Path",
        "techniqueid": "T1574.009"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking environment variables used to load libraries. Adversaries may place a program in an earlier entry in the list of directories stored in the PATH environment variable, which Windows will then execute when it searches sequentially through that PATH listing in search of the binary that was called from a script or the command line.",
        "id": "124",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Path Interception by PATH Environment Variable",
        "techniqueid": "T1574.007"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the search order used to load other programs. Because some programs do not call other programs using the full path, adversaries may place their own file in the directory where the calling program is located, causing the operating system to launch their malicious software at the request of the calling program.",
        "id": "125",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Path Interception by Search Order Hijacking",
        "techniqueid": "T1574.008"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the search order used to load DLLs. Windows systems use a common method to look for required DLLs to load into a program. Hijacking DLL loads may be for the purpose of establishing persistence as well as elevating privileges and/or evading restrictions on file execution.",
        "id": "126",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "DLL Search Order Hijacking",
        "techniqueid": "T1574.001"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the dynamic linker used to load libraries. The dynamic linker is used to load shared library dependencies needed by an executing program. The dynamic linker will typically check provided absolute paths and common directories for these dependencies, but can be overridden by shared objects specified by LD_PRELOAD to be loaded before all others.",
        "id": "127",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "LD_PRELOAD",
        "techniqueid": "T1574.006"
    },
    {
        "description": "Adversaries may leverage the COR_PROFILER environment variable to hijack the execution flow of programs that load the .NET CLR. The COR_PROFILER is a .NET Framework feature which allows developers to specify an unmanaged (or external of .NET) profiling DLL to be loaded into each .NET process that loads the Common Language Runtime (CLR). These profiliers are designed to monitor, troubleshoot, and debug managed code executed by the .NET CLR.",
        "id": "128",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "COR_PROFILER",
        "techniqueid": "T1574.012"
    },
    {
        "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.",
        "id": "129",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Masquerading",
        "techniqueid": "T1036"
    },
    {
        "description": "Adversaries may match or approximate the name or location of legitimate files when naming/placing their files. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). Alternatively, the filename given may be a close approximation of legitimate programs or something innocuous.",
        "id": "130",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Match Legitimate Name or Location",
        "techniqueid": "T1036.005"
    },
    {
        "description": "Adversaries may directly interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.",
        "id": "131",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Native API",
        "techniqueid": "T1106"
    },
    {
        "description": "An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks. These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment. Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries.",
        "id": "132",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Remote Access Software",
        "techniqueid": "T1219"
    },
    {
        "description": "Adversaries may abuse shared modules to execute malicious payloads. The Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in NTDLL.dll and is part of the Windows?Native API?which is called from functions like?CreateProcess,?LoadLibrary, etc. of the Win32 API.",
        "id": "133",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Shared Modules",
        "techniqueid": "T1129"
    },
    {
        "description": "Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed binaries. Binaries signed with trusted digital certificates can execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files.",
        "id": "134",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Signed Binary Proxy Execution",
        "techniqueid": "T1218"
    },
    {
        "description": "Adversaries may abuse CMSTP to proxy execution of malicious code. The Microsoft Connection Manager Profile Installer (CMSTP.exe) is a command-line program used to install Connection Manager service profiles. CMSTP.exe accepts an installation information file (INF) as a parameter and installs a service profile leveraged for remote access connections.",
        "id": "135",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "CMSTP",
        "techniqueid": "T1218.003"
    },
    {
        "description": "Adversaries may abuse Compiled HTML files (.chm) to conceal malicious code. CHM files are commonly distributed as part of the Microsoft HTML Help system. CHM files are compressed compilations of various content such as HTML documents, images, and scripting/web related programming languages such VBA, JScript, Java, and ActiveX. CHM content is displayed using underlying components of the Internet Explorer browser loaded by the HTML Help executable program (hh.exe).",
        "id": "136",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Compiled HTML File",
        "techniqueid": "T1218.001"
    },
    {
        "description": "Adversaries may use InstallUtil to proxy execution of code through a trusted Windows utility. InstallUtil is a command-line utility that allows for installation and uninstallation of resources by executing specific installer components specified in .NET binaries. InstallUtil is digitally signed by Microsoft and located in the .NET directories on a Windows system:?C:\\Windows\\Microsoft.NET\\Framework\\v\\InstallUtil.exe?and?C:\\Windows\\Microsoft.NET\\Framework64\\v\\InstallUtil.exe.",
        "id": "137",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "InstallUtil",
        "techniqueid": "T1218.004"
    },
    {
        "description": "Adversaries may abuse mshta.exe to proxy execution of malicious .hta files and Javascript or VBScript through a trusted Windows utility. There are several examples of different types of threats leveraging mshta.exe during initial compromise and for execution of code",
        "id": "138",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Mshta",
        "techniqueid": "T1218.005"
    },
    {
        "description": "Adversaries may abuse Regsvcs and Regasm to proxy execution of code through a trusted Windows utility. Regsvcs and Regasm are Windows command-line utilities that are used to register .NET?Component Object Model?(COM) assemblies. Both are digitally signed by Microsoft.",
        "id": "139",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Regsvcs/Regasm",
        "techniqueid": "T1218.009"
    },
    {
        "description": "Adversaries may abuse control.exe to proxy execution of malicious payloads. The Windows Control Panel process binary (control.exe) handles execution of Control Panel items, which are utilities that allow users to view and adjust computer settings.",
        "id": "140",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Control Panel",
        "techniqueid": "T1218.002"
    },
    {
        "description": "Adversaries may abuse odbcconf.exe to proxy execution of malicious payloads. Odbcconf.exe is a Windows utility that allows you to configure Open Database Connectivity (ODBC) drivers and data source names. Odbcconf.exe is digitally signed by Microsoft.",
        "id": "141",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Odbcconf",
        "techniqueid": "T1218.008"
    },
    {
        "description": "Adversaries may abuse verclsid.exe to proxy execution of malicious code. Verclsid.exe is known as the Extension CLSID Verification Host and is responsible for verifying each shell extension before they are used by Windows Explorer or the Windows Shell.",
        "id": "142",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Verclsid",
        "techniqueid": "T1218.012"
    },
    {
        "description": "Adversaries may undermine security controls that will either warn users of untrusted activity or prevent execution of untrusted programs. Operating systems and security products may contain mechanisms to identify programs or websites as possessing some level of trust. Examples of such features would include a program being allowed to run because it is signed by a valid code signing certificate, a program prompting the user with a warning because it has an attribute set from being downloaded from the Internet, or getting an indication that you are about to connect to an untrusted site.",
        "id": "143",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Subvert Trust Controls",
        "techniqueid": "T1553"
    },
    {
        "description": "Adversaries may modify file attributes that signify programs are from untrusted sources to subvert Gatekeeper controls. In macOS and OS X, when applications or programs are downloaded from the internet, there is a special attribute set on the file called?com.apple.quarantine. This attribute is read by Apple's Gatekeeper defense program at execution time and provides a prompt to the user to allow or deny execution.",
        "id": "144",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Gatekeeper Bypass",
        "techniqueid": "T1553.001"
    },
    {
        "description": "Adversaries may deliver payloads to remote systems by adding content to shared storage locations, such as network drives or internal code repositories. Content stored on network drives or in other shared locations may be tainted by adding malicious programs, scripts, or exploit code to otherwise valid files. Once a user opens the shared tainted content, the malicious portion can be executed to run the adversary's code on a remote system. Adversaries may use tainted shared content to move laterally.",
        "id": "145",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Taint Shared Content",
        "techniqueid": "T1080"
    },
    {
        "description": "Adversaries may take advantage of trusted developer utilities to proxy execution of malicious payloads. There are many utilities used for software development related tasks that can be used to execute code in various forms to assist in development, debugging, and reverse engineering. These utilities may often be signed with legitimate certificates that allow them to execute on a system and proxy execution of malicious code through a trusted process that effectively bypasses application control solutions.",
        "id": "146",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Trusted Developer Utilities Proxy Execution",
        "techniqueid": "T1127"
    },
    {
        "description": "An adversary may rely upon specific actions by a user in order to gain execution. Users may be subjected to social engineering to get them to execute malicious code by, for example, opening a malicious document file or link. These user actions will typically be observed as follow-on behavior from forms of?Phishing.",
        "id": "147",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "User Execution",
        "techniqueid": "T1204"
    },
    {
        "description": "An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from?Spearphishing Attachment. Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.",
        "id": "148",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Malicious File",
        "techniqueid": "T1204.002"
    },
    {
        "description": "Adversaries may bypass application control and obscure execution of code by embedding scripts inside XSL files. Extensible Stylesheet Language (XSL) files are commonly used to describe the processing and rendering of data within XML files. To support complex operations, the XSL standard includes support for embedded scripting in various languages.",
        "id": "149",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "XSL Script Processing",
        "techniqueid": "T1220"
    },
    {
        "description": "Adversaries may modify the SSH?authorized_keys?file to maintain persistence on a victim host. Linux distributions and macOS commonly use key-based authentication to secure the authentication process of SSH sessions for remote management. The?authorized_keys?file in SSH specifies the SSH keys that can be used for logging into the user account for which the file is configured. This file is usually found in the user's home directory under?<user-home>/.ssh/authorized_keys. Users may edit the system��s SSH config file to modify the directives PubkeyAuthentication and RSAAuthentication to the value \"yes\" to ensure public key and RSA authentication are enabled. The SSH config file is usually located under?/etc/ssh/sshd_config.",
        "id": "150",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "SSH Authorized Keys",
        "techniqueid": "T1098.004"
    },
    {
        "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of?Unix Shell?while Windows installations include the?Windows Command Shell?and?PowerShell.",
        "id": "151",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Command and Scripting Interpreter",
        "techniqueid": "T1059"
    },
    {
        "description": "Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the?Start-Process?cmdlet which can be used to run an executable and the?Invoke-Command?cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).",
        "id": "152",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "PowerShell",
        "techniqueid": "T1059.001"
    },
    {
        "description": "Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as?Component Object Model?and the?Native API?through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.",
        "id": "153",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Visual Basic",
        "techniqueid": "T1059.005"
    },
    {
        "description": "Adversaries may abuse JavaScript and/or JScript for execution. JavaScript (JS) is a platform-agnostic scripting language (compiled just-in-time at runtime) commonly associated with scripts in webpages, though JS can be executed in runtime environments outside the browser.",
        "id": "154",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "JavaScript/JScript",
        "techniqueid": "T1059.007"
    },
    {
        "description": "Adversaries can perform command and control between compromised hosts on potentially disconnected networks using removable media to transfer commands from system to system. Both systems would need to be compromised, with the likelihood that an Internet-connected system was compromised first and the second through lateral movement by?Replication Through Removable Media. Commands and files would be relayed from the disconnected system to the Internet-connected system to which the adversary has direct access.",
        "id": "155",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Communication Through Removable Media",
        "techniqueid": "T1092"
    },
    {
        "description": "Adversaries may establish persistence by executing malicious content triggered by user inactivity. Screensavers are programs that execute after a configurable time of user inactivity and consist of Portable Executable (PE) files with a .scr file extension. The Windows screensaver application scrnsave.scr is located in?C:\\Windows\\System32\\, and?C:\\Windows\\sysWOW64\\?on 64-bit Windows systems, along with screensavers included with base Windows installations.",
        "id": "156",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Screensaver",
        "techniqueid": "T1546.002"
    },
    {
        "description": "Adversaries may gain persistence and elevate privileges by executing malicious content triggered by the Event Monitor Daemon (emond). Emond is a?Launch Daemon?that accepts events from various services, runs them through a simple rules engine, and takes action. The emond binary at?/sbin/emond?will load any rules from the?/etc/emond.d/rules/?directory and take action once an explicitly defined event takes place.",
        "id": "157",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Emond",
        "techniqueid": "T1546.014"
    },
    {
        "description": "Adversaries may attempt to exfiltrate data over Bluetooth rather than the command and control channel. If the command and control network is a wired Internet connection, an attacker may opt to exfiltrate data using a Bluetooth communication channel.",
        "id": "158",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Exfiltration Over Bluetooth",
        "techniqueid": "T1011.001"
    },
    {
        "description": "Adversaries may attempt to exfiltrate data via a physical medium, such as a removable drive. In certain circumstances, such as an air-gapped network compromise, exfiltration could occur via a physical medium or device introduced by a user. Such media could be an external hard drive, USB drive, cellular phone, MP3 player, or other removable storage and processing device. The physical medium or device could be used as the final exfiltration point or to hop between otherwise disconnected systems.",
        "id": "159",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Exfiltration Over Physical Medium",
        "techniqueid": "T1052"
    },
    {
        "description": "Adversaries may attempt to exfiltrate data over a USB connected physical device. In certain circumstances, such as an air-gapped network compromise, exfiltration could occur via a USB device introduced by a user. The USB device could be used as the final exfiltration point or to hop between otherwise disconnected systems.",
        "id": "160",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Exfiltration over USB",
        "techniqueid": "T1052.001"
    },
    {
        "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.?A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.",
        "id": "161",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Exploitation of Remote Services",
        "techniqueid": "T1210"
    },
    {
        "description": "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as?Windows Remote Management?can also be used externally.",
        "id": "162",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "External Remote Services",
        "techniqueid": "T1133"
    },
    {
        "description": "Adversaries may carry out malicious operations using a virtual instance to avoid detection. A wide variety of virtualization technologies exist that allow for the emulation of a computer or computing environment. By running malicious code inside of a virtual instance, adversaries can hide artifacts associated with their behavior from security tools that are unable to monitor activity inside the virtual instance. Additionally, depending on the virtual networking implementation (ex: bridged adapter), network traffic generated by the virtual instance can be difficult to trace back to the compromised host as the IP address and hostname might not match known values.",
        "id": "163",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Run Virtual Instance",
        "techniqueid": "T1564.006"
    },
    {
        "description": "Adversaries may hide malicious Visual Basic for Applications (VBA) payloads embedded within MS Office documents by replacing the VBA source code with benign data.",
        "id": "164",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "VBA Stomping",
        "techniqueid": "T1564.007"
    },
    {
        "description": "Adversaries may abuse inter-process communication (IPC) mechanisms for local code or command execution. IPC is typically used by processes to share data, communicate with each other, or synchronize execution. IPC is also commonly used to avoid situations such as deadlocks, which occurs when processes are stuck in a cyclic waiting pattern.",
        "id": "165",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Inter-Process Communication",
        "techniqueid": "T1559"
    },
    {
        "description": "Adversaries may use Windows Dynamic Data Exchange (DDE) to execute arbitrary commands. DDE is a client-server protocol for one-time and/or continuous inter-process communication (IPC) between applications. Once a link is established, applications can autonomously exchange transactions consisting of strings, warm data links (notifications when a data item changes), hot data links (duplications of changes to a data item), and requests for command execution.",
        "id": "166",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Dynamic Data Exchange",
        "techniqueid": "T1559.002"
    },
    {
        "description": "Adversaries may take control of preexisting sessions with remote services to move laterally in an environment. Users may use valid credentials to log into a service specifically designed to accept remote connections, such as telnet, SSH, and RDP. When a user logs into a service, a session will be established that will allow them to maintain a continuous interaction with that service.",
        "id": "167",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Remote Service Session Hijacking",
        "techniqueid": "T1563"
    },
    {
        "description": "Adversaries may hijack a legitimate user's SSH session to move laterally within an environment. Secure Shell (SSH) is a standard means of remote access on Linux and macOS systems. It allows a user to connect to another system via an encrypted tunnel, commonly authenticating through a password, certificate or the use of an asymmetric encryption key pair.",
        "id": "168",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "SSH Hijacking",
        "techniqueid": "T1563.001"
    },
    {
        "description": "Adversaries may hijack a legitimate user��s remote desktop session to move laterally within an environment. Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).",
        "id": "169",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "RDP Hijacking",
        "techniqueid": "T1563.002"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.",
        "id": "170",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Remote Desktop Protocol",
        "techniqueid": "T1021.001"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to interact with remote machines by taking advantage of Distributed Component Object Model (DCOM). The adversary may then perform actions as the logged-on user.",
        "id": "171",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Distributed Component Object Model",
        "techniqueid": "T1021.003"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into remote machines using Secure Shell (SSH). The adversary may then perform actions as the logged-on user.",
        "id": "172",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "SSH",
        "techniqueid": "T1021.004"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to remotely control machines using Virtual Network Computing (VNC). The adversary may then perform actions as the logged-on user.",
        "id": "173",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "VNC",
        "techniqueid": "T1021.005"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to interact with remote systems using Windows Remote Management (WinRM). The adversary may then perform actions as the logged-on user.",
        "id": "174",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Windows Remote Management",
        "techniqueid": "T1021.006"
    },
    {
        "description": "Adversaries may move onto systems, possibly those on disconnected or air-gapped networks, by copying malware to removable media and taking advantage of Autorun features when the media is inserted into a system and executes. In the case of Lateral Movement, this may occur through modification of executable files stored on removable media or by copying malware and renaming it to look like a legitimate file to trick users into executing it on a separate system. In the case of Initial Access, this may occur through manual manipulation of the media, modification of systems used to initially format the media, or modification to the media's firmware itself.",
        "id": "175",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Replication Through Removable Media",
        "techniqueid": "T1091"
    },
    {
        "description": "Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed binaries. Binaries signed with trusted digital certificates can execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files.",
        "id": "176",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Signed Binary Proxy Execution",
        "techniqueid": "T1218"
    },
    {
        "description": "Adversaries may abuse CMSTP to proxy execution of malicious code. The Microsoft Connection Manager Profile Installer (CMSTP.exe) is a command-line program used to install Connection Manager service profiles. CMSTP.exe accepts an installation information file (INF) as a parameter and installs a service profile leveraged for remote access connections.",
        "id": "177",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "CMSTP",
        "techniqueid": "T1218.003"
    },
    {
        "description": "Adversaries may use InstallUtil to proxy execution of code through a trusted Windows utility. InstallUtil is a command-line utility that allows for installation and uninstallation of resources by executing specific installer components specified in .NET binaries. InstallUtil is digitally signed by Microsoft and located in the .NET directories on a Windows system:?C:\\Windows\\Microsoft.NET\\Framework\\v\\InstallUtil.exe?and?C:\\Windows\\Microsoft.NET\\Framework64\\v\\InstallUtil.exe.",
        "id": "178",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "InstallUtil",
        "techniqueid": "T1218.004"
    },
    {
        "description": "Adversaries may abuse mshta.exe to proxy execution of malicious .hta files and Javascript or VBScript through a trusted Windows utility. There are several examples of different types of threats leveraging mshta.exe during initial compromise and for execution of code",
        "id": "179",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Mshta",
        "techniqueid": "T1218.005"
    },
    {
        "description": "Adversaries may abuse Regsvcs and Regasm to proxy execution of code through a trusted Windows utility. Regsvcs and Regasm are Windows command-line utilities that are used to register .NET?Component Object Model?(COM) assemblies. Both are digitally signed by Microsoft.",
        "id": "180",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Regsvcs/Regasm",
        "techniqueid": "T1218.009"
    },
    {
        "description": "Adversaries may abuse odbcconf.exe to proxy execution of malicious payloads. Odbcconf.exe is a Windows utility that allows you to configure Open Database Connectivity (ODBC) drivers and data source names. Odbcconf.exe is digitally signed by Microsoft.",
        "id": "181",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Odbcconf",
        "techniqueid": "T1218.008"
    },
    {
        "description": "Adversaries may abuse verclsid.exe to proxy execution of malicious code. Verclsid.exe is known as the Extension CLSID Verification Host and is responsible for verifying each shell extension before they are used by Windows Explorer or the Windows Shell.",
        "id": "182",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Verclsid",
        "techniqueid": "T1218.012"
    },
    {
        "description": "Adversaries may take advantage of trusted developer utilities to proxy execution of malicious payloads. There are many utilities used for software development related tasks that can be used to execute code in various forms to assist in development, debugging, and reverse engineering. These utilities may often be signed with legitimate certificates that allow them to execute on a system and proxy execution of malicious code through a trusted process that effectively bypasses application control solutions.",
        "id": "183",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Trusted Developer Utilities Proxy Execution",
        "techniqueid": "T1127"
    },
    {
        "description": "Adversaries may use MSBuild to proxy execution of code through a trusted Windows utility. MSBuild.exe (Microsoft Build Engine) is a software build platform used by Visual Studio. It handles XML formatted project files that define requirements for loading and building various platforms and configurations.",
        "id": "184",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "MSBuild",
        "techniqueid": "T1127.001"
    },
    {
        "description": "Adversaries may attempt to access the Cloud Instance Metadata API to collect credentials and other sensitive data.",
        "id": "185",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Cloud Instance Metadata API",
        "techniqueid": "T1552.005"
    },
    {
        "description": "Adversaries may abuse authentication packages to execute DLLs when the system boots. Windows authentication package DLLs are loaded by the Local Security Authority (LSA) process at system start. They provide support for multiple logon processes and multiple security protocols to the operating system.",
        "id": "186",
        "mitigation": "Privileged Process Integrity",
        "mitigationid": "M1025",
        "technique": "Authentication Package",
        "techniqueid": "T1547.002"
    },
    {
        "description": "Adversaries may abuse security support providers (SSPs) to execute DLLs when the system boots. Windows SSP DLLs are loaded into the Local Security Authority (LSA) process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs.",
        "id": "187",
        "mitigation": "Privileged Process Integrity",
        "mitigationid": "M1025",
        "technique": "Security Support Provider",
        "techniqueid": "T1547.005"
    },
    {
        "description": "Adversaries may modify or add LSASS drivers to obtain persistence on compromised systems. The Windows security subsystem is a set of components that manage and enforce the security policy for a computer or domain. The Local Security Authority (LSA) is the main component responsible for local security policy and user authentication. The LSA includes multiple dynamic link libraries (DLLs) associated with various other security functions, all of which run in the context of the LSA Subsystem Service (LSASS) lsass.exe process.",
        "id": "188",
        "mitigation": "Privileged Process Integrity",
        "mitigationid": "M1025",
        "technique": "LSASS Driver",
        "techniqueid": "T1547.008"
    },
    {
        "description": "Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows or pluggable authentication modules (PAM) on Unix-based systems, responsible for gathering, storing, and validating credentials.",
        "id": "189",
        "mitigation": "Privileged Process Integrity",
        "mitigationid": "M1025",
        "technique": "Modify Authentication Process",
        "techniqueid": "T1556"
    },
    {
        "description": "Adversaries may patch the authentication process on a domain controller to bypass the typical authentication mechanisms and enable access to accounts.",
        "id": "190",
        "mitigation": "Privileged Process Integrity",
        "mitigationid": "M1025",
        "technique": "Domain Controller Authentication",
        "techniqueid": "T1556.001"
    },
    {
        "description": "Adversaries may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password, from the operating system and software. Credentials can then be used to perform?Lateral Movement?and access restricted information.",
        "id": "191",
        "mitigation": "Privileged Process Integrity",
        "mitigationid": "M1025",
        "technique": "OS Credential Dumping",
        "techniqueid": "T1003"
    },
    {
        "description": "Adversaries may attempt to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS). After a user logs on, the system generates and stores a variety of credential materials in LSASS process memory. These credential materials can be harvested by an administrative user or SYSTEM and used to conduct?Lateral Movement?using?Use Alternate Authentication Material.",
        "id": "192",
        "mitigation": "Privileged Process Integrity",
        "mitigationid": "M1025",
        "technique": "LSASS Memory",
        "techniqueid": "T1003.001"
    },
    {
        "description": "Adversaries may abuse features of Winlogon to execute DLLs and/or executables when a user logs in. Winlogon.exe is a Windows component responsible for actions at logon/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete. Registry entries in?HKLM\\Software[\\Wow6432Node\\]\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\?and?HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\?are used to manage additional helper programs and functionalities that support Winlogon.",
        "id": "193",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Winlogon Helper DLL",
        "techniqueid": "T1547.004"
    },
    {
        "description": "Adversaries may modify the kernel to automatically execute programs on system boot. Loadable Kernel Modules (LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. ?",
        "id": "194",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Kernel Modules and Extensions",
        "techniqueid": "T1547.006"
    },
    {
        "description": "Adversaries may establish persistence by executing malicious content triggered by the execution of tainted binaries. Mach-O binaries have a series of headers that are used to perform certain operations when a binary is loaded. The LC_LOAD_DYLIB header in a Mach-O binary tells macOS and OS X which dynamic libraries (dylibs) to load during execution time. These can be added ad-hoc to the compiled binary as long as adjustments are made to the rest of the fields and dependencies. There are tools available to perform these changes.",
        "id": "195",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "LC_LOAD_DYLIB Addition",
        "techniqueid": "T1546.006"
    },
    {
        "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppCert DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the?AppCertDLLs?Registry key under?HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\?are loaded into every process that calls the ubiquitously used application programming interface (API) functions?CreateProcess,?CreateProcessAsUser,?CreateProcessWithLoginW,?CreateProcessWithTokenW, or?WinExec.",
        "id": "196",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "AppCert DLLs",
        "techniqueid": "T1546.009"
    },
    {
        "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppInit DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the?AppInit_DLLs?value in the Registry keys?HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows?or?HKEY_LOCAL_MACHINE\\Software\\Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion\\Windows?are loaded by user32.dll into every process that loads user32.dll. In practice this is nearly every program, since user32.dll is a very common library.",
        "id": "197",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "AppInit DLLs",
        "techniqueid": "T1546.010"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.",
        "id": "198",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Hijack Execution Flow",
        "techniqueid": "T1574"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking vulnerable file path references. Adversaries can take advantage of paths that lack surrounding quotations by placing an executable in a higher level directory within the path, so that Windows will choose the adversary's executable to launch.",
        "id": "199",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Path Interception by Unquoted Path",
        "techniqueid": "T1574.009"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking environment variables used to load libraries. Adversaries may place a program in an earlier entry in the list of directories stored in the PATH environment variable, which Windows will then execute when it searches sequentially through that PATH listing in search of the binary that was called from a script or the command line.",
        "id": "200",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Path Interception by PATH Environment Variable",
        "techniqueid": "T1574.007"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the search order used to load other programs. Because some programs do not call other programs using the full path, adversaries may place their own file in the directory where the calling program is located, causing the operating system to launch their malicious software at the request of the calling program.",
        "id": "201",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Path Interception by Search Order Hijacking",
        "techniqueid": "T1574.008"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the search order used to load DLLs. Windows systems use a common method to look for required DLLs to load into a program. Hijacking DLL loads may be for the purpose of establishing persistence as well as elevating privileges and/or evading restrictions on file execution.",
        "id": "202",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "DLL Search Order Hijacking",
        "techniqueid": "T1574.001"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the dynamic linker used to load libraries. The dynamic linker is used to load shared library dependencies needed by an executing program. The dynamic linker will typically check provided absolute paths and common directories for these dependencies, but can be overridden by shared objects specified by LD_PRELOAD to be loaded before all others.",
        "id": "203",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "LD_PRELOAD",
        "techniqueid": "T1574.006"
    },
    {
        "description": "Adversaries may leverage the COR_PROFILER environment variable to hijack the execution flow of programs that load the .NET CLR. The COR_PROFILER is a .NET Framework feature which allows developers to specify an unmanaged (or external of .NET) profiling DLL to be loaded into each .NET process that loads the Common Language Runtime (CLR). These profiliers are designed to monitor, troubleshoot, and debug managed code executed by the .NET CLR.",
        "id": "204",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "COR_PROFILER",
        "techniqueid": "T1574.012"
    },
    {
        "description": "Adversaries may abuse shared modules to execute malicious payloads. The Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in NTDLL.dll and is part of the Windows?Native API?which is called from functions like?CreateProcess,?LoadLibrary, etc. of the Win32 API.",
        "id": "205",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Shared Modules",
        "techniqueid": "T1129"
    },
    {
        "description": "Adversaries may undermine security controls that will either warn users of untrusted activity or prevent execution of untrusted programs. Operating systems and security products may contain mechanisms to identify programs or websites as possessing some level of trust. Examples of such features would include a program being allowed to run because it is signed by a valid code signing certificate, a program prompting the user with a warning because it has an attribute set from being downloaded from the Internet, or getting an indication that you are about to connect to an untrusted site.",
        "id": "206",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Subvert Trust Controls",
        "techniqueid": "T1553"
    },
    {
        "description": "Adversaries may tamper with SIP and trust provider components to mislead the operating system and application control tools when conducting signature validation checks. In user mode, Windows Authenticode digital signatures are used to verify a file's origin and integrity, variables that may be used to establish trust in signed code (ex: a driver with a valid Microsoft signature may be handled as safe). The signature validation process is handled via the WinVerifyTrust application programming interface (API) function, which accepts an inquiry and coordinates with the appropriate trust provider, which is responsible for validating parameters of a signature.",
        "id": "207",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "SIP and Trust Provider Hijacking",
        "techniqueid": "T1553.003"
    },
    {
        "description": "Adversaries may abuse inter-process communication (IPC) mechanisms for local code or command execution. IPC is typically used by processes to share data, communicate with each other, or synchronize execution. IPC is also commonly used to avoid situations such as deadlocks, which occurs when processes are stuck in a cyclic waiting pattern.",
        "id": "208",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Inter-Process Communication",
        "techniqueid": "T1559"
    },
    {
        "description": "Adversaries may use Windows Dynamic Data Exchange (DDE) to execute arbitrary commands. DDE is a client-server protocol for one-time and/or continuous inter-process communication (IPC) between applications. Once a link is established, applications can autonomously exchange transactions consisting of strings, warm data links (notifications when a data item changes), hot data links (duplications of changes to a data item), and requests for command execution.",
        "id": "209",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Dynamic Data Exchange",
        "techniqueid": "T1559.002"
    },
    {
        "description": "Adversaries may modify or add LSASS drivers to obtain persistence on compromised systems. The Windows security subsystem is a set of components that manage and enforce the security policy for a computer or domain. The Local Security Authority (LSA) is the main component responsible for local security policy and user authentication. The LSA includes multiple dynamic link libraries (DLLs) associated with various other security functions, all of which run in the context of the LSA Subsystem Service (LSASS) lsass.exe process.",
        "id": "210",
        "mitigation": "Restrict Library Loading",
        "mitigationid": "M1044",
        "technique": "LSASS Driver",
        "techniqueid": "T1547.008"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.",
        "id": "211",
        "mitigation": "Restrict Library Loading",
        "mitigationid": "M1044",
        "technique": "Hijack Execution Flow",
        "techniqueid": "T1574"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the search order used to load DLLs. Windows systems use a common method to look for required DLLs to load into a program. Hijacking DLL loads may be for the purpose of establishing persistence as well as elevating privileges and/or evading restrictions on file execution.",
        "id": "212",
        "mitigation": "Restrict Library Loading",
        "mitigationid": "M1044",
        "technique": "DLL Search Order Hijacking",
        "techniqueid": "T1574.001"
    },
    {
        "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of?Unix Shell?while Windows installations include the?Windows Command Shell?and?PowerShell.",
        "id": "213",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "Command and Scripting Interpreter",
        "techniqueid": "T1059"
    },
    {
        "description": "Adversaries may abuse JavaScript and/or JScript for execution. JavaScript (JS) is a platform-agnostic scripting language (compiled just-in-time at runtime) commonly associated with scripts in webpages, though JS can be executed in runtime environments outside the browser.",
        "id": "214",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "JavaScript/JScript",
        "techniqueid": "T1059.007"
    },
    {
        "description": "Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as?Component Object Model?and the?Native API?through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.",
        "id": "215",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "Visual Basic",
        "techniqueid": "T1059.005"
    },
    {
        "description": "Adversaries may gain access to a system through a user visiting a website over the normal course of browsing. With this technique, the user's web browser is typically targeted for exploitation, but adversaries may also use compromised websites for non-exploitation behavior such as acquiring?Application Access Token.",
        "id": "216",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "Drive-by Compromise",
        "techniqueid": "T1189"
    },
    {
        "description": "Adversaries may send phishing messages to gain access to victim systems. All forms of phishing are electronically delivered social engineering. Phishing can be targeted, known as spearphishing. In spearphishing, a specific individual, company, or industry will be targeted by the adversary. More generally, adversaries can conduct non-targeted phishing, such as in mass malware spam campaigns.",
        "id": "217",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "Phishing",
        "techniqueid": "T1566"
    },
    {
        "description": "Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon?User Execution?to gain execution.",
        "id": "218",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "Spearphishing Attachment",
        "techniqueid": "T1566.001"
    },
    {
        "description": "Adversaries may abuse Compiled HTML files (.chm) to conceal malicious code. CHM files are commonly distributed as part of the Microsoft HTML Help system. CHM files are compressed compilations of various content such as HTML documents, images, and scripting/web related programming languages such VBA, JScript, Java, and ActiveX. CHM content is displayed using underlying components of the Internet Explorer browser loaded by the HTML Help executable program (hh.exe).",
        "id": "219",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "Compiled HTML File",
        "techniqueid": "T1218.001"
    },
    {
        "description": "An adversary may rely upon specific actions by a user in order to gain execution. Users may be subjected to social engineering to get them to execute malicious code by, for example, opening a malicious document file or link. These user actions will typically be observed as follow-on behavior from forms of?Phishing.",
        "id": "220",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "User Execution",
        "techniqueid": "T1204"
    },
    {
        "description": "An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from?Spearphishing Link. Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via?Exploitation for Client Execution. Links may also lead users to download files that require execution via?Malicious File.",
        "id": "221",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "Malicious Link",
        "techniqueid": "T1204.001"
    },
    {
        "description": "Adversaries may use scripts automatically executed at boot or logon initialization to establish persistence. Initialization scripts can be used to perform administrative functions, which may often execute other programs or send information to an internal logging server. These scripts can vary based on operating system and whether applied locally or remotely.",
        "id": "222",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Boot or Logon Initialization Scripts",
        "techniqueid": "T1037"
    },
    {
        "description": "Adversaries may use macOS logon scripts automatically executed at logon initialization to establish persistence. macOS allows logon scripts (known as login hooks) to be executed whenever a specific user logs into a system. A login hook tells Mac OS X to execute a certain script when a user logs in, but unlike?Startup Items, a login hook executes as the elevated root user.",
        "id": "223",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Logon Script (Mac)",
        "techniqueid": "T1037.002"
    },
    {
        "description": "Adversaries may use network logon scripts automatically executed at logon initialization to establish persistence. Network logon scripts can be assigned using Active Directory or Group Policy Objects. These logon scripts run with the privileges of the user they are assigned to. Depending on the systems within the network, initializing one of these scripts could apply to more than one or potentially all systems.",
        "id": "224",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Network Logon Script",
        "techniqueid": "T1037.003"
    },
    {
        "description": "Adversaries may use startup items automatically executed at boot initialization to establish persistence. Startup items execute during the final phase of the boot process and contain shell scripts or other executable files along with configuration information used by the system to determine the execution order for all startup items.",
        "id": "225",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Startup Items",
        "techniqueid": "T1037.005"
    },
    {
        "description": "Adversaries may use rc.common automatically executed at boot initialization to establish persistence. During the boot process, macOS executes?source /etc/rc.common, which is a shell script containing various utility functions. This file also defines routines for processing command-line arguments and for gathering system settings and is thus recommended to include in the start of Startup Item Scripts . In macOS and OS X, this is now a deprecated mechanism in favor of?Launch Agent?and?Launch Daemon?but is currently still used.",
        "id": "226",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Rc.common",
        "techniqueid": "T1037.004"
    },
    {
        "description": "Adversaries may establish persistence by executing malicious content triggered by a user��s shell.?~/.bash_profile?and?~/.bashrc?are shell scripts that contain shell commands. These files are executed in a user's context when a new shell opens or when a user logs in so that their environment is set correctly.",
        "id": "227",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": ".bash_profile and .bashrc",
        "techniqueid": "T1546.004"
    },
    {
        "description": "Adversaries may gain persistence and elevate privileges by executing malicious content triggered by PowerShell profiles. A PowerShell profile (profile.ps1) is a script that runs when?PowerShell?starts and can be used as a logon script to customize user environments.",
        "id": "228",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "PowerShell Profile",
        "techniqueid": "T1546.013"
    },
    {
        "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.",
        "id": "229",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Masquerading",
        "techniqueid": "T1036"
    },
    {
        "description": "Adversaries may match or approximate the name or location of legitimate files when naming/placing their files. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). Alternatively, the filename given may be a close approximation of legitimate programs or something innocuous.",
        "id": "230",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Match Legitimate Name or Location",
        "techniqueid": "T1036.005"
    },
    {
        "description": "Adversaries may abuse control.exe to proxy execution of malicious payloads. The Windows Control Panel process binary (control.exe) handles execution of Control Panel items, which are utilities that allow users to view and adjust computer settings.",
        "id": "231",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Control Panel",
        "techniqueid": "T1218.002"
    },
    {
        "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of?Unix Shell?while Windows installations include the?Windows Command Shell?and?PowerShell.",
        "id": "232",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Command and Scripting Interpreter",
        "techniqueid": "T1059"
    },
    {
        "description": "Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the?Start-Process?cmdlet which can be used to run an executable and the?Invoke-Command?cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).",
        "id": "233",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "PowerShell",
        "techniqueid": "T1059.001"
    },
    {
        "description": "Adversaries may abuse scripting or built-in command line interpreters (CLI) on network devices to execute malicious command and payloads. The CLI is the primary means through which users and administrators interact with the device in order to view system information, modify device operations, or perform diagnostic and administrative functions. CLIs typically contain various permission levels required for different commands.",
        "id": "234",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Network Device CLI",
        "techniqueid": "T1059.008"
    },
    {
        "description": "Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed binaries. Binaries signed with trusted digital certificates can execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files.",
        "id": "235",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Signed Binary Proxy Execution",
        "techniqueid": "T1218"
    },
    {
        "description": "Adversaries may abuse msiexec.exe to proxy execution of malicious payloads. Msiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi). Msiexec.exe is digitally signed by Microsoft.",
        "id": "236",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Msiexec",
        "techniqueid": "T1218.007"
    },
    {
        "description": "Adversaries may abuse Internet browser extensions to establish persistence access to victim systems. Browser extensions or plugins are small programs that can add functionality and customize aspects of Internet browsers. They can be installed directly or through a browser's app store and generally have access and permissions to everything that the browser can access.",
        "id": "237",
        "mitigation": "Limit Software Installation",
        "mitigationid": "M1033",
        "technique": "Browser Extensions",
        "techniqueid": "T1176"
    },
    {
        "description": "Adversaries may abuse Python commands and scripts for execution. Python is a very popular scripting/programming language, with capabilities to perform many functions. Python can be executed interactively from the command-line (via the?python.exe?interpreter) or via scripts (.py) that can be written and distributed to different systems. Python code can also be compiled into binary executables.",
        "id": "238",
        "mitigation": "Limit Software Installation",
        "mitigationid": "M1033",
        "technique": "Python",
        "techniqueid": "T1059.006"
    },
    {
        "description": "Adversaries may abuse Internet browser extensions to establish persistence access to victim systems. Browser extensions or plugins are small programs that can add functionality and customize aspects of Internet browsers. They can be installed directly or through a browser's app store and generally have access and permissions to everything that the browser can access.",
        "id": "239",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Browser Extensions",
        "techniqueid": "T1176"
    },
    {
        "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of?Unix Shell?while Windows installations include the?Windows Command Shell?and?PowerShell.",
        "id": "240",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Command and Scripting Interpreter",
        "techniqueid": "T1059"
    },
    {
        "description": "Adversaries may abuse AppleScript for execution. AppleScript is a macOS scripting language designed to control applications and parts of the OS via inter-application messages called AppleEvents. These AppleEvent messages can be sent independently or easily scripted with AppleScript. These events can locate open windows, send keystrokes, and interact with almost any open application locally or remotely.",
        "id": "241",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "AppleScript",
        "techniqueid": "T1059.002"
    },
    {
        "description": "Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd.exe) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands.",
        "id": "242",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Windows Command Shell",
        "techniqueid": "T1059.003"
    },
    {
        "description": "Adversaries may abuse Unix shell commands and scripts for execution. Unix shells are the primary command prompt on Linux and macOS systems, though many variations of the Unix shell exist (e.g. sh, bash, zsh, etc.) depending on the specific OS or distribution. Unix shells can control every aspect of a system, with certain commands requiring elevated privileges.",
        "id": "243",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Unix Shell",
        "techniqueid": "T1059.004"
    },
    {
        "description": "Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as?Component Object Model?and the?Native API?through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.",
        "id": "244",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Visual Basic",
        "techniqueid": "T1059.005"
    },
    {
        "description": "Adversaries may abuse Python commands and scripts for execution. Python is a very popular scripting/programming language, with capabilities to perform many functions. Python can be executed interactively from the command-line (via the?python.exe?interpreter) or via scripts (.py) that can be written and distributed to different systems. Python code can also be compiled into binary executables.",
        "id": "245",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Python",
        "techniqueid": "T1059.006"
    },
    {
        "description": "Adversaries may abuse JavaScript and/or JScript for execution. JavaScript (JS) is a platform-agnostic scripting language (compiled just-in-time at runtime) commonly associated with scripts in webpages, though JS can be executed in runtime environments outside the browser.",
        "id": "246",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "JavaScript/JScript",
        "techniqueid": "T1059.007"
    },
    {
        "description": "Adversaries may abuse scripting or built-in command line interpreters (CLI) on network devices to execute malicious command and payloads. The CLI is the primary means through which users and administrators interact with the device in order to view system information, modify device operations, or perform diagnostic and administrative functions. CLIs typically contain various permission levels required for different commands.",
        "id": "247",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Network Device CLI",
        "techniqueid": "T1059.008"
    },
    {
        "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.",
        "id": "248",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Masquerading",
        "techniqueid": "T1036"
    },
    {
        "description": "Adversaries may match or approximate the name or location of legitimate files when naming/placing their files. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). Alternatively, the filename given may be a close approximation of legitimate programs or something innocuous.",
        "id": "249",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Match Legitimate Name or Location",
        "techniqueid": "T1036.005"
    },
    {
        "description": "Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed binaries. Binaries signed with trusted digital certificates can execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files.",
        "id": "250",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Signed Binary Proxy Execution",
        "techniqueid": "T1218"
    },
    {
        "description": "Adversaries may abuse CMSTP to proxy execution of malicious code. The Microsoft Connection Manager Profile Installer (CMSTP.exe) is a command-line program used to install Connection Manager service profiles. CMSTP.exe accepts an installation information file (INF) as a parameter and installs a service profile leveraged for remote access connections.",
        "id": "251",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "CMSTP",
        "techniqueid": "T1218.003"
    },
    {
        "description": "Adversaries may abuse Compiled HTML files (.chm) to conceal malicious code. CHM files are commonly distributed as part of the Microsoft HTML Help system. CHM files are compressed compilations of various content such as HTML documents, images, and scripting/web related programming languages such VBA, JScript, Java, and ActiveX. CHM content is displayed using underlying components of the Internet Explorer browser loaded by the HTML Help executable program (hh.exe).",
        "id": "252",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Compiled HTML File",
        "techniqueid": "T1218.001"
    },
    {
        "description": "Adversaries may use InstallUtil to proxy execution of code through a trusted Windows utility. InstallUtil is a command-line utility that allows for installation and uninstallation of resources by executing specific installer components specified in .NET binaries. InstallUtil is digitally signed by Microsoft and located in the .NET directories on a Windows system:?C:\\Windows\\Microsoft.NET\\Framework\\v\\InstallUtil.exe?and?C:\\Windows\\Microsoft.NET\\Framework64\\v\\InstallUtil.exe.",
        "id": "253",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "InstallUtil",
        "techniqueid": "T1218.004"
    },
    {
        "description": "Adversaries may abuse mshta.exe to proxy execution of malicious .hta files and Javascript or VBScript through a trusted Windows utility. There are several examples of different types of threats leveraging mshta.exe during initial compromise and for execution of code",
        "id": "254",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Mshta",
        "techniqueid": "T1218.005"
    },
    {
        "description": "Adversaries may abuse Regsvcs and Regasm to proxy execution of code through a trusted Windows utility. Regsvcs and Regasm are Windows command-line utilities that are used to register .NET?Component Object Model?(COM) assemblies. Both are digitally signed by Microsoft.",
        "id": "255",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Regsvcs/Regasm",
        "techniqueid": "T1218.009"
    },
    {
        "description": "Adversaries may abuse control.exe to proxy execution of malicious payloads. The Windows Control Panel process binary (control.exe) handles execution of Control Panel items, which are utilities that allow users to view and adjust computer settings.",
        "id": "256",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Control Panel",
        "techniqueid": "T1218.002"
    },
    {
        "description": "Adversaries may abuse odbcconf.exe to proxy execution of malicious payloads. Odbcconf.exe is a Windows utility that allows you to configure Open Database Connectivity (ODBC) drivers and data source names. Odbcconf.exe is digitally signed by Microsoft.",
        "id": "257",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Odbcconf",
        "techniqueid": "T1218.008"
    },
    {
        "description": "Adversaries may abuse verclsid.exe to proxy execution of malicious code. Verclsid.exe is known as the Extension CLSID Verification Host and is responsible for verifying each shell extension before they are used by Windows Explorer or the Windows Shell.",
        "id": "258",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Verclsid",
        "techniqueid": "T1218.012"
    },
    {
        "description": "Adversaries may use scripts signed with trusted certificates to proxy execution of malicious files. Several Microsoft signed scripts that are default on Windows installations can be used to proxy execution of other files. This behavior may be abused by adversaries to execute malicious files that could bypass application control and signature validation on systems.",
        "id": "259",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Signed Script Proxy Execution",
        "techniqueid": "T1216"
    },
    {
        "description": "Adversaries may use the trusted PubPrn script to proxy execution of malicious files. This behavior may bypass signature validation restrictions and application control solutions that do not account for use of these scripts.",
        "id": "260",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "PubPrn",
        "techniqueid": "T1216.001"
    },
    {
        "description": "Adversaries may take advantage of trusted developer utilities to proxy execution of malicious payloads. There are many utilities used for software development related tasks that can be used to execute code in various forms to assist in development, debugging, and reverse engineering. These utilities may often be signed with legitimate certificates that allow them to execute on a system and proxy execution of malicious code through a trusted process that effectively bypasses application control solutions.",
        "id": "261",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Trusted Developer Utilities Proxy Execution",
        "techniqueid": "T1127"
    },
    {
        "description": "An adversary may rely upon specific actions by a user in order to gain execution. Users may be subjected to social engineering to get them to execute malicious code by, for example, opening a malicious document file or link. These user actions will typically be observed as follow-on behavior from forms of?Phishing.",
        "id": "262",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "User Execution",
        "techniqueid": "T1204"
    },
    {
        "description": "An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from?Spearphishing Attachment. Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.",
        "id": "263",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Malicious File",
        "techniqueid": "T1204.002"
    },
    {
        "description": "Adversaries may bypass application control and obscure execution of code by embedding scripts inside XSL files. Extensible Stylesheet Language (XSL) files are commonly used to describe the processing and rendering of data within XML files. To support complex operations, the XSL standard includes support for embedded scripting in various languages.",
        "id": "264",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "XSL Script Processing",
        "techniqueid": "T1220"
    },
    {
        "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of?Unix Shell?while Windows installations include the?Windows Command Shell?and?PowerShell.",
        "id": "265",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Command and Scripting Interpreter",
        "techniqueid": "T1059"
    },
    {
        "description": "Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the?Start-Process?cmdlet which can be used to run an executable and the?Invoke-Command?cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).",
        "id": "266",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "PowerShell",
        "techniqueid": "T1059.001"
    },
    {
        "description": "Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as?Component Object Model?and the?Native API?through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.",
        "id": "267",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Visual Basic",
        "techniqueid": "T1059.005"
    },
    {
        "description": "Adversaries may abuse JavaScript and/or JScript for execution. JavaScript (JS) is a platform-agnostic scripting language (compiled just-in-time at runtime) commonly associated with scripts in webpages, though JS can be executed in runtime environments outside the browser.",
        "id": "268",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "JavaScript/JScript",
        "techniqueid": "T1059.007"
    },
    {
        "description": "Adversaries may hide malicious Visual Basic for Applications (VBA) payloads embedded within MS Office documents by replacing the VBA source code with benign data.",
        "id": "269",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "VBA Stomping",
        "techniqueid": "T1564.007"
    },
    {
        "description": "Adversaries may leverage Microsoft Office-based applications for persistence between startups. Microsoft Office is a fairly common application suite on Windows-based operating systems within an enterprise network. There are multiple mechanisms that can be used with Office for persistence when an Office-based application is started; this can include the use of Office Template Macros and add-ins.",
        "id": "270",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Office Application Startup",
        "techniqueid": "T1137"
    },
    {
        "description": "Adversaries may abuse Microsoft Office templates to obtain persistence on a compromised system. Microsoft Office contains templates that are part of common Office applications and are used to customize styles. The base templates within the application are used each time an application starts.",
        "id": "271",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Office Template Macros",
        "techniqueid": "T1137.001"
    },
    {
        "description": "Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed binaries. Binaries signed with trusted digital certificates can execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files.",
        "id": "272",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Signed Binary Proxy Execution",
        "techniqueid": "T1218"
    },
    {
        "description": "Adversaries may abuse CMSTP to proxy execution of malicious code. The Microsoft Connection Manager Profile Installer (CMSTP.exe) is a command-line program used to install Connection Manager service profiles. CMSTP.exe accepts an installation information file (INF) as a parameter and installs a service profile leveraged for remote access connections.",
        "id": "273",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "CMSTP",
        "techniqueid": "T1218.003"
    },
    {
        "description": "Adversaries may use InstallUtil to proxy execution of code through a trusted Windows utility. InstallUtil is a command-line utility that allows for installation and uninstallation of resources by executing specific installer components specified in .NET binaries. InstallUtil is digitally signed by Microsoft and located in the .NET directories on a Windows system:?C:\\Windows\\Microsoft.NET\\Framework\\v\\InstallUtil.exe?and?C:\\Windows\\Microsoft.NET\\Framework64\\v\\InstallUtil.exe.",
        "id": "274",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "InstallUtil",
        "techniqueid": "T1218.004"
    },
    {
        "description": "Adversaries may abuse mshta.exe to proxy execution of malicious .hta files and Javascript or VBScript through a trusted Windows utility. There are several examples of different types of threats leveraging mshta.exe during initial compromise and for execution of code",
        "id": "275",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Mshta",
        "techniqueid": "T1218.005"
    },
    {
        "description": "Adversaries may abuse Regsvcs and Regasm to proxy execution of code through a trusted Windows utility. Regsvcs and Regasm are Windows command-line utilities that are used to register .NET?Component Object Model?(COM) assemblies. Both are digitally signed by Microsoft.",
        "id": "276",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Regsvcs/Regasm",
        "techniqueid": "T1218.009"
    },
    {
        "description": "Adversaries may abuse odbcconf.exe to proxy execution of malicious payloads. Odbcconf.exe is a Windows utility that allows you to configure Open Database Connectivity (ODBC) drivers and data source names. Odbcconf.exe is digitally signed by Microsoft.",
        "id": "277",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Odbcconf",
        "techniqueid": "T1218.008"
    },
    {
        "description": "Adversaries may abuse verclsid.exe to proxy execution of malicious code. Verclsid.exe is known as the Extension CLSID Verification Host and is responsible for verifying each shell extension before they are used by Windows Explorer or the Windows Shell.",
        "id": "278",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Verclsid",
        "techniqueid": "T1218.012"
    },
    {
        "description": "Adversaries may create or modify references in Office document templates to conceal malicious code or force authentication attempts. Microsoft��s Office Open XML (OOXML) specification defines an XML-based format for Office documents (.docx, xlsx, .pptx) to replace older binary formats (.doc, .xls, .ppt). OOXML files are packed together ZIP archives compromised of various XML files, referred to as parts, containing properties that collectively define how a document is rendered.",
        "id": "279",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Template Injection",
        "techniqueid": "T1221"
    },
    {
        "description": "Adversaries may take advantage of trusted developer utilities to proxy execution of malicious payloads. There are many utilities used for software development related tasks that can be used to execute code in various forms to assist in development, debugging, and reverse engineering. These utilities may often be signed with legitimate certificates that allow them to execute on a system and proxy execution of malicious code through a trusted process that effectively bypasses application control solutions.",
        "id": "280",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Trusted Developer Utilities Proxy Execution",
        "techniqueid": "T1127"
    },
    {
        "description": "Adversaries may use MSBuild to proxy execution of code through a trusted Windows utility. MSBuild.exe (Microsoft Build Engine) is a software build platform used by Visual Studio. It handles XML formatted project files that define requirements for loading and building various platforms and configurations.",
        "id": "281",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "MSBuild",
        "techniqueid": "T1127.001"
    },
    {
        "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of?Unix Shell?while Windows installations include the?Windows Command Shell?and?PowerShell.",
        "id": "282",
        "mitigation": "Code Signing",
        "mitigationid": "M1045",
        "technique": "Command and Scripting Interpreter",
        "techniqueid": "T1059"
    },
    {
        "description": "Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the?Start-Process?cmdlet which can be used to run an executable and the?Invoke-Command?cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).",
        "id": "283",
        "mitigation": "Code Signing",
        "mitigationid": "M1045",
        "technique": "PowerShell",
        "techniqueid": "T1059.001"
    },
    {
        "description": "Adversaries may abuse AppleScript for execution. AppleScript is a macOS scripting language designed to control applications and parts of the OS via inter-application messages called AppleEvents. These AppleEvent messages can be sent independently or easily scripted with AppleScript. These events can locate open windows, send keystrokes, and interact with almost any open application locally or remotely.",
        "id": "284",
        "mitigation": "Code Signing",
        "mitigationid": "M1045",
        "technique": "AppleScript",
        "techniqueid": "T1059.002"
    },
    {
        "description": "Adversaries may modify client software binaries to establish persistent access to systems. Client software enables users to access services provided by a server. Common client software types are SSH clients, FTP clients, email clients, and web browsers.",
        "id": "285",
        "mitigation": "Code Signing",
        "mitigationid": "M1045",
        "technique": "Compromise Client Software Binary",
        "techniqueid": "T1554"
    },
    {
        "description": "Adversaries may gain persistence and elevate privileges by executing malicious content triggered by PowerShell profiles. A PowerShell profile (profile.ps1) is a script that runs when?PowerShell?starts and can be used as a logon script to customize user environments.",
        "id": "286",
        "mitigation": "Code Signing",
        "mitigationid": "M1045",
        "technique": "PowerShell Profile",
        "techniqueid": "T1546.013"
    },
    {
        "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.",
        "id": "287",
        "mitigation": "Code Signing",
        "mitigationid": "M1045",
        "technique": "Masquerading",
        "techniqueid": "T1036"
    },
    {
        "description": "Adversaries may attempt to mimic features of valid code signatures to increase the chance of deceiving a user, analyst, or tool. Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with. Adversaries can copy the metadata and signature information from a signed program, then use it as a template for an unsigned program. Files with invalid code signatures will fail digital signature validation checks, but they may appear more legitimate to users and security tools may improperly handle these files.",
        "id": "288",
        "mitigation": "Code Signing",
        "mitigationid": "M1045",
        "technique": "Invalid Code Signature",
        "techniqueid": "T1036.001"
    },
    {
        "description": "Adversaries may match or approximate the name or location of legitimate files when naming/placing their files. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). Alternatively, the filename given may be a close approximation of legitimate programs or something innocuous.",
        "id": "289",
        "mitigation": "Code Signing",
        "mitigationid": "M1045",
        "technique": "Match Legitimate Name or Location",
        "techniqueid": "T1036.005"
    },
    {
        "description": "Adversaries may abuse legitimate extensible development features of servers to establish persistent access to systems. Enterprise server applications may include features that allow developers to write and install software or scripts to extend the functionality of the main application. Adversaries may install malicious components to extend and abuse server applications.",
        "id": "290",
        "mitigation": "Code Signing",
        "mitigationid": "M1045",
        "technique": "Server Software Component",
        "techniqueid": "T1505"
    },
    {
        "description": "Adversaries may abuse Microsoft transport agents to establish persistent access to systems. Microsoft Exchange transport agents can operate on email messages passing through the transport pipeline to perform various tasks such as filtering spam, filtering malicious attachments, journaling, or adding a corporate signature to the end of all outgoing emails. Transport agents can be written by application developers and then compiled to .NET assemblies that are subsequently registered with the Exchange server. Transport agents will be invoked during a specified stage of email processing and carry out developer defined tasks.",
        "id": "291",
        "mitigation": "Code Signing",
        "mitigationid": "M1045",
        "technique": "Transport Agent",
        "techniqueid": "T1505.002"
    },
    {
        "description": "Adversaries may abuse SQL stored procedures to establish persistent access to systems. SQL Stored Procedures are code that can be saved and reused so that database users do not waste time rewriting frequently used SQL queries. Stored procedures can be invoked via SQL statements to the database using the procedure name or via defined events (e.g. when a SQL server application is started/restarted).",
        "id": "292",
        "mitigation": "Code Signing",
        "mitigationid": "M1045",
        "technique": "SQL Stored Procedures",
        "techniqueid": "T1505.001"
    },
    {
        "description": "Adversaries may gain persistence and elevate privileges by executing malicious content triggered by PowerShell profiles. A PowerShell profile (profile.ps1) is a script that runs when?PowerShell?starts and can be used as a logon script to customize user environments.",
        "id": "293",
        "mitigation": "Software Configuration",
        "mitigationid": "M1054",
        "technique": "PowerShell Profile",
        "techniqueid": "T1546.013"
    },
    {
        "description": "",
        "id": "294",
        "mitigation": "",
        "mitigationid": "",
        "technique": "",
        "techniqueid": ""
    },
    {
        "description": "Adversaries may delete or alter generated artifacts on a host system, including logs or captured files such as quarantined malware. Locations and format of logs are platform or product-specific, however standard operating system logs are captured as Windows events or Linux/macOS files such as?Bash History?and /var/log/*.",
        "id": "295",
        "mitigation": "Remote Data Storage",
        "mitigationid": "M1029",
        "technique": "Indicator Removal on Host",
        "techniqueid": "T1070"
    },
    {
        "description": "Adversaries may clear Windows Event Logs to hide the activity of an intrusion. Windows Event Logs are a record of a computer's alerts and notifications. There are three system-defined sources of events: System, Application, and Security, with five event types: Error, Warning, Information, Success Audit, and Failure Audit.",
        "id": "296",
        "mitigation": "Remote Data Storage",
        "mitigationid": "M1029",
        "technique": "Clear Windows Event Logs",
        "techniqueid": "T1070.001"
    },
    {
        "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the?/var/log/?directory. Subfolders in this directory categorize logs by their related functions, such as:",
        "id": "297",
        "mitigation": "Remote Data Storage",
        "mitigationid": "M1029",
        "technique": "Clear Linux or Mac System Logs",
        "techniqueid": "T1070.002"
    },
    {
        "description": "Adversaries may leverage information repositories to mine valuable information. Information repositories are tools that allow for storage of information, typically to facilitate collaboration or information sharing between users, and can store a wide variety of data that may aid adversaries in further objectives, or direct access to the target information.",
        "id": "298",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Data from Information Repositories",
        "techniqueid": "T1213"
    },
    {
        "description": "Adversaries may leverage Confluence repositories to mine valuable information. Often found in development environments alongside Atlassian JIRA, Confluence is generally used to store development-related documentation, however, in general may contain more diverse categories of useful information, such as:",
        "id": "299",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Confluence",
        "techniqueid": "T1213.001"
    },
    {
        "description": "Adversaries may leverage the SharePoint repository as a source to mine valuable information. SharePoint will often contain useful information for an adversary to learn about the structure and functionality of the internal network and systems. For example, the following is a list of example information that may hold potential value to an adversary and may also be found on SharePoint:",
        "id": "300",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Sharepoint",
        "techniqueid": "T1213.002"
    },
    {
        "description": "Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g.?Bash History), operating system or application-specific repositories (e.g.?Credentials in Registry), or other specialized files/artifacts (e.g.?Private Keys).",
        "id": "301",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Unsecured Credentials",
        "techniqueid": "T1552"
    },
    {
        "description": "Adversaries may search local file systems and remote file shares for files containing insecurely stored credentials. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.",
        "id": "302",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Credentials In Files",
        "techniqueid": "T1552.001"
    },
    {
        "description": "Adversaries may search the Registry on compromised systems for insecurely stored credentials. The Windows Registry stores configuration information that can be used by the system or other programs. Adversaries may query the Registry looking for credentials and passwords that have been stored for use by other programs or services. Sometimes these credentials are used for automatic logons.",
        "id": "303",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Credentials in Registry",
        "techniqueid": "T1552.002"
    },
    {
        "description": "Adversaries may search for private key certificate files on compromised systems for insecurely stored credentials. Private cryptographic keys and certificates are used for authentication, encryption/decryption, and digital signatures. Common key and certificate file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, .pfx, .cer, .p7b, .asc.",
        "id": "304",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Private Keys",
        "techniqueid": "T1552.004"
    },
    {
        "description": "Adversaries may attempt to find unsecured credentials in Group Policy Preferences (GPP). GPP are tools that allow administrators to create domain policies with embedded credentials. These policies allow administrators to set local accounts.",
        "id": "305",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Group Policy Preferences",
        "techniqueid": "T1552.006"
    },
    {
        "description": "Adversaries may leverage information repositories to mine valuable information. Information repositories are tools that allow for storage of information, typically to facilitate collaboration or information sharing between users, and can store a wide variety of data that may aid adversaries in further objectives, or direct access to the target information.",
        "id": "306",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Data from Information Repositories",
        "techniqueid": "T1213"
    },
    {
        "description": "Adversaries may leverage Confluence repositories to mine valuable information. Often found in development environments alongside Atlassian JIRA, Confluence is generally used to store development-related documentation, however, in general may contain more diverse categories of useful information, such as:",
        "id": "307",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Confluence",
        "techniqueid": "T1213.001"
    },
    {
        "description": "Adversaries may leverage the SharePoint repository as a source to mine valuable information. SharePoint will often contain useful information for an adversary to learn about the structure and functionality of the internal network and systems. For example, the following is a list of example information that may hold potential value to an adversary and may also be found on SharePoint:",
        "id": "308",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Sharepoint",
        "techniqueid": "T1213.002"
    },
    {
        "description": "Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g.?Bash History), operating system or application-specific repositories (e.g.?Credentials in Registry), or other specialized files/artifacts (e.g.?Private Keys).",
        "id": "309",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Unsecured Credentials",
        "techniqueid": "T1552"
    },
    {
        "description": "Adversaries may search local file systems and remote file shares for files containing insecurely stored credentials. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.",
        "id": "310",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Credentials In Files",
        "techniqueid": "T1552.001"
    },
    {
        "description": "Adversaries may search the Registry on compromised systems for insecurely stored credentials. The Windows Registry stores configuration information that can be used by the system or other programs. Adversaries may query the Registry looking for credentials and passwords that have been stored for use by other programs or services. Sometimes these credentials are used for automatic logons.",
        "id": "311",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Credentials in Registry",
        "techniqueid": "T1552.002"
    },
    {
        "description": "Adversaries may search for private key certificate files on compromised systems for insecurely stored credentials. Private cryptographic keys and certificates are used for authentication, encryption/decryption, and digital signatures. Common key and certificate file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, .pfx, .cer, .p7b, .asc.",
        "id": "312",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Private Keys",
        "techniqueid": "T1552.004"
    },
    {
        "description": "Adversaries may attempt to find unsecured credentials in Group Policy Preferences (GPP). GPP are tools that allow administrators to create domain policies with embedded credentials. These policies allow administrators to set local accounts.",
        "id": "313",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Group Policy Preferences",
        "techniqueid": "T1552.006"
    },
    {
        "description": "Adversaries may attempt to get a listing of cloud accounts. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application.",
        "id": "314",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Cloud Account",
        "techniqueid": "T1087.004"
    },
    {
        "description": "An adversary may attempt to discover resources that are available within an infrastructure-as-a-service (IaaS) environment. This includes compute service resources such as instances, virtual machines, and snapshots as well as resources of other services including the storage and database services.",
        "id": "315",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Cloud Infrastructure Discovery",
        "techniqueid": "T1580"
    },
    {
        "description": "An adversary may use a cloud service dashboard GUI with stolen credentials to gain useful information from an operational cloud environment, such as specific services, resources, and features. For example, the GCP Command Center can be used to view all assets, findings of potential security risks, and to run additional queries, such as finding public IP addresses and open ports.",
        "id": "316",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Cloud Service Dashboard",
        "techniqueid": "T1538"
    },
    {
        "description": "Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services. On macOS, launchd processes known as?Launch Daemon?and?Launch Agent?are run to finish system initialization and load user specific parameters.",
        "id": "317",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Create or Modify System Process",
        "techniqueid": "T1543"
    },
    {
        "description": "Adversaries may create or modify systemd services to repeatedly execute malicious payloads as part of persistence. The systemd service manager is commonly used for managing background daemon processes (also known as services) and other system resources. Systemd is the default initialization (init) system on many Linux distributions starting with Debian 8, Ubuntu 15.04, CentOS 7, RHEL 7, Fedora 15, and replaces legacy init systems including SysVinit and Upstart while remaining backwards compatible with the aforementioned init systems.",
        "id": "318",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Systemd Service",
        "techniqueid": "T1543.002"
    },
    {
        "description": "Adversaries may access data objects from improperly secured cloud storage.",
        "id": "319",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Data from Cloud Storage Object",
        "techniqueid": "T1530"
    },
    {
        "description": "Adversaries may leverage information repositories to mine valuable information. Information repositories are tools that allow for storage of information, typically to facilitate collaboration or information sharing between users, and can store a wide variety of data that may aid adversaries in further objectives, or direct access to the target information.",
        "id": "320",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Data from Information Repositories",
        "techniqueid": "T1213"
    },
    {
        "description": "Adversaries may leverage Confluence repositories to mine valuable information. Often found in development environments alongside Atlassian JIRA, Confluence is generally used to store development-related documentation, however, in general may contain more diverse categories of useful information, such as:",
        "id": "321",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Confluence",
        "techniqueid": "T1213.001"
    },
    {
        "description": "Adversaries may leverage the SharePoint repository as a source to mine valuable information. SharePoint will often contain useful information for an adversary to learn about the structure and functionality of the internal network and systems. For example, the following is a list of example information that may hold potential value to an adversary and may also be found on SharePoint:",
        "id": "322",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Sharepoint",
        "techniqueid": "T1213.002"
    },
    {
        "description": "Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators.",
        "id": "323",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Impair Defenses",
        "techniqueid": "T1562"
    },
    {
        "description": "Adversaries may disable security tools to avoid possible detection of their tools and activities. This can take the form of killing security software or event logging processes, deleting Registry keys so that tools do not start at run time, or other methods to interfere with security tools scanning or reporting information.",
        "id": "324",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Disable or Modify Tools",
        "techniqueid": "T1562.001"
    },
    {
        "description": "Adversaries may disable Windows event logging to limit data that can be leveraged for detections and audits. Windows event logs record user and system activity such as login attempts, process creation, and much more. This data is used by security tools and analysts to generate detections.",
        "id": "325",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Disable Windows Event Logging",
        "techniqueid": "T1562.002"
    },
    {
        "description": "Adversaries may disable or modify system firewalls in order to bypass controls limiting network usage. Changes could be disabling the entire mechanism as well as adding, deleting, or modifying particular rules. This can be done numerous ways depending on the operating system, including via command-line, editing Windows Registry keys, and Windows Control Panel.",
        "id": "326",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Disable or Modify System Firewall",
        "techniqueid": "T1562.004"
    },
    {
        "description": "An adversary may attempt to block indicators or events typically captured by sensors from being gathered and analyzed. This could include maliciously redirecting or even disabling host-based sensors, such as Event Tracing for Windows (ETW), by tampering settings that control the collection and flow of event telemetry. These settings may be stored on the system in configuration files and/or in the Registry as well as being accessible via administrative utilities such as?PowerShell?or?Windows Management Instrumentation.",
        "id": "327",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Indicator Blocking",
        "techniqueid": "T1562.006"
    },
    {
        "description": "Adversaries may disable or modify a firewall within a cloud environment to bypass controls that limit access to cloud resources. Cloud firewalls are separate from system firewalls that are described in?Disable or Modify System Firewall.",
        "id": "328",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Disable or Modify Cloud Firewall",
        "techniqueid": "T1562.007"
    },
    {
        "description": "An adversary may disable cloud logging capabilities and integrations to limit what data is collected on their activities and avoid detection.",
        "id": "329",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Disable Cloud Logs",
        "techniqueid": "T1562.008"
    },
    {
        "description": "Adversaries can take advantage of security vulnerabilities and inherent functionality in browser software to change content, modify behavior, and intercept information as part of various man in the browser techniques.",
        "id": "330",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Man in the Browser",
        "techniqueid": "T1185"
    },
    {
        "description": "Adversaries may abuse systemd timers to perform task scheduling for initial or recurring execution of malicious code. Systemd timers are unit files with file extension?.timer?that control services. Timers can be set to run on a calendar event or after a time span relative to a starting point. They can be used as an alternative to?Cron?in Linux environments.",
        "id": "331",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Systemd Timers",
        "techniqueid": "T1053.006"
    },
    {
        "description": "Adversaries can steal user application access tokens as a means of acquiring credentials to access remote systems and resources. This can occur through social engineering and typically requires user action to grant access.",
        "id": "332",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Steal Application Access Token",
        "techniqueid": "T1528"
    },
    {
        "description": "Adversaries may exfiltrate data by transferring the data, including backups of cloud environments, to another cloud account they control on the same service to avoid typical file transfers/downloads and network-based exfiltration detection.",
        "id": "333",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Transfer Data to Cloud Account",
        "techniqueid": "T1537"
    },
    {
        "description": "Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk. An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.",
        "id": "334",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Abuse Elevation Control Mechanism",
        "techniqueid": "T1548"
    },
    {
        "description": "Adversaries may perform sudo caching and/or use the suoders file to elevate privileges. Adversaries may do this to execute commands as other users or spawn processes with higher privileges.",
        "id": "335",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Sudo and Sudo Caching",
        "techniqueid": "T1548.003"
    },
    {
        "description": "Adversaries may modify the SSH?authorized_keys?file to maintain persistence on a victim host. Linux distributions and macOS commonly use key-based authentication to secure the authentication process of SSH sessions for remote management. The?authorized_keys?file in SSH specifies the SSH keys that can be used for logging into the user account for which the file is configured. This file is usually found in the user's home directory under?<user-home>/.ssh/authorized_keys. Users may edit the system��s SSH config file to modify the directives PubkeyAuthentication and RSAAuthentication to the value \"yes\" to ensure public key and RSA authentication are enabled. The SSH config file is usually located under?/etc/ssh/sshd_config.",
        "id": "336",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "SSH Authorized Keys",
        "techniqueid": "T1098.004"
    },
    {
        "description": "Adversaries may abuse time providers to execute DLLs when the system boots. The Windows Time service (W32Time) enables time synchronization across and within domains. W32Time time providers are responsible for retrieving time stamps from hardware/network resources and outputting these values to other network clients.",
        "id": "337",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Time Providers",
        "techniqueid": "T1547.003"
    },
    {
        "description": "Adversaries may modify plist files to run a program during system boot or user login. Property list (plist) files contain all of the information that macOS and OS X uses to configure applications and services. These files are UTF-8 encoded and formatted like XML documents via a series of keys surrounded by < >. They detail when programs should execute, file paths to the executables, program arguments, required OS permissions, and many others. plists are located in certain locations depending on their purpose such as?/Library/Preferences?(which execute with elevated privileges) and?~/Library/Preferences?(which execute with a user's privileges).",
        "id": "338",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Plist Modification",
        "techniqueid": "T1547.011"
    },
    {
        "description": "Adversaries may use scripts automatically executed at boot or logon initialization to establish persistence. Initialization scripts can be used to perform administrative functions, which may often execute other programs or send information to an internal logging server. These scripts can vary based on operating system and whether applied locally or remotely.",
        "id": "339",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Boot or Logon Initialization Scripts",
        "techniqueid": "T1037"
    },
    {
        "description": "Adversaries may use macOS logon scripts automatically executed at logon initialization to establish persistence. macOS allows logon scripts (known as login hooks) to be executed whenever a specific user logs into a system. A login hook tells Mac OS X to execute a certain script when a user logs in, but unlike?Startup Items, a login hook executes as the elevated root user.",
        "id": "340",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Logon Script (Mac)",
        "techniqueid": "T1037.002"
    },
    {
        "description": "Adversaries may use network logon scripts automatically executed at logon initialization to establish persistence. Network logon scripts can be assigned using Active Directory or Group Policy Objects. These logon scripts run with the privileges of the user they are assigned to. Depending on the systems within the network, initializing one of these scripts could apply to more than one or potentially all systems.",
        "id": "341",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Network Logon Script",
        "techniqueid": "T1037.003"
    },
    {
        "description": "Adversaries may use startup items automatically executed at boot initialization to establish persistence. Startup items execute during the final phase of the boot process and contain shell scripts or other executable files along with configuration information used by the system to determine the execution order for all startup items.",
        "id": "342",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Startup Items",
        "techniqueid": "T1037.005"
    },
    {
        "description": "Adversaries may use rc.common automatically executed at boot initialization to establish persistence. During the boot process, macOS executes?source /etc/rc.common, which is a shell script containing various utility functions. This file also defines routines for processing command-line arguments and for gathering system settings and is thus recommended to include in the start of Startup Item Scripts . In macOS and OS X, this is now a deprecated mechanism in favor of?Launch Agent?and?Launch Daemon?but is currently still used.",
        "id": "343",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Rc.common",
        "techniqueid": "T1037.004"
    },
    {
        "description": "Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services. On macOS, launchd processes known as?Launch Daemon?and?Launch Agent?are run to finish system initialization and load user specific parameters.",
        "id": "344",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Create or Modify System Process",
        "techniqueid": "T1543"
    },
    {
        "description": "Adversaries may create or modify systemd services to repeatedly execute malicious payloads as part of persistence. The systemd service manager is commonly used for managing background daemon processes (also known as services) and other system resources. Systemd is the default initialization (init) system on many Linux distributions starting with Debian 8, Ubuntu 15.04, CentOS 7, RHEL 7, Fedora 15, and replaces legacy init systems including SysVinit and Upstart while remaining backwards compatible with the aforementioned init systems.",
        "id": "345",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Systemd Service",
        "techniqueid": "T1543.002"
    },
    {
        "description": "Adversaries may access data objects from improperly secured cloud storage.",
        "id": "346",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Data from Cloud Storage Object",
        "techniqueid": "T1530"
    },
    {
        "description": "Adversaries may insert, delete, or manipulate data in order to manipulate external outcomes or hide activity. By manipulating data, adversaries may attempt to affect a business process, organizational understanding, or decision making.",
        "id": "347",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Data Manipulation",
        "techniqueid": "T1565"
    },
    {
        "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity. By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making.",
        "id": "348",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Stored Data Manipulation",
        "techniqueid": "T1565.001"
    },
    {
        "description": "Adversaries may modify systems in order to manipulate the data as it is accessed and displayed to an end user. By manipulating runtime data, adversaries may attempt to affect a business process, organizational understanding, and decision making.",
        "id": "349",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Runtime Data Manipulation",
        "techniqueid": "T1565.003"
    },
    {
        "description": "Adversaries may establish persistence by executing malicious content triggered by a user��s shell.?~/.bash_profile?and?~/.bashrc?are shell scripts that contain shell commands. These files are executed in a user's context when a new shell opens or when a user logs in so that their environment is set correctly.",
        "id": "350",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": ".bash_profile and .bashrc",
        "techniqueid": "T1546.004"
    },
    {
        "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).",
        "id": "351",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "File and Directory Permissions Modification",
        "techniqueid": "T1222"
    },
    {
        "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).",
        "id": "352",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Windows File and Directory Permissions Modification",
        "techniqueid": "T1222.001"
    },
    {
        "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).",
        "id": "353",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Linux and Mac File and Directory Permissions Modification",
        "techniqueid": "T1222.002"
    },
    {
        "description": "Adversaries may use NTFS file attributes to hide their malicious data in order to evade detection. Every New Technology File System (NTFS) formatted partition contains a Master File Table (MFT) that maintains a record for every file/directory on the partition. Within MFT entries are file attributes, such as Extended Attributes (EA) and Data [known as Alternate Data Streams (ADSs) when more than one Data attribute is present], that can be used to store arbitrary data (and even complete files).",
        "id": "354",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "NTFS File Attributes",
        "techniqueid": "T1564.004"
    },
    {
        "description": "Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators.",
        "id": "355",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Impair Defenses",
        "techniqueid": "T1562"
    },
    {
        "description": "Adversaries may disable security tools to avoid possible detection of their tools and activities. This can take the form of killing security software or event logging processes, deleting Registry keys so that tools do not start at run time, or other methods to interfere with security tools scanning or reporting information.",
        "id": "356",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Disable or Modify Tools",
        "techniqueid": "T1562.001"
    },
    {
        "description": "Adversaries may disable Windows event logging to limit data that can be leveraged for detections and audits. Windows event logs record user and system activity such as login attempts, process creation, and much more. This data is used by security tools and analysts to generate detections.",
        "id": "357",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Disable Windows Event Logging",
        "techniqueid": "T1562.002"
    },
    {
        "description": "Adversaries may disable or modify system firewalls in order to bypass controls limiting network usage. Changes could be disabling the entire mechanism as well as adding, deleting, or modifying particular rules. This can be done numerous ways depending on the operating system, including via command-line, editing Windows Registry keys, and Windows Control Panel.",
        "id": "358",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Disable or Modify System Firewall",
        "techniqueid": "T1562.004"
    },
    {
        "description": "An adversary may attempt to block indicators or events typically captured by sensors from being gathered and analyzed. This could include maliciously redirecting or even disabling host-based sensors, such as Event Tracing for Windows (ETW), by tampering settings that control the collection and flow of event telemetry. These settings may be stored on the system in configuration files and/or in the Registry as well as being accessible via administrative utilities such as?PowerShell?or?Windows Management Instrumentation.",
        "id": "359",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Indicator Blocking",
        "techniqueid": "T1562.006"
    },
    {
        "description": "Adversaries may delete or alter generated artifacts on a host system, including logs or captured files such as quarantined malware. Locations and format of logs are platform or product-specific, however standard operating system logs are captured as Windows events or Linux/macOS files such as?Bash History?and /var/log/*.",
        "id": "360",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Indicator Removal on Host",
        "techniqueid": "T1070"
    },
    {
        "description": "Adversaries may clear Windows Event Logs to hide the activity of an intrusion. Windows Event Logs are a record of a computer's alerts and notifications. There are three system-defined sources of events: System, Application, and Security, with five event types: Error, Warning, Information, Success Audit, and Failure Audit.",
        "id": "361",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Clear Windows Event Logs",
        "techniqueid": "T1070.001"
    },
    {
        "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the?/var/log/?directory. Subfolders in this directory categorize logs by their related functions, such as:",
        "id": "362",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Clear Linux or Mac System Logs",
        "techniqueid": "T1070.002"
    },
    {
        "description": "In addition to clearing system logs, an adversary may clear the command history of a compromised account to conceal the actions undertaken during an intrusion. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done.",
        "id": "363",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Clear Command History",
        "techniqueid": "T1070.003"
    },
    {
        "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.",
        "id": "364",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Masquerading",
        "techniqueid": "T1036"
    },
    {
        "description": "Adversaries may rename legitimate system utilities to try to evade security mechanisms concerning the usage of those utilities. Security monitoring and control mechanisms may be in place for system utilities adversaries are capable of abusing. It may be possible to bypass those security mechanisms by renaming the utility prior to utilization (ex: rename?rundll32.exe). An alternative case occurs when a legitimate utility is copied or moved to a different directory and renamed to avoid detections based on system utilities executing from non-standard paths.",
        "id": "365",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Rename System Utilities",
        "techniqueid": "T1036.003"
    },
    {
        "description": "Adversaries may match or approximate the name or location of legitimate files when naming/placing their files. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). Alternatively, the filename given may be a close approximation of legitimate programs or something innocuous.",
        "id": "366",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Match Legitimate Name or Location",
        "techniqueid": "T1036.005"
    },
    {
        "description": "Adversaries may inject malicious code into processes via the /proc filesystem in order to evade process-based defenses as well as possibly elevate privileges. Proc memory injection is a method of executing arbitrary code in the address space of a separate live process.",
        "id": "367",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Proc Memory",
        "techniqueid": "T1055.009"
    },
    {
        "description": "Adversaries may abuse systemd timers to perform task scheduling for initial or recurring execution of malicious code. Systemd timers are unit files with file extension?.timer?that control services. Timers can be set to run on a calendar event or after a time span relative to a starting point. They can be used as an alternative to?Cron?in Linux environments.",
        "id": "368",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Systemd Timers",
        "techniqueid": "T1053.006"
    },
    {
        "description": "Adversaries may tamper with SIP and trust provider components to mislead the operating system and application control tools when conducting signature validation checks. In user mode, Windows Authenticode digital signatures are used to verify a file's origin and integrity, variables that may be used to establish trust in signed code (ex: a driver with a valid Microsoft signature may be handled as safe). The signature validation process is handled via the WinVerifyTrust application programming interface (API) function, which accepts an inquiry and coordinates with the appropriate trust provider, which is responsible for validating parameters of a signature.",
        "id": "369",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "SIP and Trust Provider Hijacking",
        "techniqueid": "T1553.003"
    },
    {
        "description": "Adversaries may deliver payloads to remote systems by adding content to shared storage locations, such as network drives or internal code repositories. Content stored on network drives or in other shared locations may be tainted by adding malicious programs, scripts, or exploit code to otherwise valid files. Once a user opens the shared tainted content, the malicious portion can be executed to run the adversary's code on a remote system. Adversaries may use tainted shared content to move laterally.",
        "id": "370",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Taint Shared Content",
        "techniqueid": "T1080"
    },
    {
        "description": "Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g.?Bash History), operating system or application-specific repositories (e.g.?Credentials in Registry), or other specialized files/artifacts (e.g.?Private Keys).",
        "id": "371",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Unsecured Credentials",
        "techniqueid": "T1552"
    },
    {
        "description": "Adversaries may search local file systems and remote file shares for files containing insecurely stored credentials. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.",
        "id": "372",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Credentials In Files",
        "techniqueid": "T1552.001"
    },
    {
        "description": "Adversaries may search for private key certificate files on compromised systems for insecurely stored credentials. Private cryptographic keys and certificates are used for authentication, encryption/decryption, and digital signatures. Common key and certificate file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, .pfx, .cer, .p7b, .asc.",
        "id": "373",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Private Keys",
        "techniqueid": "T1552.004"
    },
    {
        "description": "Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk. An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.",
        "id": "374",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Abuse Elevation Control Mechanism",
        "techniqueid": "T1548"
    },
    {
        "description": "Adversaries may perform sudo caching and/or use the suoders file to elevate privileges. Adversaries may do this to execute commands as other users or spawn processes with higher privileges.",
        "id": "375",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Sudo and Sudo Caching",
        "techniqueid": "T1548.003"
    },
    {
        "description": "Adversaries may manipulate accounts to maintain access to victim systems. Account manipulation may consist of any action that preserves adversary access to a compromised account, such as modifying credentials or permission groups. These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials. In order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain.",
        "id": "376",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Account Manipulation",
        "techniqueid": "T1098"
    },
    {
        "description": "Adversaries may grant additional permission levels, such as ReadPermission or FullAccess, to maintain persistent access to an adversary-controlled email account. The?Add-MailboxPermission?PowerShell?cmdlet, available in on-premises Exchange and in the cloud-based service Office 365, adds permissions to a mailbox.",
        "id": "377",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Exchange Email Delegate Permissions",
        "techniqueid": "T1098.002"
    },
    {
        "description": "An adversary may add the Global Administrator role to an adversary-controlled account to maintain persistent access to an Office 365 tenant. With sufficient permissions, a compromised account can gain almost unlimited access to data and settings (including the ability to reset the passwords of other admins) via the global admin role.",
        "id": "378",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Add Office 365 Global Administrator Role",
        "techniqueid": "T1098.003"
    },
    {
        "description": "Adversaries may add adversary-controlled credentials to a cloud account to maintain persistent access to victim accounts and instances within the environment.",
        "id": "379",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Additional Cloud Credentials",
        "techniqueid": "T1098.001"
    },
    {
        "description": "Adversaries may create or modify systemd services to repeatedly execute malicious payloads as part of persistence. The systemd service manager is commonly used for managing background daemon processes (also known as services) and other system resources. Systemd is the default initialization (init) system on many Linux distributions starting with Debian 8, Ubuntu 15.04, CentOS 7, RHEL 7, Fedora 15, and replaces legacy init systems including SysVinit and Upstart while remaining backwards compatible with the aforementioned init systems.",
        "id": "380",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Systemd Service",
        "techniqueid": "T1543.002"
    },
    {
        "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).",
        "id": "381",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "File and Directory Permissions Modification",
        "techniqueid": "T1222"
    },
    {
        "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).",
        "id": "382",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Windows File and Directory Permissions Modification",
        "techniqueid": "T1222.001"
    },
    {
        "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).",
        "id": "383",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Linux and Mac File and Directory Permissions Modification",
        "techniqueid": "T1222.002"
    },
    {
        "description": "Adversaries may gather credentials from information stored in the Proc filesystem or?/proc. The Proc filesystem on Linux contains a great deal of information regarding the state of the running operating system. Processes running with root privileges can use this facility to scrape live memory of other running programs. If any of these programs store passwords in clear text or password hashes in memory, these values can then be harvested for either usage or brute force attacks, respectively.",
        "id": "384",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Proc Filesystem",
        "techniqueid": "T1003.007"
    },
    {
        "description": "Adversaries may attempt to dump the contents of?/etc/passwd?and?/etc/shadow?to enable offline password cracking. Most modern Linux operating systems use a combination of?/etc/passwd?and?/etc/shadow?to store user account information including password hashes in?/etc/shadow. By default,?/etc/shadow?is only readable by the root user.",
        "id": "385",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "/etc/passwd and /etc/shadow",
        "techniqueid": "T1003.008"
    },
    {
        "description": "Adversaries may abuse systemd timers to perform task scheduling for initial or recurring execution of malicious code. Systemd timers are unit files with file extension?.timer?that control services. Timers can be set to run on a calendar event or after a time span relative to a starting point. They can be used as an alternative to?Cron?in Linux environments.",
        "id": "386",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Systemd Timers",
        "techniqueid": "T1053.006"
    },
    {
        "description": "Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g.?Bash History), operating system or application-specific repositories (e.g.?Credentials in Registry), or other specialized files/artifacts (e.g.?Private Keys).",
        "id": "387",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Unsecured Credentials",
        "techniqueid": "T1552"
    },
    {
        "description": "Adversaries may search the Registry on compromised systems for insecurely stored credentials. The Windows Registry stores configuration information that can be used by the system or other programs. Adversaries may query the Registry looking for credentials and passwords that have been stored for use by other programs or services. Sometimes these credentials are used for automatic logons.",
        "id": "388",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Credentials in Registry",
        "techniqueid": "T1552.002"
    },
    {
        "description": "Adversaries may delete or alter generated artifacts on a host system, including logs or captured files such as quarantined malware. Locations and format of logs are platform or product-specific, however standard operating system logs are captured as Windows events or Linux/macOS files such as?Bash History?and /var/log/*.",
        "id": "389",
        "mitigation": "Remote Data Storage",
        "mitigationid": "M1029",
        "technique": "Indicator Removal on Host",
        "techniqueid": "T1070"
    },
    {
        "description": "Adversaries may clear Windows Event Logs to hide the activity of an intrusion. Windows Event Logs are a record of a computer's alerts and notifications. There are three system-defined sources of events: System, Application, and Security, with five event types: Error, Warning, Information, Success Audit, and Failure Audit.",
        "id": "390",
        "mitigation": "Remote Data Storage",
        "mitigationid": "M1029",
        "technique": "Clear Windows Event Logs",
        "techniqueid": "T1070.001"
    },
    {
        "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the?/var/log/?directory. Subfolders in this directory categorize logs by their related functions, such as:",
        "id": "391",
        "mitigation": "Remote Data Storage",
        "mitigationid": "M1029",
        "technique": "Clear Linux or Mac System Logs",
        "techniqueid": "T1070.002"
    },
    {
        "description": "Adversaries may make changes to the operating system of embedded network devices to weaken defenses and provide new capabilities for themselves. On such devices, the operating systems are typically monolithic and most of the device functionality and capabilities are contained within a single file.",
        "id": "392",
        "mitigation": "Boot Integrity",
        "mitigationid": "M1046",
        "technique": "Modify System Image",
        "techniqueid": "T1601"
    },
    {
        "description": "Adversaries may modify the operating system of a network device to introduce new capabilities or weaken existing defenses. Some network devices are built with a monolithic architecture, where the entire operating system and most of the functionality of the device is contained within a single file. Adversaries may change this file in storage, to be loaded in a future boot, or in memory during runtime.",
        "id": "393",
        "mitigation": "Boot Integrity",
        "mitigationid": "M1046",
        "technique": "Patch System Image",
        "techniqueid": "T1601.001"
    },
    {
        "description": "Adversaries may install an older version of the operating system of a network device to weaken security. Older operating system versions on network devices often have weaker encryption ciphers and, in general, fewer/less updated defensive features.",
        "id": "394",
        "mitigation": "Boot Integrity",
        "mitigationid": "M1046",
        "technique": "Downgrade System Image",
        "techniqueid": "T1601.002"
    },
    {
        "description": "Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control.",
        "id": "395",
        "mitigation": "Boot Integrity",
        "mitigationid": "M1046",
        "technique": "Pre-OS Boot",
        "techniqueid": "T1542"
    },
    {
        "description": "Adversaries may use bootkits to persist on systems. Bootkits reside at a layer below the operating system and may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.",
        "id": "396",
        "mitigation": "Boot Integrity",
        "mitigationid": "M1046",
        "technique": "Bootkit",
        "techniqueid": "T1542.003"
    },
    {
        "description": "Adversaries may manipulate hardware components in products prior to receipt by a final consumer for the purpose of data or system compromise. By modifying hardware or firmware in the supply chain, adversaries can insert a backdoor into consumer networks that may be difficult to detect and give the adversary a high degree of control over the system. Hardware backdoors may be inserted into various devices, such as servers, workstations, network infrastructure, or peripherals.",
        "id": "397",
        "mitigation": "Boot Integrity",
        "mitigationid": "M1046",
        "technique": "Compromise Hardware Supply Chain",
        "techniqueid": "T1195.003"
    },
    {
        "description": "Adversaries may leverage traffic mirroring in order to automate data exfiltration over compromised network infrastructure. Traffic mirroring is a native feature for some network devices and used for network analysis and may be configured to duplicate traffic and forward to one or more destinations for analysis by a network analyzer or other monitoring device.",
        "id": "398",
        "mitigation": "Encrypt Sensitive Information",
        "mitigationid": "M1041",
        "technique": "Traffic Duplication",
        "techniqueid": "T1020.001"
    },
    {
        "description": "Adversaries may collect data related to managed devices from configuration repositories. Configuration repositories are used by management systems in order to configure, manage, and control data on remote systems. Configuration repositories may also facilitate remote access and administration of devices.",
        "id": "399",
        "mitigation": "Encrypt Sensitive Information",
        "mitigationid": "M1041",
        "technique": "Data from Configuration Repository",
        "techniqueid": "T1602"
    },
    {
        "description": "Adversaries may target the Management Information Base (MIB) to collect and/or mine valuable information in a network managed using Simple Network Management Protocol (SNMP).",
        "id": "400",
        "mitigation": "Encrypt Sensitive Information",
        "mitigationid": "M1041",
        "technique": "SNMP (MIB Dump)",
        "techniqueid": "T1602.001"
    },
    {
        "description": "Adversaries may access network configuration files to collect sensitive data about the device and the network. The network configuration is a file containing parameters that determine the operation of the device. The device typically stores an in-memory copy of the configuration while operating, and a separate configuration on non-volatile storage to load after device reset. Adversaries can inspect the configuration files to reveal information about the target network and its layout, the network device and its software, or identifying legitimate accounts and credentials for later use.",
        "id": "401",
        "mitigation": "Encrypt Sensitive Information",
        "mitigationid": "M1041",
        "technique": "Network Device Configuration Dump",
        "techniqueid": "T1602.002"
    },
    {
        "description": "Adversaries may insert, delete, or manipulate data in order to manipulate external outcomes or hide activity. By manipulating data, adversaries may attempt to affect a business process, organizational understanding, or decision making.",
        "id": "402",
        "mitigation": "Encrypt Sensitive Information",
        "mitigationid": "M1041",
        "technique": "Data Manipulation",
        "techniqueid": "T1565"
    },
    {
        "description": "Adversaries may alter data en route to storage or other systems in order to manipulate external outcomes or hide activity. By manipulating transmitted data, adversaries may attempt to affect a business process, organizational understanding, and decision making.",
        "id": "403",
        "mitigation": "Encrypt Sensitive Information",
        "mitigationid": "M1041",
        "technique": "Transmitted Data Manipulation",
        "techniqueid": "T1565.002"
    },
    {
        "description": "Adversaries may target user email to collect sensitive information. Emails may contain sensitive data, including trade secrets or personal information, that can prove valuable to adversaries. Adversaries can collect or forward email from mail servers or clients.",
        "id": "404",
        "mitigation": "Encrypt Sensitive Information",
        "mitigationid": "M1041",
        "technique": "Email Collection",
        "techniqueid": "T1114"
    },
    {
        "description": "Adversaries may target user email on local systems to collect sensitive information. Files containing email data can be acquired from a user��s local system, such as Outlook storage or cache files.",
        "id": "405",
        "mitigation": "Encrypt Sensitive Information",
        "mitigationid": "M1041",
        "technique": "Local Email Collection",
        "techniqueid": "T1114.001"
    },
    {
        "description": "Adversaries may target an Exchange server or Office 365 to collect sensitive information. Adversaries may leverage a user's credentials and interact directly with the Exchange server to acquire information from within a network. Adversaries may also access externally facing Exchange services or Office 365 to access email using credentials or access tokens. Tools such as?MailSniper?can be used to automate searches for specific keywords.",
        "id": "406",
        "mitigation": "Encrypt Sensitive Information",
        "mitigationid": "M1041",
        "technique": "Remote Email Collection",
        "techniqueid": "T1114.002"
    },
    {
        "description": "Adversaries may setup email forwarding rules to collect sensitive information. Adversaries may abuse email-forwarding rules to monitor the activities of a victim, steal information, and further gain intelligence on the victim or the victim��s organization to use as part of further exploits or operations. Outlook and Outlook Web App (OWA) allow users to create inbox rules for various email functions, including forwarding to a different recipient. Messages can be forwarded to internal or external recipients, and there are no restrictions limiting the extent of this rule. Administrators may also create forwarding rules for user accounts with the same considerations and outcomes.",
        "id": "407",
        "mitigation": "Encrypt Sensitive Information",
        "mitigationid": "M1041",
        "technique": "Email Forwarding Rule",
        "techniqueid": "T1114.003"
    },
    {
        "description": "Adversaries may delete or alter generated artifacts on a host system, including logs or captured files such as quarantined malware. Locations and format of logs are platform or product-specific, however standard operating system logs are captured as Windows events or Linux/macOS files such as?Bash History?and /var/log/*.",
        "id": "408",
        "mitigation": "Encrypt Sensitive Information",
        "mitigationid": "M1041",
        "technique": "Indicator Removal on Host",
        "techniqueid": "T1070"
    },
    {
        "description": "Adversaries may clear Windows Event Logs to hide the activity of an intrusion. Windows Event Logs are a record of a computer's alerts and notifications. There are three system-defined sources of events: System, Application, and Security, with five event types: Error, Warning, Information, Success Audit, and Failure Audit.",
        "id": "409",
        "mitigation": "Encrypt Sensitive Information",
        "mitigationid": "M1041",
        "technique": "Clear Windows Event Logs",
        "techniqueid": "T1070.001"
    },
    {
        "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the?/var/log/?directory. Subfolders in this directory categorize logs by their related functions, such as:",
        "id": "410",
        "mitigation": "Encrypt Sensitive Information",
        "mitigationid": "M1041",
        "technique": "Clear Linux or Mac System Logs",
        "techniqueid": "T1070.002"
    },
    {
        "description": "Adversaries may attempt to position themselves between two or more networked devices using a man-in-the-middle (MiTM) technique to support follow-on behaviors such as?Network Sniffing?or?Transmitted Data Manipulation. By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.",
        "id": "411",
        "mitigation": "Encrypt Sensitive Information",
        "mitigationid": "M1041",
        "technique": "Man-in-the-Middle",
        "techniqueid": "T1557"
    },
    {
        "description": "Adversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such as?Network Sniffing?or?Transmitted Data Manipulation.",
        "id": "412",
        "mitigation": "Encrypt Sensitive Information",
        "mitigationid": "M1041",
        "technique": "ARP Cache Poisoning",
        "techniqueid": "T1557.002"
    },
    {
        "description": "Adversaries may sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.",
        "id": "413",
        "mitigation": "Encrypt Sensitive Information",
        "mitigationid": "M1041",
        "technique": "Network Sniffing",
        "techniqueid": "T1040"
    },
    {
        "description": "Adversaries may attempt to subvert Kerberos authentication by stealing or forging Kerberos tickets to enable?Pass the Ticket.",
        "id": "414",
        "mitigation": "Encrypt Sensitive Information",
        "mitigationid": "M1041",
        "technique": "Steal or Forge Kerberos Tickets",
        "techniqueid": "T1558"
    },
    {
        "description": "Adversaries who have the password hash of a target service account (e.g. SharePoint, MSSQL) may forge Kerberos ticket granting service (TGS) tickets, also known as silver tickets. Kerberos TGS tickets are also known as service tickets.",
        "id": "415",
        "mitigation": "Encrypt Sensitive Information",
        "mitigationid": "M1041",
        "technique": "Silver Ticket",
        "techniqueid": "T1558.002"
    },
    {
        "description": "Adversaries may abuse a valid Kerberos ticket-granting ticket (TGT) or sniff network traffic to obtain a ticket-granting service (TGS) ticket that may be vulnerable to?Brute Force.",
        "id": "416",
        "mitigation": "Encrypt Sensitive Information",
        "mitigationid": "M1041",
        "technique": "Kerberoasting",
        "techniqueid": "T1558.003"
    },
    {
        "description": "Adversaries may reveal credentials of accounts that have disabled Kerberos preauthentication by?Password Cracking?Kerberos messages.",
        "id": "417",
        "mitigation": "Encrypt Sensitive Information",
        "mitigationid": "M1041",
        "technique": "AS-REP Roasting",
        "techniqueid": "T1558.004"
    },
    {
        "description": "Once established within a system or network, an adversary may use automated techniques for collecting internal data. Methods for performing this technique could include use of a?Command and Scripting Interpreter?to search for and copy information fitting set criteria such as file type, location, or name at specific time intervals. This functionality could also be built into remote access tools.",
        "id": "418",
        "mitigation": "Encrypt Sensitive Information",
        "mitigationid": "M1041",
        "technique": "Automated Collection",
        "techniqueid": "T1119"
    },
    {
        "description": "Adversaries may access data objects from improperly secured cloud storage.",
        "id": "419",
        "mitigation": "Encrypt Sensitive Information",
        "mitigationid": "M1041",
        "technique": "Data from Cloud Storage Object",
        "techniqueid": "T1530"
    },
    {
        "description": "Adversaries may insert, delete, or manipulate data in order to manipulate external outcomes or hide activity. By manipulating data, adversaries may attempt to affect a business process, organizational understanding, or decision making.",
        "id": "420",
        "mitigation": "Encrypt Sensitive Information",
        "mitigationid": "M1041",
        "technique": "Data Manipulation",
        "techniqueid": "T1565"
    },
    {
        "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity. By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making.",
        "id": "421",
        "mitigation": "Encrypt Sensitive Information",
        "mitigationid": "M1041",
        "technique": "Stored Data Manipulation",
        "techniqueid": "T1565.001"
    },
    {
        "description": "Adversaries may delete or alter generated artifacts on a host system, including logs or captured files such as quarantined malware. Locations and format of logs are platform or product-specific, however standard operating system logs are captured as Windows events or Linux/macOS files such as?Bash History?and /var/log/*.",
        "id": "422",
        "mitigation": "Encrypt Sensitive Information",
        "mitigationid": "M1041",
        "technique": "Indicator Removal on Host",
        "techniqueid": "T1070"
    },
    {
        "description": "Adversaries may clear Windows Event Logs to hide the activity of an intrusion. Windows Event Logs are a record of a computer's alerts and notifications. There are three system-defined sources of events: System, Application, and Security, with five event types: Error, Warning, Information, Success Audit, and Failure Audit.",
        "id": "423",
        "mitigation": "Encrypt Sensitive Information",
        "mitigationid": "M1041",
        "technique": "Clear Windows Event Logs",
        "techniqueid": "T1070.001"
    },
    {
        "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the?/var/log/?directory. Subfolders in this directory categorize logs by their related functions, such as:",
        "id": "424",
        "mitigation": "Encrypt Sensitive Information",
        "mitigationid": "M1041",
        "technique": "Clear Linux or Mac System Logs",
        "techniqueid": "T1070.002"
    },
    {
        "description": "Adversaries may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password, from the operating system and software. Credentials can then be used to perform?Lateral Movement?and access restricted information.",
        "id": "425",
        "mitigation": "Encrypt Sensitive Information",
        "mitigationid": "M1041",
        "technique": "OS Credential Dumping",
        "techniqueid": "T1003"
    },
    {
        "description": "Adversaries may attempt to access or create a copy of the Active Directory domain database in order to steal credential information, as well as obtain other information about domain members such as devices, users, and access rights. By default, the NTDS file (NTDS.dit) is located in?%SystemRoot%\\NTDS\\Ntds.dit?of a domain controller.",
        "id": "426",
        "mitigation": "Encrypt Sensitive Information",
        "mitigationid": "M1041",
        "technique": "NTDS",
        "techniqueid": "T1003.003"
    },
    {
        "description": "Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g.?Bash History), operating system or application-specific repositories (e.g.?Credentials in Registry), or other specialized files/artifacts (e.g.?Private Keys).",
        "id": "427",
        "mitigation": "Encrypt Sensitive Information",
        "mitigationid": "M1041",
        "technique": "Unsecured Credentials",
        "techniqueid": "T1552"
    },
    {
        "description": "Adversaries may search for private key certificate files on compromised systems for insecurely stored credentials. Private cryptographic keys and certificates are used for authentication, encryption/decryption, and digital signatures. Common key and certificate file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, .pfx, .cer, .p7b, .asc.",
        "id": "428",
        "mitigation": "Encrypt Sensitive Information",
        "mitigationid": "M1041",
        "technique": "Private Keys",
        "techniqueid": "T1552.004"
    },
    {
        "description": "Adversaries may use stolen application access tokens to bypass the typical authentication process and access restricted accounts, information, or services on remote systems. These tokens are typically stolen from users and used in lieu of login credentials.",
        "id": "429",
        "mitigation": "Encrypt Sensitive Information",
        "mitigationid": "M1041",
        "technique": "Application Access Token",
        "techniqueid": "T1550.001"
    },
    {
        "description": "Adversaries may insert, delete, or manipulate data in order to manipulate external outcomes or hide activity. By manipulating data, adversaries may attempt to affect a business process, organizational understanding, or decision making.",
        "id": "430",
        "mitigation": "Remote Data Storage",
        "mitigationid": "M1029",
        "technique": "Data Manipulation",
        "techniqueid": "T1565"
    },
    {
        "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity. By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making.",
        "id": "431",
        "mitigation": "Remote Data Storage",
        "mitigationid": "M1029",
        "technique": "Stored Data Manipulation",
        "techniqueid": "T1565.001"
    },
    {
        "description": "Adversaries may delete or alter generated artifacts on a host system, including logs or captured files such as quarantined malware. Locations and format of logs are platform or product-specific, however standard operating system logs are captured as Windows events or Linux/macOS files such as?Bash History?and /var/log/*.",
        "id": "432",
        "mitigation": "Remote Data Storage",
        "mitigationid": "M1029",
        "technique": "Indicator Removal on Host",
        "techniqueid": "T1070"
    },
    {
        "description": "Adversaries may clear Windows Event Logs to hide the activity of an intrusion. Windows Event Logs are a record of a computer's alerts and notifications. There are three system-defined sources of events: System, Application, and Security, with five event types: Error, Warning, Information, Success Audit, and Failure Audit.",
        "id": "433",
        "mitigation": "Remote Data Storage",
        "mitigationid": "M1029",
        "technique": "Clear Windows Event Logs",
        "techniqueid": "T1070.001"
    },
    {
        "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the?/var/log/?directory. Subfolders in this directory categorize logs by their related functions, such as:",
        "id": "434",
        "mitigation": "Remote Data Storage",
        "mitigationid": "M1029",
        "technique": "Clear Linux or Mac System Logs",
        "techniqueid": "T1070.002"
    },
    {
        "description": "Adversaries may gain access to and use third-party software suites installed within an enterprise network, such as administration, monitoring, and deployment systems, to move laterally through the network. Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, VNC, HBSS, Altiris, etc.).",
        "id": "435",
        "mitigation": "Remote Data Storage",
        "mitigationid": "M1029",
        "technique": "Software Deployment Tools",
        "techniqueid": "T1072"
    },
    {
        "description": "Adversaries may manipulate accounts to maintain access to victim systems. Account manipulation may consist of any action that preserves adversary access to a compromised account, such as modifying credentials or permission groups. These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials. In order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain.",
        "id": "436",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Account Manipulation",
        "techniqueid": "T1098"
    },
    {
        "description": "Adversaries may add adversary-controlled credentials to a cloud account to maintain persistent access to victim accounts and instances within the environment.",
        "id": "437",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Additional Cloud Credentials",
        "techniqueid": "T1098.001"
    },
    {
        "description": "Adversaries may create an account to maintain access to victim systems. With a sufficient level of access, creating such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.",
        "id": "438",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Create Account",
        "techniqueid": "T1136"
    },
    {
        "description": "Adversaries may create a domain account to maintain access to victim systems. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover user, administrator, and service accounts. With a sufficient level of access, the?net user /add /domain?command can be used to create a domain account.",
        "id": "439",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Domain Account",
        "techniqueid": "T1136.002"
    },
    {
        "description": "Adversaries may create a cloud account to maintain access to victim systems. With a sufficient level of access, such accounts may be used to establish secondary credentialed access that does not require persistent remote access tools to be deployed on the system.",
        "id": "440",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Cloud Account",
        "techniqueid": "T1136.003"
    },
    {
        "description": "Adversaries may collect data related to managed devices from configuration repositories. Configuration repositories are used by management systems in order to configure, manage, and control data on remote systems. Configuration repositories may also facilitate remote access and administration of devices.",
        "id": "441",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Data from Configuration Repository",
        "techniqueid": "T1602"
    },
    {
        "description": "Adversaries may target the Management Information Base (MIB) to collect and/or mine valuable information in a network managed using Simple Network Management Protocol (SNMP).",
        "id": "442",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "SNMP (MIB Dump)",
        "techniqueid": "T1602.001"
    },
    {
        "description": "Adversaries may access network configuration files to collect sensitive data about the device and the network. The network configuration is a file containing parameters that determine the operation of the device. The device typically stores an in-memory copy of the configuration while operating, and a separate configuration on non-volatile storage to load after device reset. Adversaries can inspect the configuration files to reveal information about the target network and its layout, the network device and its software, or identifying legitimate accounts and credentials for later use.",
        "id": "443",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Network Device Configuration Dump",
        "techniqueid": "T1602.002"
    },
    {
        "description": "Adversaries may insert, delete, or manipulate data in order to manipulate external outcomes or hide activity. By manipulating data, adversaries may attempt to affect a business process, organizational understanding, or decision making.",
        "id": "444",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Data Manipulation",
        "techniqueid": "T1565"
    },
    {
        "description": "Adversaries may modify systems in order to manipulate the data as it is accessed and displayed to an end user. By manipulating runtime data, adversaries may attempt to affect a business process, organizational understanding, and decision making.",
        "id": "445",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Runtime Data Manipulation",
        "techniqueid": "T1565.003"
    },
    {
        "description": "Adversaries may attempt to gather information on domain trust relationships that may be used to identify lateral movement opportunities in Windows multi-domain/forest environments. Domain trusts provide a mechanism for a domain to allow access to resources based on the authentication procedures of another domain. Domain trusts allow the users of the trusted domain to access resources in the trusting domain. The information discovered may help the adversary conduct?SID-History Injection,?Pass the Ticket, and?Kerberoasting. Domain trusts can be enumerated using the?DSEnumerateDomainTrusts()?Win32 API call, .NET methods, and LDAP. The Windows utility?Nltest?is known to be used by adversaries to enumerate domain trusts.",
        "id": "446",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Domain Trust Discovery",
        "techniqueid": "T1482"
    },
    {
        "description": "Adversaries may attempt to take advantage of a weakness in an Internet-facing computer or program using software, data, or commands in order to cause unintended or unanticipated behavior. The weakness in the system can be a bug, a glitch, or a design vulnerability. These applications are often websites, but can include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other applications with Internet accessible open sockets, such as web servers and related services. Depending on the flaw being exploited this may include?Exploitation for Defense Evasion.",
        "id": "447",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Exploit Public-Facing Application",
        "techniqueid": "T1190"
    },
    {
        "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.?A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.",
        "id": "448",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Exploitation of Remote Services",
        "techniqueid": "T1210"
    },
    {
        "description": "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as?Windows Remote Management?can also be used externally.",
        "id": "449",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "External Remote Services",
        "techniqueid": "T1133"
    },
    {
        "description": "Adversaries may attempt to position themselves between two or more networked devices using a man-in-the-middle (MiTM) technique to support follow-on behaviors such as?Network Sniffing?or?Transmitted Data Manipulation. By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.",
        "id": "450",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Man-in-the-Middle",
        "techniqueid": "T1557"
    },
    {
        "description": "By responding to LLMNR/NBT-NS network traffic, adversaries may spoof an authoritative source for name resolution to force communication with an adversary controlled system. This activity may be used to collect or relay authentication materials.",
        "id": "451",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "LLMNR/NBT-NS Poisoning and SMB Relay",
        "techniqueid": "T1557.001"
    },
    {
        "description": "Adversaries may attempt to get a listing of services running on remote hosts, including those that may be vulnerable to remote software exploitation. Methods to acquire this information include port scans and vulnerability scans using tools that are brought onto a system.",
        "id": "452",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Network Service Scanning",
        "techniqueid": "T1046"
    },
    {
        "description": "Adversaries may take control of preexisting sessions with remote services to move laterally in an environment. Users may use valid credentials to log into a service specifically designed to accept remote connections, such as telnet, SSH, and RDP. When a user logs into a service, a session will be established that will allow them to maintain a continuous interaction with that service.",
        "id": "453",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Remote Service Session Hijacking",
        "techniqueid": "T1563"
    },
    {
        "description": "Adversaries may hijack a legitimate user��s remote desktop session to move laterally within an environment. Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).",
        "id": "454",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "RDP Hijacking",
        "techniqueid": "T1563.002"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.",
        "id": "455",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Remote Desktop Protocol",
        "techniqueid": "T1021.001"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to interact with remote systems using Windows Remote Management (WinRM). The adversary may then perform actions as the logged-on user.",
        "id": "456",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Windows Remote Management",
        "techniqueid": "T1021.006"
    },
    {
        "description": "Adversaries may stop or disable services on a system to render those services unavailable to legitimate users. Stopping critical services can inhibit or stop response to an incident or aid in the adversary's overall objectives to cause damage to the environment.",
        "id": "457",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Service Stop",
        "techniqueid": "T1489"
    },
    {
        "description": "Adversaries may gain access to and use third-party software suites installed within an enterprise network, such as administration, monitoring, and deployment systems, to move laterally through the network. Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, VNC, HBSS, Altiris, etc.).",
        "id": "458",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Software Deployment Tools",
        "techniqueid": "T1072"
    },
    {
        "description": "Adversaries may breach or otherwise leverage organizations who have access to intended victims. Access through trusted third party relationship exploits an existing connection that may not be protected or receives less scrutiny than standard mechanisms of gaining access to a network.",
        "id": "459",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Trusted Relationship",
        "techniqueid": "T1199"
    },
    {
        "description": "Adversaries may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password, from the operating system and software. Credentials can then be used to perform?Lateral Movement?and access restricted information.",
        "id": "460",
        "mitigation": "Encrypt Sensitive Information",
        "mitigationid": "M1041",
        "technique": "OS Credential Dumping",
        "techniqueid": "T1003"
    },
    {
        "description": "Adversaries may attempt to access or create a copy of the Active Directory domain database in order to steal credential information, as well as obtain other information about domain members such as devices, users, and access rights. By default, the NTDS file (NTDS.dit) is located in?%SystemRoot%\\NTDS\\Ntds.dit?of a domain controller.",
        "id": "461",
        "mitigation": "Encrypt Sensitive Information",
        "mitigationid": "M1041",
        "technique": "NTDS",
        "techniqueid": "T1003.003"
    },
    {
        "description": "Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g.?Bash History), operating system or application-specific repositories (e.g.?Credentials in Registry), or other specialized files/artifacts (e.g.?Private Keys).",
        "id": "462",
        "mitigation": "Encrypt Sensitive Information",
        "mitigationid": "M1041",
        "technique": "Unsecured Credentials",
        "techniqueid": "T1552"
    },
    {
        "description": "Adversaries may search for private key certificate files on compromised systems for insecurely stored credentials. Private cryptographic keys and certificates are used for authentication, encryption/decryption, and digital signatures. Common key and certificate file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, .pfx, .cer, .p7b, .asc.",
        "id": "463",
        "mitigation": "Encrypt Sensitive Information",
        "mitigationid": "M1041",
        "technique": "Private Keys",
        "techniqueid": "T1552.004"
    },
    {
        "description": "Adversaries may use SID-History Injection to escalate privileges and bypass access controls. The Windows security identifier (SID) is a unique value that identifies a user or group account. SIDs are used by Windows security in both security descriptors and access tokens. An account can hold additional SIDs in the SID-History Active Directory attribute , allowing inter-operable account migration between domains (e.g., all values in SID-History are included in access tokens).",
        "id": "464",
        "mitigation": "Active Directory Configuration",
        "mitigationid": "M1015",
        "technique": "SID-History Injection",
        "techniqueid": "T1134.005"
    },
    {
        "description": "An adversary may forge SAML tokens with any permissions claims and lifetimes if they possess a valid SAML token-signing certificate. The default lifetime of a SAML token is one hour, but the validity period can be specified in the?NotOnOrAfter?value of the?conditions ...?element in a token. This value can be changed using the?AccessTokenLifetime?in a?LifetimeTokenPolicy. Forged SAML tokens enable adversaries to authenticate across services that use SAML 2.0 as an SSO (single sign-on) mechanism.",
        "id": "465",
        "mitigation": "Active Directory Configuration",
        "mitigationid": "M1015",
        "technique": "SAML Tokens",
        "techniqueid": "T1606.002"
    },
    {
        "description": "Adversaries may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password, from the operating system and software. Credentials can then be used to perform?Lateral Movement?and access restricted information.",
        "id": "466",
        "mitigation": "Active Directory Configuration",
        "mitigationid": "M1015",
        "technique": "OS Credential Dumping",
        "techniqueid": "T1003"
    },
    {
        "description": "Adversaries may attempt to access credentials and other sensitive information by abusing a Windows Domain Controller's application programming interface (API) to simulate the replication process from a remote domain controller using a technique called DCSync.",
        "id": "467",
        "mitigation": "Active Directory Configuration",
        "mitigationid": "M1015",
        "technique": "DCSync",
        "techniqueid": "T1003.006"
    },
    {
        "description": "Adversaries may attempt to access cached domain credentials used to allow authentication to occur in the event a domain controller is unavailable.",
        "id": "468",
        "mitigation": "Active Directory Configuration",
        "mitigationid": "M1015",
        "technique": "Cached Domain Credentials",
        "techniqueid": "T1003.005"
    },
    {
        "description": "Adversaries may gain access to and use third-party software suites installed within an enterprise network, such as administration, monitoring, and deployment systems, to move laterally through the network. Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, VNC, HBSS, Altiris, etc.).",
        "id": "469",
        "mitigation": "Active Directory Configuration",
        "mitigationid": "M1015",
        "technique": "Software Deployment Tools",
        "techniqueid": "T1072"
    },
    {
        "description": "Adversaries may attempt to subvert Kerberos authentication by stealing or forging Kerberos tickets to enable?Pass the Ticket.",
        "id": "470",
        "mitigation": "Active Directory Configuration",
        "mitigationid": "M1015",
        "technique": "Steal or Forge Kerberos Tickets",
        "techniqueid": "T1558"
    },
    {
        "description": "Adversaries who have the KRBTGT account password hash may forge Kerberos ticket-granting tickets (TGT), also known as a golden ticket. Golden tickets enable adversaries to generate authentication material for any account in Active Directory.",
        "id": "471",
        "mitigation": "Active Directory Configuration",
        "mitigationid": "M1015",
        "technique": "Golden Ticket",
        "techniqueid": "T1558.001"
    },
    {
        "description": "Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g.?Bash History), operating system or application-specific repositories (e.g.?Credentials in Registry), or other specialized files/artifacts (e.g.?Private Keys).",
        "id": "472",
        "mitigation": "Active Directory Configuration",
        "mitigationid": "M1015",
        "technique": "Unsecured Credentials",
        "techniqueid": "T1552"
    },
    {
        "description": "Adversaries may attempt to find unsecured credentials in Group Policy Preferences (GPP). GPP are tools that allow administrators to create domain policies with embedded credentials. These policies allow administrators to set local accounts.",
        "id": "473",
        "mitigation": "Active Directory Configuration",
        "mitigationid": "M1015",
        "technique": "Group Policy Preferences",
        "techniqueid": "T1552.006"
    },
    {
        "description": "Adversaries may \"pass the ticket\" using stolen Kerberos tickets to move laterally within an environment, bypassing normal system access controls. Pass the ticket (PtT) is a method of authenticating to a system using Kerberos tickets without having access to an account's password. Kerberos authentication can be used as the first step to lateral movement to a remote system.",
        "id": "474",
        "mitigation": "Active Directory Configuration",
        "mitigationid": "M1015",
        "technique": "Pass the Ticket",
        "techniqueid": "T1550.003"
    },
    {
        "description": "Adversaries may create or edit shortcuts to run a program during system boot or user login. Shortcuts or symbolic links are ways of referencing other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process.",
        "id": "475",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Shortcut Modification",
        "techniqueid": "T1547.009"
    },
    {
        "description": "Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk. An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.",
        "id": "476",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Abuse Elevation Control Mechanism",
        "techniqueid": "T1548"
    },
    {
        "description": "Adversaries may perform sudo caching and/or use the suoders file to elevate privileges. Adversaries may do this to execute commands as other users or spawn processes with higher privileges.",
        "id": "477",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Sudo and Sudo Caching",
        "techniqueid": "T1548.003"
    },
    {
        "description": "Adversaries may modify the SSH?authorized_keys?file to maintain persistence on a victim host. Linux distributions and macOS commonly use key-based authentication to secure the authentication process of SSH sessions for remote management. The?authorized_keys?file in SSH specifies the SSH keys that can be used for logging into the user account for which the file is configured. This file is usually found in the user's home directory under?<user-home>/.ssh/authorized_keys. Users may edit the system��s SSH config file to modify the directives PubkeyAuthentication and RSAAuthentication to the value \"yes\" to ensure public key and RSA authentication are enabled. The SSH config file is usually located under?/etc/ssh/sshd_config.",
        "id": "478",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "SSH Authorized Keys",
        "techniqueid": "T1098.004"
    },
    {
        "description": "Adversaries may abuse time providers to execute DLLs when the system boots. The Windows Time service (W32Time) enables time synchronization across and within domains. W32Time time providers are responsible for retrieving time stamps from hardware/network resources and outputting these values to other network clients.",
        "id": "479",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Time Providers",
        "techniqueid": "T1547.003"
    },
    {
        "description": "Adversaries may modify plist files to run a program during system boot or user login. Property list (plist) files contain all of the information that macOS and OS X uses to configure applications and services. These files are UTF-8 encoded and formatted like XML documents via a series of keys surrounded by < >. They detail when programs should execute, file paths to the executables, program arguments, required OS permissions, and many others. plists are located in certain locations depending on their purpose such as?/Library/Preferences?(which execute with elevated privileges) and?~/Library/Preferences?(which execute with a user's privileges).",
        "id": "480",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Plist Modification",
        "techniqueid": "T1547.011"
    },
    {
        "description": "Adversaries may use scripts automatically executed at boot or logon initialization to establish persistence. Initialization scripts can be used to perform administrative functions, which may often execute other programs or send information to an internal logging server. These scripts can vary based on operating system and whether applied locally or remotely.",
        "id": "481",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Boot or Logon Initialization Scripts",
        "techniqueid": "T1037"
    },
    {
        "description": "Adversaries may use macOS logon scripts automatically executed at logon initialization to establish persistence. macOS allows logon scripts (known as login hooks) to be executed whenever a specific user logs into a system. A login hook tells Mac OS X to execute a certain script when a user logs in, but unlike?Startup Items, a login hook executes as the elevated root user.",
        "id": "482",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Logon Script (Mac)",
        "techniqueid": "T1037.002"
    },
    {
        "description": "Adversaries may use network logon scripts automatically executed at logon initialization to establish persistence. Network logon scripts can be assigned using Active Directory or Group Policy Objects. These logon scripts run with the privileges of the user they are assigned to. Depending on the systems within the network, initializing one of these scripts could apply to more than one or potentially all systems.",
        "id": "483",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Network Logon Script",
        "techniqueid": "T1037.003"
    },
    {
        "description": "Adversaries may use startup items automatically executed at boot initialization to establish persistence. Startup items execute during the final phase of the boot process and contain shell scripts or other executable files along with configuration information used by the system to determine the execution order for all startup items.",
        "id": "484",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Startup Items",
        "techniqueid": "T1037.005"
    },
    {
        "description": "Adversaries may use rc.common automatically executed at boot initialization to establish persistence. During the boot process, macOS executes?source /etc/rc.common, which is a shell script containing various utility functions. This file also defines routines for processing command-line arguments and for gathering system settings and is thus recommended to include in the start of Startup Item Scripts . In macOS and OS X, this is now a deprecated mechanism in favor of?Launch Agent?and?Launch Daemon?but is currently still used.",
        "id": "485",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Rc.common",
        "techniqueid": "T1037.004"
    },
    {
        "description": "Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services. On macOS, launchd processes known as?Launch Daemon?and?Launch Agent?are run to finish system initialization and load user specific parameters.",
        "id": "486",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Create or Modify System Process",
        "techniqueid": "T1543"
    },
    {
        "description": "Adversaries may create or modify systemd services to repeatedly execute malicious payloads as part of persistence. The systemd service manager is commonly used for managing background daemon processes (also known as services) and other system resources. Systemd is the default initialization (init) system on many Linux distributions starting with Debian 8, Ubuntu 15.04, CentOS 7, RHEL 7, Fedora 15, and replaces legacy init systems including SysVinit and Upstart while remaining backwards compatible with the aforementioned init systems.",
        "id": "487",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Systemd Service",
        "techniqueid": "T1543.002"
    },
    {
        "description": "Adversaries may access data objects from improperly secured cloud storage.",
        "id": "488",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Data from Cloud Storage Object",
        "techniqueid": "T1530"
    },
    {
        "description": "Adversaries may establish persistence by executing malicious content triggered by a user��s shell.?~/.bash_profile?and?~/.bashrc?are shell scripts that contain shell commands. These files are executed in a user's context when a new shell opens or when a user logs in so that their environment is set correctly.",
        "id": "489",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": ".bash_profile and .bashrc",
        "techniqueid": "T1546.004"
    },
    {
        "description": "Adversaries may gain persistence and elevate privileges by executing malicious content triggered by PowerShell profiles. A PowerShell profile (profile.ps1) is a script that runs when?PowerShell?starts and can be used as a logon script to customize user environments.",
        "id": "490",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "PowerShell Profile",
        "techniqueid": "T1546.013"
    },
    {
        "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).",
        "id": "491",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "File and Directory Permissions Modification",
        "techniqueid": "T1222"
    },
    {
        "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).",
        "id": "492",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Windows File and Directory Permissions Modification",
        "techniqueid": "T1222.001"
    },
    {
        "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).",
        "id": "493",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Linux and Mac File and Directory Permissions Modification",
        "techniqueid": "T1222.002"
    },
    {
        "description": "Adversaries may use NTFS file attributes to hide their malicious data in order to evade detection. Every New Technology File System (NTFS) formatted partition contains a Master File Table (MFT) that maintains a record for every file/directory on the partition. Within MFT entries are file attributes, such as Extended Attributes (EA) and Data [known as Alternate Data Streams (ADSs) when more than one Data attribute is present], that can be used to store arbitrary data (and even complete files).",
        "id": "494",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "NTFS File Attributes",
        "techniqueid": "T1564.004"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.",
        "id": "495",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Hijack Execution Flow",
        "techniqueid": "T1574"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking vulnerable file path references. Adversaries can take advantage of paths that lack surrounding quotations by placing an executable in a higher level directory within the path, so that Windows will choose the adversary's executable to launch.",
        "id": "496",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Path Interception by Unquoted Path",
        "techniqueid": "T1574.009"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking environment variables used to load libraries. Adversaries may place a program in an earlier entry in the list of directories stored in the PATH environment variable, which Windows will then execute when it searches sequentially through that PATH listing in search of the binary that was called from a script or the command line.",
        "id": "497",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Path Interception by PATH Environment Variable",
        "techniqueid": "T1574.007"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the search order used to load other programs. Because some programs do not call other programs using the full path, adversaries may place their own file in the directory where the calling program is located, causing the operating system to launch their malicious software at the request of the calling program.",
        "id": "498",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Path Interception by Search Order Hijacking",
        "techniqueid": "T1574.008"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the library manifest used to load DLLs. Adversaries may take advantage of vague references in the library manifest of a program by replacing a legitimate library with a malicious one, causing the operating system to load their malicious library when it is called for by the victim program.",
        "id": "499",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "DLL Side-Loading",
        "techniqueid": "T1574.002"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking ambiguous paths used to load libraries. Adversaries may plant trojan dynamic libraries, in a directory that will be searched by the operating system before the legitimate library specified by the victim program, so that their malicious library will be loaded into the victim program instead. MacOS and OS X use a common method to look for required dynamic libraries (dylib) to load into a program based on search paths.",
        "id": "500",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Dylib Hijacking",
        "techniqueid": "T1574.004"
    },
    {
        "description": "Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators.",
        "id": "501",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Impair Defenses",
        "techniqueid": "T1562"
    },
    {
        "description": "Adversaries may disable security tools to avoid possible detection of their tools and activities. This can take the form of killing security software or event logging processes, deleting Registry keys so that tools do not start at run time, or other methods to interfere with security tools scanning or reporting information.",
        "id": "502",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Disable or Modify Tools",
        "techniqueid": "T1562.001"
    },
    {
        "description": "Adversaries may disable Windows event logging to limit data that can be leveraged for detections and audits. Windows event logs record user and system activity such as login attempts, process creation, and much more. This data is used by security tools and analysts to generate detections.",
        "id": "503",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Disable Windows Event Logging",
        "techniqueid": "T1562.002"
    },
    {
        "description": "Adversaries may disable or modify system firewalls in order to bypass controls limiting network usage. Changes could be disabling the entire mechanism as well as adding, deleting, or modifying particular rules. This can be done numerous ways depending on the operating system, including via command-line, editing Windows Registry keys, and Windows Control Panel.",
        "id": "504",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Disable or Modify System Firewall",
        "techniqueid": "T1562.004"
    },
    {
        "description": "An adversary may attempt to block indicators or events typically captured by sensors from being gathered and analyzed. This could include maliciously redirecting or even disabling host-based sensors, such as Event Tracing for Windows (ETW), by tampering settings that control the collection and flow of event telemetry. These settings may be stored on the system in configuration files and/or in the Registry as well as being accessible via administrative utilities such as?PowerShell?or?Windows Management Instrumentation.",
        "id": "505",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Indicator Blocking",
        "techniqueid": "T1562.006"
    },
    {
        "description": "Adversaries may delete or alter generated artifacts on a host system, including logs or captured files such as quarantined malware. Locations and format of logs are platform or product-specific, however standard operating system logs are captured as Windows events or Linux/macOS files such as?Bash History?and /var/log/*.",
        "id": "506",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Indicator Removal on Host",
        "techniqueid": "T1070"
    },
    {
        "description": "Adversaries may clear Windows Event Logs to hide the activity of an intrusion. Windows Event Logs are a record of a computer's alerts and notifications. There are three system-defined sources of events: System, Application, and Security, with five event types: Error, Warning, Information, Success Audit, and Failure Audit.",
        "id": "507",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Clear Windows Event Logs",
        "techniqueid": "T1070.001"
    },
    {
        "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the?/var/log/?directory. Subfolders in this directory categorize logs by their related functions, such as:",
        "id": "508",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Clear Linux or Mac System Logs",
        "techniqueid": "T1070.002"
    },
    {
        "description": "In addition to clearing system logs, an adversary may clear the command history of a compromised account to conceal the actions undertaken during an intrusion. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done.",
        "id": "509",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Clear Command History",
        "techniqueid": "T1070.003"
    },
    {
        "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.",
        "id": "510",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Masquerading",
        "techniqueid": "T1036"
    },
    {
        "description": "Adversaries may rename legitimate system utilities to try to evade security mechanisms concerning the usage of those utilities. Security monitoring and control mechanisms may be in place for system utilities adversaries are capable of abusing. It may be possible to bypass those security mechanisms by renaming the utility prior to utilization (ex: rename?rundll32.exe). An alternative case occurs when a legitimate utility is copied or moved to a different directory and renamed to avoid detections based on system utilities executing from non-standard paths.",
        "id": "511",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Rename System Utilities",
        "techniqueid": "T1036.003"
    },
    {
        "description": "Adversaries may match or approximate the name or location of legitimate files when naming/placing their files. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). Alternatively, the filename given may be a close approximation of legitimate programs or something innocuous.",
        "id": "512",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Match Legitimate Name or Location",
        "techniqueid": "T1036.005"
    },
    {
        "description": "Adversaries may inject malicious code into processes via the /proc filesystem in order to evade process-based defenses as well as possibly elevate privileges. Proc memory injection is a method of executing arbitrary code in the address space of a separate live process.",
        "id": "513",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Proc Memory",
        "techniqueid": "T1055.009"
    },
    {
        "description": "Adversaries may hijack a legitimate user's SSH session to move laterally within an environment. Secure Shell (SSH) is a standard means of remote access on Linux and macOS systems. It allows a user to connect to another system via an encrypted tunnel, commonly authenticating through a password, certificate or the use of an asymmetric encryption key pair.",
        "id": "514",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "SSH Hijacking",
        "techniqueid": "T1563.001"
    },
    {
        "description": "Adversaries may abuse systemd timers to perform task scheduling for initial or recurring execution of malicious code. Systemd timers are unit files with file extension?.timer?that control services. Timers can be set to run on a calendar event or after a time span relative to a starting point. They can be used as an alternative to?Cron?in Linux environments.",
        "id": "515",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Systemd Timers",
        "techniqueid": "T1053.006"
    },
    {
        "description": "Adversaries may stop or disable services on a system to render those services unavailable to legitimate users. Stopping critical services can inhibit or stop response to an incident or aid in the adversary's overall objectives to cause damage to the environment.",
        "id": "516",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Service Stop",
        "techniqueid": "T1489"
    },
    {
        "description": "Adversaries may abuse control.exe to proxy execution of malicious payloads. The Windows Control Panel process binary (control.exe) handles execution of Control Panel items, which are utilities that allow users to view and adjust computer settings.",
        "id": "517",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Control Panel",
        "techniqueid": "T1218.002"
    },
    {
        "description": "Adversaries may tamper with SIP and trust provider components to mislead the operating system and application control tools when conducting signature validation checks. In user mode, Windows Authenticode digital signatures are used to verify a file's origin and integrity, variables that may be used to establish trust in signed code (ex: a driver with a valid Microsoft signature may be handled as safe). The signature validation process is handled via the WinVerifyTrust application programming interface (API) function, which accepts an inquiry and coordinates with the appropriate trust provider, which is responsible for validating parameters of a signature.",
        "id": "518",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "SIP and Trust Provider Hijacking",
        "techniqueid": "T1553.003"
    },
    {
        "description": "Adversaries may abuse system services or daemons to execute commands or programs. Adversaries can execute malicious content by interacting with or creating services. Many services are set to run at boot, which can aid in achieving persistence (Create or Modify System Process), but adversaries can also abuse services for one-time or temporary execution.",
        "id": "519",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "System Services",
        "techniqueid": "T1569"
    },
    {
        "description": "Adversaries may abuse the Windows service control manager to execute malicious commands or payloads. The Windows service control manager (services.exe) is an interface to manage and manipulate services. The service control manager is accessible to users via GUI components as well as system utilities such as?sc.exe?and?Net.",
        "id": "520",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Service Execution",
        "techniqueid": "T1569.002"
    },
    {
        "description": "Adversaries may deliver payloads to remote systems by adding content to shared storage locations, such as network drives or internal code repositories. Content stored on network drives or in other shared locations may be tainted by adding malicious programs, scripts, or exploit code to otherwise valid files. Once a user opens the shared tainted content, the malicious portion can be executed to run the adversary's code on a remote system. Adversaries may use tainted shared content to move laterally.",
        "id": "521",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Taint Shared Content",
        "techniqueid": "T1080"
    },
    {
        "description": "Adversaries may abuse time providers to execute DLLs when the system boots. The Windows Time service (W32Time) enables time synchronization across and within domains. W32Time time providers are responsible for retrieving time stamps from hardware/network resources and outputting these values to other network clients.",
        "id": "522",
        "mitigation": "Restrict Registry Permissions",
        "mitigationid": "M1024",
        "technique": "Time Providers",
        "techniqueid": "T1547.003"
    },
    {
        "description": "Adversaries may use scripts automatically executed at boot or logon initialization to establish persistence. Initialization scripts can be used to perform administrative functions, which may often execute other programs or send information to an internal logging server. These scripts can vary based on operating system and whether applied locally or remotely.",
        "id": "523",
        "mitigation": "Restrict Registry Permissions",
        "mitigationid": "M1024",
        "technique": "Boot or Logon Initialization Scripts",
        "techniqueid": "T1037"
    },
    {
        "description": "Adversaries may use Windows logon scripts automatically executed at logon initialization to establish persistence. Windows allows logon scripts to be run whenever a specific user or group of users log into a system. This is done via adding a path to a script to the?HKCU\\Environment\\UserInitMprLogonScript?Registry key.",
        "id": "524",
        "mitigation": "Restrict Registry Permissions",
        "mitigationid": "M1024",
        "technique": "Logon Script (Windows)",
        "techniqueid": "T1037.001"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.",
        "id": "525",
        "mitigation": "Restrict Registry Permissions",
        "mitigationid": "M1024",
        "technique": "Hijack Execution Flow",
        "techniqueid": "T1574"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the Registry entries used by services. Adversaries may use flaws in the permissions for registry to redirect from the originally specified executable to one that they control, in order to launch their own code at Service start. Windows stores local service configuration information in the Registry under?HKLM\\SYSTEM\\CurrentControlSet\\Services. The information stored under a service's Registry keys can be manipulated to modify a service's execution parameters through tools such as the service controller, sc.exe,?PowerShell, or?Reg. Access to Registry keys is controlled through Access Control Lists and permissions.",
        "id": "526",
        "mitigation": "Restrict Registry Permissions",
        "mitigationid": "M1024",
        "technique": "Services Registry Permissions Weakness",
        "techniqueid": "T1574.011"
    },
    {
        "description": "Adversaries may leverage the COR_PROFILER environment variable to hijack the execution flow of programs that load the .NET CLR. The COR_PROFILER is a .NET Framework feature which allows developers to specify an unmanaged (or external of .NET) profiling DLL to be loaded into each .NET process that loads the Common Language Runtime (CLR). These profiliers are designed to monitor, troubleshoot, and debug managed code executed by the .NET CLR.",
        "id": "527",
        "mitigation": "Restrict Registry Permissions",
        "mitigationid": "M1024",
        "technique": "COR_PROFILER",
        "techniqueid": "T1574.012"
    },
    {
        "description": "Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators.",
        "id": "528",
        "mitigation": "Restrict Registry Permissions",
        "mitigationid": "M1024",
        "technique": "Impair Defenses",
        "techniqueid": "T1562"
    },
    {
        "description": "Adversaries may disable security tools to avoid possible detection of their tools and activities. This can take the form of killing security software or event logging processes, deleting Registry keys so that tools do not start at run time, or other methods to interfere with security tools scanning or reporting information.",
        "id": "529",
        "mitigation": "Restrict Registry Permissions",
        "mitigationid": "M1024",
        "technique": "Disable or Modify Tools",
        "techniqueid": "T1562.001"
    },
    {
        "description": "Adversaries may disable Windows event logging to limit data that can be leveraged for detections and audits. Windows event logs record user and system activity such as login attempts, process creation, and much more. This data is used by security tools and analysts to generate detections.",
        "id": "530",
        "mitigation": "Restrict Registry Permissions",
        "mitigationid": "M1024",
        "technique": "Disable Windows Event Logging",
        "techniqueid": "T1562.002"
    },
    {
        "description": "Adversaries may disable or modify system firewalls in order to bypass controls limiting network usage. Changes could be disabling the entire mechanism as well as adding, deleting, or modifying particular rules. This can be done numerous ways depending on the operating system, including via command-line, editing Windows Registry keys, and Windows Control Panel.",
        "id": "531",
        "mitigation": "Restrict Registry Permissions",
        "mitigationid": "M1024",
        "technique": "Disable or Modify System Firewall",
        "techniqueid": "T1562.004"
    },
    {
        "description": "Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.",
        "id": "532",
        "mitigation": "Restrict Registry Permissions",
        "mitigationid": "M1024",
        "technique": "Modify Registry",
        "techniqueid": "T1112"
    },
    {
        "description": "Adversaries may stop or disable services on a system to render those services unavailable to legitimate users. Stopping critical services can inhibit or stop response to an incident or aid in the adversary's overall objectives to cause damage to the environment.",
        "id": "533",
        "mitigation": "Restrict Registry Permissions",
        "mitigationid": "M1024",
        "technique": "Service Stop",
        "techniqueid": "T1489"
    },
    {
        "description": "Adversaries may undermine security controls that will either warn users of untrusted activity or prevent execution of untrusted programs. Operating systems and security products may contain mechanisms to identify programs or websites as possessing some level of trust. Examples of such features would include a program being allowed to run because it is signed by a valid code signing certificate, a program prompting the user with a warning because it has an attribute set from being downloaded from the Internet, or getting an indication that you are about to connect to an untrusted site.",
        "id": "534",
        "mitigation": "Restrict Registry Permissions",
        "mitigationid": "M1024",
        "technique": "Subvert Trust Controls",
        "techniqueid": "T1553"
    },
    {
        "description": "Adversaries may tamper with SIP and trust provider components to mislead the operating system and application control tools when conducting signature validation checks. In user mode, Windows Authenticode digital signatures are used to verify a file's origin and integrity, variables that may be used to establish trust in signed code (ex: a driver with a valid Microsoft signature may be handled as safe). The signature validation process is handled via the WinVerifyTrust application programming interface (API) function, which accepts an inquiry and coordinates with the appropriate trust provider, which is responsible for validating parameters of a signature.",
        "id": "535",
        "mitigation": "Restrict Registry Permissions",
        "mitigationid": "M1024",
        "technique": "SIP and Trust Provider Hijacking",
        "techniqueid": "T1553.003"
    },
    {
        "description": "Adversaries may abuse authentication packages to execute DLLs when the system boots. Windows authentication package DLLs are loaded by the Local Security Authority (LSA) process at system start. They provide support for multiple logon processes and multiple security protocols to the operating system.",
        "id": "536",
        "mitigation": "Privileged Process Integrity",
        "mitigationid": "M1025",
        "technique": "Authentication Package",
        "techniqueid": "T1547.002"
    },
    {
        "description": "Adversaries may abuse security support providers (SSPs) to execute DLLs when the system boots. Windows SSP DLLs are loaded into the Local Security Authority (LSA) process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs.",
        "id": "537",
        "mitigation": "Privileged Process Integrity",
        "mitigationid": "M1025",
        "technique": "Security Support Provider",
        "techniqueid": "T1547.005"
    },
    {
        "description": "Adversaries may modify or add LSASS drivers to obtain persistence on compromised systems. The Windows security subsystem is a set of components that manage and enforce the security policy for a computer or domain. The Local Security Authority (LSA) is the main component responsible for local security policy and user authentication. The LSA includes multiple dynamic link libraries (DLLs) associated with various other security functions, all of which run in the context of the LSA Subsystem Service (LSASS) lsass.exe process.",
        "id": "538",
        "mitigation": "Privileged Process Integrity",
        "mitigationid": "M1025",
        "technique": "LSASS Driver",
        "techniqueid": "T1547.008"
    },
    {
        "description": "Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows or pluggable authentication modules (PAM) on Unix-based systems, responsible for gathering, storing, and validating credentials.",
        "id": "539",
        "mitigation": "Privileged Process Integrity",
        "mitigationid": "M1025",
        "technique": "Modify Authentication Process",
        "techniqueid": "T1556"
    },
    {
        "description": "Adversaries may patch the authentication process on a domain controller to bypass the typical authentication mechanisms and enable access to accounts.",
        "id": "540",
        "mitigation": "Privileged Process Integrity",
        "mitigationid": "M1025",
        "technique": "Domain Controller Authentication",
        "techniqueid": "T1556.001"
    },
    {
        "description": "Adversaries may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password, from the operating system and software. Credentials can then be used to perform Lateral Movement and access restricted information.",
        "id": "541",
        "mitigation": "Privileged Process Integrity",
        "mitigationid": "M1025",
        "technique": "OS Credential Dumping",
        "techniqueid": "T1003"
    },
    {
        "description": "Adversaries may attempt to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS). After a user logs on, the system generates and stores a variety of credential materials in LSASS process memory. These credential materials can be harvested by an administrative user or SYSTEM and used to conduct Lateral Movement using Use Alternate Authentication Material.",
        "id": "542",
        "mitigation": "Privileged Process Integrity",
        "mitigationid": "M1025",
        "technique": "LSASS Memory",
        "techniqueid": "T1003.001"
    },
    {
        "description": "Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk. An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.",
        "id": "543",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Abuse Elevation Control Mechanism",
        "techniqueid": "T1548"
    },
    {
        "description": "Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.",
        "id": "544",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Bypass User Account Control",
        "techniqueid": "T1548.002"
    },
    {
        "description": "Adversaries may perform sudo caching and/or use the suoders file to elevate privileges. Adversaries may do this to execute commands as other users or spawn processes with higher privileges.",
        "id": "545",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Sudo and Sudo Caching",
        "techniqueid": "T1548.003"
    },
    {
        "description": "Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.",
        "id": "546",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Access Token Manipulation",
        "techniqueid": "T1134"
    },
    {
        "description": "Adversaries may duplicate then impersonate another user's token to escalate privileges and bypass access controls. An adversary can create a new access token that duplicates an existing token using?DuplicateToken(Ex). The token can then be used with?ImpersonateLoggedOnUser?to allow the calling thread to impersonate a logged on user's security context, or with?SetThreadToken?to assign the impersonated token to a thread.",
        "id": "547",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Token Impersonation/Theft",
        "techniqueid": "T1134.001"
    },
    {
        "description": "Adversaries may create a new process with a duplicated token to escalate privileges and bypass access controls. An adversary can duplicate a desired access token with?DuplicateToken(Ex)?and use it with?CreateProcessWithTokenW?to create a new process running under the security context of the impersonated user. This is useful for creating a new process under the security context of a different user.",
        "id": "548",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Create Process with Token",
        "techniqueid": "T1134.002"
    },
    {
        "description": "Adversaries may make and impersonate tokens to escalate privileges and bypass access controls. If an adversary has a username and password but the user is not logged onto the system, the adversary can then create a logon session for the user using the?LogonUser?function. The function will return a copy of the new session's access token and the adversary can use?SetThreadToken?to assign the token to a thread.",
        "id": "549",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Make and Impersonate Token",
        "techniqueid": "T1134.003"
    },
    {
        "description": "Adversaries may modify the kernel to automatically execute programs on system boot. Loadable Kernel Modules (LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. ?",
        "id": "550",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Kernel Modules and Extensions",
        "techniqueid": "T1547.006"
    },
    {
        "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of?Unix Shell?while Windows installations include the?Windows Command Shell?and?PowerShell.",
        "id": "551",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Command and Scripting Interpreter",
        "techniqueid": "T1059"
    },
    {
        "description": "Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the?Start-Process?cmdlet which can be used to run an executable and the?Invoke-Command?cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).",
        "id": "552",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "PowerShell",
        "techniqueid": "T1059.001"
    },
    {
        "description": "Adversaries may abuse scripting or built-in command line interpreters (CLI) on network devices to execute malicious command and payloads. The CLI is the primary means through which users and administrators interact with the device in order to view system information, modify device operations, or perform diagnostic and administrative functions. CLIs typically contain various permission levels required for different commands.",
        "id": "553",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Network Device CLI",
        "techniqueid": "T1059.008"
    },
    {
        "description": "Adversaries may create or modify systemd services to repeatedly execute malicious payloads as part of persistence. The systemd service manager is commonly used for managing background daemon processes (also known as services) and other system resources. Systemd is the default initialization (init) system on many Linux distributions starting with Debian 8, Ubuntu 15.04, CentOS 7, RHEL 7, Fedora 15, and replaces legacy init systems including SysVinit and Upstart while remaining backwards compatible with the aforementioned init systems.",
        "id": "554",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Systemd Service",
        "techniqueid": "T1543.002"
    },
    {
        "description": "Adversaries may modify the configuration settings of a domain to evade defenses and/or escalate privileges in domain environments. Domains provide a centralized means of managing how computer resources (ex: computers, user accounts) can act, and interact with each other, on a network. The policy of the domain also includes configuration settings that may apply between domains in a multi-domain/forest environment. Modifications to domain settings may include altering domain Group Policy Objects (GPOs) or changing trust settings for domains, including federation trusts.",
        "id": "555",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Domain Policy Modification",
        "techniqueid": "T1484"
    },
    {
        "description": "Adversaries may add new domain trusts or modify the properties of existing domain trusts to evade defenses and/or elevate privileges. Domain trust details, such as whether or not a domain is federated, allow authentication and authorization properties to apply between domains for the purpose of accessing shared resources. These trust objects may include accounts, credentials, and other authentication material applied to servers, tokens, and domains.",
        "id": "556",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Domain Trust Modification",
        "techniqueid": "T1484.002"
    },
    {
        "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.?A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.",
        "id": "557",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Exploitation of Remote Services",
        "techniqueid": "T1210"
    },
    {
        "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).",
        "id": "558",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "File and Directory Permissions Modification",
        "techniqueid": "T1222"
    },
    {
        "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).",
        "id": "559",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Windows File and Directory Permissions Modification",
        "techniqueid": "T1222.001"
    },
    {
        "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).",
        "id": "560",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Linux and Mac File and Directory Permissions Modification",
        "techniqueid": "T1222.002"
    },
    {
        "description": "Adversaries may overwrite or corrupt the flash memory contents of system BIOS or other firmware in devices attached to a system in order to render them inoperable or unable to boot. Firmware is software that is loaded and executed from non-volatile memory on hardware devices in order to initialize and manage device functionality. These devices could include the motherboard, hard drive, or video cards.",
        "id": "561",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Firmware Corruption",
        "techniqueid": "T1495"
    },
    {
        "description": "Adversaries may forge credential materials that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies, tokens, or other materials to authenticate and authorize user access.",
        "id": "562",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Forge Web Credentials",
        "techniqueid": "T1606"
    },
    {
        "description": "An adversary may forge SAML tokens with any permissions claims and lifetimes if they possess a valid SAML token-signing certificate. The default lifetime of a SAML token is one hour, but the validity period can be specified in the?NotOnOrAfter?value of the?conditions ...?element in a token. This value can be changed using the?AccessTokenLifetime?in a?LifetimeTokenPolicy. Forged SAML tokens enable adversaries to authenticate across services that use SAML 2.0 as an SSO (single sign-on) mechanism.",
        "id": "563",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "SAML Tokens",
        "techniqueid": "T1606.002"
    },
    {
        "description": "Adversaries may install code on externally facing portals, such as a VPN login page, to capture and transmit credentials of users who attempt to log into the service. For example, a compromised login page may log provided user credentials before logging the user in to the service.",
        "id": "564",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Web Portal Capture",
        "techniqueid": "T1056.003"
    },
    {
        "description": "Adversaries may abuse inter-process communication (IPC) mechanisms for local code or command execution. IPC is typically used by processes to share data, communicate with each other, or synchronize execution. IPC is also commonly used to avoid situations such as deadlocks, which occurs when processes are stuck in a cyclic waiting pattern.",
        "id": "565",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Inter-Process Communication",
        "techniqueid": "T1559"
    },
    {
        "description": "Adversaries may use the Windows Component Object Model (COM) for local code execution. COM is an inter-process communication (IPC) component of the native Windows application programming interface (API) that enables interaction between software objects, or executable code that implements one or more interfaces. Through COM, a client object can call methods of server objects, which are typically binary Dynamic Link Libraries (DLL) or executables (EXE).",
        "id": "566",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Component Object Model",
        "techniqueid": "T1559.001"
    },
    {
        "description": "Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows or pluggable authentication modules (PAM) on Unix-based systems, responsible for gathering, storing, and validating credentials.",
        "id": "567",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Modify Authentication Process",
        "techniqueid": "T1556"
    },
    {
        "description": "Adversaries may patch the authentication process on a domain controller to bypass the typical authentication mechanisms and enable access to accounts.",
        "id": "568",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Domain Controller Authentication",
        "techniqueid": "T1556.001"
    },
    {
        "description": "Adversaries may modify pluggable authentication modules (PAM) to access user credentials or enable otherwise unwarranted access to accounts. PAM is a modular system of configuration files, libraries, and executable files which guide authentication for many services. The most common authentication module is?pam_unix.so, which retrieves, sets, and verifies account authentication information in?/etc/passwd?and?/etc/shadow.",
        "id": "569",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Pluggable Authentication Modules",
        "techniqueid": "T1556.003"
    },
    {
        "description": "Adversaries may use?Patch System Image?to hard code a password in the operating system, thus bypassing of native authentication mechanisms for local accounts on network devices.",
        "id": "570",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Network Device Authentication",
        "techniqueid": "T1556.004"
    },
    {
        "description": "Adversaries may make changes to the operating system of embedded network devices to weaken defenses and provide new capabilities for themselves. On such devices, the operating systems are typically monolithic and most of the device functionality and capabilities are contained within a single file.",
        "id": "571",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Modify System Image",
        "techniqueid": "T1601"
    },
    {
        "description": "Adversaries may modify the operating system of a network device to introduce new capabilities or weaken existing defenses. Some network devices are built with a monolithic architecture, where the entire operating system and most of the functionality of the device is contained within a single file. Adversaries may change this file in storage, to be loaded in a future boot, or in memory during runtime.",
        "id": "572",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Patch System Image",
        "techniqueid": "T1601.001"
    },
    {
        "description": "Adversaries may install an older version of the operating system of a network device to weaken security. Older operating system versions on network devices often have weaker encryption ciphers and, in general, fewer/less updated defensive features.",
        "id": "573",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Downgrade System Image",
        "techniqueid": "T1601.002"
    },
    {
        "description": "Adversaries may bridge network boundaries by compromising perimeter network devices. Breaching these devices may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.",
        "id": "574",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Network Boundary Bridging",
        "techniqueid": "T1599"
    },
    {
        "description": "Adversaries may bridge network boundaries by modifying a network device��s Network Address Translation (NAT) configuration. Malicious modifications to NAT may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.",
        "id": "575",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Network Address Translation Traversal",
        "techniqueid": "T1599.001"
    },
    {
        "description": "Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control.",
        "id": "576",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Pre-OS Boot",
        "techniqueid": "T1542"
    },
    {
        "description": "Adversaries may modify system firmware to persist on systems.The BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer.",
        "id": "577",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "System Firmware",
        "techniqueid": "T1542.001"
    },
    {
        "description": "Adversaries may use bootkits to persist on systems. Bootkits reside at a layer below the operating system and may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.",
        "id": "578",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Bootkit",
        "techniqueid": "T1542.003"
    },
    {
        "description": "Adversaries may abuse netbooting to load an unauthorized network device operating system from a Trivial File Transfer Protocol (TFTP) server. TFTP boot (netbooting) is commonly used by network administrators to load configuration-controlled network device images from a centralized management server. Netbooting is one option in the boot sequence and can be used to centralize, manage, and control device images.",
        "id": "579",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "TFTP Boot",
        "techniqueid": "T1542.005"
    },
    {
        "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process.",
        "id": "580",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Process Injection",
        "techniqueid": "T1055"
    },
    {
        "description": "Adversaries may inject malicious code into processes via ptrace (process trace) system calls in order to evade process-based defenses as well as possibly elevate privileges. Ptrace system call injection is a method of executing arbitrary code in the address space of a separate live process.",
        "id": "581",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Ptrace System Calls",
        "techniqueid": "T1055.008"
    },
    {
        "description": "Adversaries may take control of preexisting sessions with remote services to move laterally in an environment. Users may use valid credentials to log into a service specifically designed to accept remote connections, such as telnet, SSH, and RDP. When a user logs into a service, a session will be established that will allow them to maintain a continuous interaction with that service.",
        "id": "582",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Remote Service Session Hijacking",
        "techniqueid": "T1563"
    },
    {
        "description": "Adversaries may hijack a legitimate user's SSH session to move laterally within an environment. Secure Shell (SSH) is a standard means of remote access on Linux and macOS systems. It allows a user to connect to another system via an encrypted tunnel, commonly authenticating through a password, certificate or the use of an asymmetric encryption key pair.",
        "id": "583",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "SSH Hijacking",
        "techniqueid": "T1563.001"
    },
    {
        "description": "Adversaries may hijack a legitimate user��s remote desktop session to move laterally within an environment. Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).",
        "id": "584",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "RDP Hijacking",
        "techniqueid": "T1563.002"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.",
        "id": "585",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Remote Desktop Protocol",
        "techniqueid": "T1021.001"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user.",
        "id": "586",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "sMB/Windows Admin Shares",
        "techniqueid": "T1021.002"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to interact with remote machines by taking advantage of Distributed Component Object Model (DCOM). The adversary may then perform actions as the logged-on user.",
        "id": "587",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Distributed Component Object Model",
        "techniqueid": "T1021.003"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to interact with remote systems using Windows Remote Management (WinRM). The adversary may then perform actions as the logged-on user.",
        "id": "588",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Windows Remote Management",
        "techniqueid": "T1021.006"
    },
    {
        "description": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically requires being a member of an admin or otherwise privileged group on the remote system.",
        "id": "589",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Scheduled Task/Job",
        "techniqueid": "T1053"
    },
    {
        "description": "Adversaries may abuse the?at.exe?utility to perform task scheduling for initial or recurring execution of malicious code. The?at?utility exists as an executable within Windows for scheduling tasks at a specified time and date. Using?at?requires that the Task Scheduler service be running, and the user to be logged on as a member of the local Administrators group.",
        "id": "590",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "At (Windows)",
        "techniqueid": "T1053.002"
    },
    {
        "description": "Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The?schtasks?can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task.",
        "id": "591",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Scheduled Task",
        "techniqueid": "T1053.005"
    },
    {
        "description": "Adversaries may abuse systemd timers to perform task scheduling for initial or recurring execution of malicious code. Systemd timers are unit files with file extension?.timer?that control services. Timers can be set to run on a calendar event or after a time span relative to a starting point. They can be used as an alternative to?Cron?in Linux environments.",
        "id": "592",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Systemd Timers",
        "techniqueid": "T1053.006"
    },
    {
        "description": "Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed binaries. Binaries signed with trusted digital certificates can execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files.",
        "id": "593",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Signed Binary Proxy Execution",
        "techniqueid": "T1218"
    },
    {
        "description": "Adversaries may abuse msiexec.exe to proxy execution of malicious payloads. Msiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi). Msiexec.exe is digitally signed by Microsoft.",
        "id": "594",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Msiexec",
        "techniqueid": "T1218.007"
    },
    {
        "description": "Adversaries may attempt to subvert Kerberos authentication by stealing or forging Kerberos tickets to enable?Pass the Ticket.",
        "id": "595",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Steal or Forge Kerberos Tickets",
        "techniqueid": "T1558"
    },
    {
        "description": "Adversaries who have the KRBTGT account password hash may forge Kerberos ticket-granting tickets (TGT), also known as a golden ticket. Golden tickets enable adversaries to generate authentication material for any account in Active Directory.",
        "id": "596",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Golden Ticket",
        "techniqueid": "T1558.001"
    },
    {
        "description": "Adversaries who have the password hash of a target service account (e.g. SharePoint, MSSQL) may forge Kerberos ticket granting service (TGS) tickets, also known as silver tickets. Kerberos TGS tickets are also known as service tickets.",
        "id": "597",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Silver Ticket",
        "techniqueid": "T1558.002"
    },
    {
        "description": "Adversaries may abuse a valid Kerberos ticket-granting ticket (TGT) or sniff network traffic to obtain a ticket-granting service (TGS) ticket that may be vulnerable to?Brute Force.",
        "id": "598",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Kerberoasting",
        "techniqueid": "T1558.003"
    },
    {
        "description": "Adversaries may abuse system services or daemons to execute commands or programs. Adversaries can execute malicious content by interacting with or creating services. Many services are set to run at boot, which can aid in achieving persistence (Create or Modify System Process), but adversaries can also abuse services for one-time or temporary execution.",
        "id": "599",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "System Services",
        "techniqueid": "T1569"
    },
    {
        "description": "Adversaries may abuse the Windows service control manager to execute malicious commands or payloads. The Windows service control manager (services.exe) is an interface to manage and manipulate services. The service control manager is accessible to users via GUI components as well as system utilities such as?sc.exe?and?Net.",
        "id": "600",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Service Execution",
        "techniqueid": "T1569.002"
    },
    {
        "description": "Adversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.",
        "id": "601",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Local Accounts",
        "techniqueid": "T1078.003"
    },
    {
        "description": "Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk. An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.",
        "id": "602",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Abuse Elevation Control Mechanism",
        "techniqueid": "T1548"
    },
    {
        "description": "An adversary may perform shell escapes or exploit vulnerabilities in an application with the setsuid or setgid bits to get code running in a different user��s context. On Linux or macOS, when the setuid or setgid bits are set for an application, the application will run with the privileges of the owning user or group respectively. . Normally an application is run in the current user��s context, regardless of which user or group owns the application. However, there are instances where programs need to be executed in an elevated context to function properly, but the user running them doesn��t need the elevated privileges.",
        "id": "603",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Setuid and Setgid",
        "techniqueid": "T1548.001"
    },
    {
        "description": "Adversaries may attempt to access detailed information about the password policy used within an enterprise network. Password policies for networks are a way to enforce complex passwords that are difficult to guess or crack through?Brute Force. This would help the adversary to create a list of common passwords and launch dictionary and/or brute force attacks which adheres to the policy (e.g. if the minimum password length should be 8, then not trying passwords such as 'pass123'; not checking for more than 3-4 passwords per account if the lockout is set to 6 as to not lock out accounts).",
        "id": "604",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "Password Policy Discovery",
        "techniqueid": "T1201"
    },
    {
        "description": "Adversaries may perform sudo caching and/or use the suoders file to elevate privileges. Adversaries may do this to execute commands as other users or spawn processes with higher privileges.",
        "id": "605",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Sudo and Sudo Caching",
        "techniqueid": "T1548.003"
    },
    {
        "description": "Adversaries may attempt to get a listing of accounts on a system or within an environment. This information can help adversaries determine which accounts exist to aid in follow-on behavior.",
        "id": "606",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Account Discovery",
        "techniqueid": "T1087"
    },
    {
        "description": "Adversaries may attempt to get a listing of local system accounts. This information can help adversaries determine which local accounts exist on a system to aid in follow-on behavior.",
        "id": "607",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Local Account",
        "techniqueid": "T1087.001"
    },
    {
        "description": "Adversaries may attempt to get a listing of domain accounts. This information can help adversaries determine which domain accounts exist to aid in follow-on behavior.",
        "id": "608",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Domain Account",
        "techniqueid": "T1087.002"
    },
    {
        "description": "Adversaries may manipulate accounts to maintain access to victim systems. Account manipulation may consist of any action that preserves adversary access to a compromised account, such as modifying credentials or permission groups. These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials. In order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain.",
        "id": "609",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Account Manipulation",
        "techniqueid": "T1098"
    },
    {
        "description": "Adversaries may abuse BITS jobs to persistently execute or clean up after malicious payloads. Windows Background Intelligent Transfer Service (BITS) is a low-bandwidth, asynchronous file transfer mechanism exposed through?Component Object Model?(COM). BITS is commonly used by updaters, messengers, and other applications preferred to operate in the background (using available idle bandwidth) without interrupting other networked applications. File transfer tasks are implemented as BITS jobs, which contain a queue of one or more file operations.",
        "id": "610",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "BITS Jobs",
        "techniqueid": "T1197"
    },
    {
        "description": "Adversaries can perform command and control between compromised hosts on potentially disconnected networks using removable media to transfer commands from system to system. Both systems would need to be compromised, with the likelihood that an Internet-connected system was compromised first and the second through lateral movement by?Replication Through Removable Media. Commands and files would be relayed from the disconnected system to the Internet-connected system to which the adversary has direct access.",
        "id": "611",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Communication Through Removable Media",
        "techniqueid": "T1092"
    },
    {
        "description": "Adversaries may create an account to maintain access to victim systems. With a sufficient level of access, creating such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.",
        "id": "612",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Create Account",
        "techniqueid": "T1136"
    },
    {
        "description": "Adversaries may create a domain account to maintain access to victim systems. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover user, administrator, and service accounts. With a sufficient level of access, the?net user /add /domain?command can be used to create a domain account.",
        "id": "613",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Domain Account",
        "techniqueid": "T1136.002"
    },
    {
        "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by accessibility features. Windows contains accessibility features that may be launched with a key combination before a user has logged in (ex: when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system.",
        "id": "614",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Accessibility Features",
        "techniqueid": "T1546.008"
    },
    {
        "description": "Adversaries may attempt to exfiltrate data over a different network medium than the command and control channel. If the command and control network is a wired Internet connection, the exfiltration may occur, for example, over a WiFi connection, modem, cellular data connection, Bluetooth, or another radio frequency (RF) channel.",
        "id": "615",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Exfiltration Over Other Network Medium",
        "techniqueid": "T1011"
    },
    {
        "description": "Adversaries may attempt to exfiltrate data over Bluetooth rather than the command and control channel. If the command and control network is a wired Internet connection, an attacker may opt to exfiltrate data using a Bluetooth communication channel.",
        "id": "616",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Exfiltration Over Bluetooth",
        "techniqueid": "T1011.001"
    },
    {
        "description": "Adversaries may use hidden users to mask the presence of user accounts they create. Every user account in macOS has a userID associated with it. When creating a user, you can specify the userID for that account.",
        "id": "617",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Hidden Users",
        "techniqueid": "T1564.002"
    },
    {
        "description": "Adversaries may impair command history logging to hide commands they run on a compromised system. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done.",
        "id": "618",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Impair Command History Logging",
        "techniqueid": "T1562.003"
    },
    {
        "description": "Adversaries may delete or remove built-in operating system data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery. Operating systems may contain features that can help fix corrupted systems, such as a backup catalog, volume shadow copies, and automatic repair features. Adversaries may disable or delete system recovery features to augment the effects of?Data Destruction?and?Data Encrypted for Impact.",
        "id": "619",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Inhibit System Recovery",
        "techniqueid": "T1490"
    },
    {
        "description": "Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows or pluggable authentication modules (PAM) on Unix-based systems, responsible for gathering, storing, and validating credentials.",
        "id": "620",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Modify Authentication Process",
        "techniqueid": "T1556"
    },
    {
        "description": "Adversaries may register malicious password filter dynamic link libraries (DLLs) into the authentication process to acquire user credentials as they are validated.",
        "id": "621",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Password Filter DLL",
        "techniqueid": "T1556.002"
    },
    {
        "description": "Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and to identify potential systems of interest for Lateral Movement. Networks often contain shared network drives and folders that enable users to access file directories on various systems across a network.",
        "id": "622",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Network Share Discovery",
        "techniqueid": "T1135"
    },
    {
        "description": "Adversaries may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password, from the operating system and software. Credentials can then be used to perform?Lateral Movement?and access restricted information.",
        "id": "623",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "OS Credential Dumping",
        "techniqueid": "T1003"
    },
    {
        "description": "Adversaries may attempt to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS). After a user logs on, the system generates and stores a variety of credential materials in LSASS process memory. These credential materials can be harvested by an administrative user or SYSTEM and used to conduct?Lateral Movement?using?Use Alternate Authentication Material.",
        "id": "624",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "LSASS Memory",
        "techniqueid": "T1003.001"
    },
    {
        "description": "Adversaries may attempt to extract credential material from the Security Account Manager (SAM) database either through in-memory techniques or through the Windows Registry where the SAM database is stored. The SAM is a database file that contains local accounts for the host, typically those found with the?net user?command. Enumerating the SAM database requires SYSTEM level access.",
        "id": "625",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Security Account Manager",
        "techniqueid": "T1003.002"
    },
    {
        "description": "Adversaries may attempt to access cached domain credentials used to allow authentication to occur in the event a domain controller is unavailable.",
        "id": "626",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Cached Domain Credentials",
        "techniqueid": "T1003.005"
    },
    {
        "description": "Adversaries may abuse netbooting to load an unauthorized network device operating system from a Trivial File Transfer Protocol (TFTP) server. TFTP boot (netbooting) is commonly used by network administrators to load configuration-controlled network device images from a centralized management server. Netbooting is one option in the boot sequence and can be used to centralize, manage, and control device images.",
        "id": "627",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "TFTP Boot",
        "techniqueid": "T1542.005"
    },
    {
        "description": "Adversaries may hijack a legitimate user��s remote desktop session to move laterally within an environment. Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).",
        "id": "628",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "RDP Hijacking",
        "techniqueid": "T1563.002"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.",
        "id": "629",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Remote Desktop Protocol",
        "techniqueid": "T1021.001"
    },
    {
        "description": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically requires being a member of an admin or otherwise privileged group on the remote system.",
        "id": "630",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Scheduled Task/Job",
        "techniqueid": "T1053"
    },
    {
        "description": "Adversaries may abuse the?at.exe?utility to perform task scheduling for initial or recurring execution of malicious code. The?at?utility exists as an executable within Windows for scheduling tasks at a specified time and date. Using?at?requires that the Task Scheduler service be running, and the user to be logged on as a member of the local Administrators group.",
        "id": "631",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "At (Windows)",
        "techniqueid": "T1053.002"
    },
    {
        "description": "Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The?schtasks?can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task.",
        "id": "632",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Scheduled Task",
        "techniqueid": "T1053.005"
    },
    {
        "description": "Adversaries may undermine security controls that will either warn users of untrusted activity or prevent execution of untrusted programs. Operating systems and security products may contain mechanisms to identify programs or websites as possessing some level of trust. Examples of such features would include a program being allowed to run because it is signed by a valid code signing certificate, a program prompting the user with a warning because it has an attribute set from being downloaded from the Internet, or getting an indication that you are about to connect to an untrusted site.",
        "id": "633",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Subvert Trust Controls",
        "techniqueid": "T1553"
    },
    {
        "description": "Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers. Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate. Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.",
        "id": "634",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Install Root Certificate",
        "techniqueid": "T1553.004"
    },
    {
        "description": "Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g.?Bash History), operating system or application-specific repositories (e.g.?Credentials in Registry), or other specialized files/artifacts (e.g.?Private Keys).",
        "id": "635",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Unsecured Credentials",
        "techniqueid": "T1552"
    },
    {
        "description": "Adversaries may search the bash command history on compromised systems for insecurely stored credentials. Bash keeps track of the commands users type on the command-line with the \"history\" utility. Once a user logs out, the history is flushed to the user��s?.bash_history?file. For each user, this file resides at the same location:?~/.bash_history. Typically, this file keeps track of the user��s last 500 commands. Users often type usernames and passwords on the command-line as parameters to programs, which then get saved to this file when they log out. Attackers can abuse this by looking through the file for potential credentials.",
        "id": "636",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Bash History",
        "techniqueid": "T1552.003"
    },
    {
        "description": "Adversaries may abuse Internet browser extensions to establish persistence access to victim systems. Browser extensions or plugins are small programs that can add functionality and customize aspects of Internet browsers. They can be installed directly or through a browser's app store and generally have access and permissions to everything that the browser can access.",
        "id": "637",
        "mitigation": "Limit Software Installation",
        "mitigationid": "M1033",
        "technique": "Browser Extensions",
        "techniqueid": "T1176"
    },
    {
        "description": "Adversaries may abuse Python commands and scripts for execution. Python is a very popular scripting/programming language, with capabilities to perform many functions. Python can be executed interactively from the command-line (via the?python.exe?interpreter) or via scripts (.py) that can be written and distributed to different systems. Python code can also be compiled into binary executables.",
        "id": "638",
        "mitigation": "Limit Software Installation",
        "mitigationid": "M1033",
        "technique": "Python",
        "techniqueid": "T1059.006"
    },
    {
        "description": "Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services. On macOS, launchd processes known as?Launch Daemon?and?Launch Agent?are run to finish system initialization and load user specific parameters.",
        "id": "639",
        "mitigation": "Limit Software Installation",
        "mitigationid": "M1033",
        "technique": "Create or Modify System Process",
        "techniqueid": "T1543"
    },
    {
        "description": "Adversaries may create or modify systemd services to repeatedly execute malicious payloads as part of persistence. The systemd service manager is commonly used for managing background daemon processes (also known as services) and other system resources. Systemd is the default initialization (init) system on many Linux distributions starting with Debian 8, Ubuntu 15.04, CentOS 7, RHEL 7, Fedora 15, and replaces legacy init systems including SysVinit and Upstart while remaining backwards compatible with the aforementioned init systems.",
        "id": "640",
        "mitigation": "Limit Software Installation",
        "mitigationid": "M1033",
        "technique": "Systemd Service",
        "techniqueid": "T1543.002"
    },
    {
        "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by accessibility features. Windows contains accessibility features that may be launched with a key combination before a user has logged in (ex: when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system.",
        "id": "641",
        "mitigation": "Limit Access to Resource Over Network",
        "mitigationid": "M1035",
        "technique": "Accessibility Features",
        "techniqueid": "T1546.008"
    },
    {
        "description": "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as?Windows Remote Management?can also be used externally.",
        "id": "642",
        "mitigation": "Limit Access to Resource Over Network",
        "mitigationid": "M1035",
        "technique": "External Remote Services",
        "techniqueid": "T1133"
    },
    {
        "description": "Adversaries may introduce computer accessories, computers, or networking hardware into a system or network that can be used as a vector to gain access. While public references of usage by APT groups are scarce, many penetration testers leverage hardware additions for initial access. Commercial and open source products are leveraged with capabilities such as passive network tapping , man-in-the middle encryption breaking , keystroke injection , kernel memory reading via DMA , adding new wireless access to an existing network , and others.",
        "id": "643",
        "mitigation": "Limit Access to Resource Over Network",
        "mitigationid": "M1035",
        "technique": "Hardware Additions",
        "techniqueid": "T1200"
    },
    {
        "description": "Adversaries may attempt to position themselves between two or more networked devices using a man-in-the-middle (MiTM) technique to support follow-on behaviors such as?Network Sniffing?or?Transmitted Data Manipulation. By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.",
        "id": "644",
        "mitigation": "Limit Access to Resource Over Network",
        "mitigationid": "M1035",
        "technique": "Man-in-the-Middle",
        "techniqueid": "T1557"
    },
    {
        "description": "Adversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such as?Network Sniffing?or?Transmitted Data Manipulation.",
        "id": "645",
        "mitigation": "Limit Access to Resource Over Network",
        "mitigationid": "M1035",
        "technique": "ARP Cache Poisoning",
        "techniqueid": "T1557.002"
    },
    {
        "description": "Adversaries may abuse netbooting to load an unauthorized network device operating system from a Trivial File Transfer Protocol (TFTP) server. TFTP boot (netbooting) is commonly used by network administrators to load configuration-controlled network device images from a centralized management server. Netbooting is one option in the boot sequence and can be used to centralize, manage, and control device images.",
        "id": "646",
        "mitigation": "Limit Access to Resource Over Network",
        "mitigationid": "M1035",
        "technique": "TFTP Boot",
        "techniqueid": "T1542.005"
    },
    {
        "description": "Adversaries may hijack a legitimate user��s remote desktop session to move laterally within an environment. Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).",
        "id": "647",
        "mitigation": "Limit Access to Resource Over Network",
        "mitigationid": "M1035",
        "technique": "RDP Hijacking",
        "techniqueid": "T1563.002"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.",
        "id": "648",
        "mitigation": "Limit Access to Resource Over Network",
        "mitigationid": "M1035",
        "technique": "Remote Desktop Protocol",
        "techniqueid": "T1021.001"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user.",
        "id": "649",
        "mitigation": "Limit Access to Resource Over Network",
        "mitigationid": "M1035",
        "technique": "SMB/Windows Admin Shares",
        "techniqueid": "T1021.002"
    },
    {
        "description": "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.",
        "id": "650",
        "mitigation": "Account Use Policies",
        "mitigationid": "M1036",
        "technique": "Brute Force",
        "techniqueid": "T1110"
    },
    {
        "description": "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.",
        "id": "651",
        "mitigation": "Account Use Policies",
        "mitigationid": "M1036",
        "technique": "Password Guessing",
        "techniqueid": "T1110.001"
    },
    {
        "description": "Adversaries may use a single or small list of commonly used passwords against many different accounts to attempt to acquire valid account credentials. Password spraying uses one password (e.g. 'Password01'), or a small list of commonly used passwords, that may match the complexity policy of the domain. Logins are attempted with that password against many different accounts on a network to avoid account lockouts that would normally occur when brute forcing a single account with many passwords.",
        "id": "652",
        "mitigation": "Account Use Policies",
        "mitigationid": "M1036",
        "technique": "Password Spraying",
        "techniqueid": "T1110.003"
    },
    {
        "description": "Adversaries may use credentials obtained from breach dumps of unrelated accounts to gain access to target accounts through credential overlap. Occasionally, large numbers of username and password pairs are dumped online when a website or service is compromised and the user account credentials accessed. The information may be useful to an adversary attempting to compromise accounts by taking advantage of the tendency for users to use the same passwords across personal and business accounts.",
        "id": "653",
        "mitigation": "Account Use Policies",
        "mitigationid": "M1036",
        "technique": "Credential Stuffing",
        "techniqueid": "T1110.004"
    },
    {
        "description": "Adversaries may impair command history logging to hide commands they run on a compromised system. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done.",
        "id": "654",
        "mitigation": "Environment Variable Permissions",
        "mitigationid": "M1039",
        "technique": "Impair Command History Logging",
        "techniqueid": "T1562.003"
    },
    {
        "description": "In addition to clearing system logs, an adversary may clear the command history of a compromised account to conceal the actions undertaken during an intrusion. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done.",
        "id": "655",
        "mitigation": "Environment Variable Permissions",
        "mitigationid": "M1039",
        "technique": "Clear Command History",
        "techniqueid": "T1070.003"
    },
    {
        "description": "Adversaries may abuse inter-process communication (IPC) mechanisms for local code or command execution. IPC is typically used by processes to share data, communicate with each other, or synchronize execution. IPC is also commonly used to avoid situations such as deadlocks, which occurs when processes are stuck in a cyclic waiting pattern.",
        "id": "656",
        "mitigation": "Behavior Prevention on Endpoint",
        "mitigationid": "M1040",
        "technique": "Inter-Process Communication",
        "techniqueid": "T1559"
    },
    {
        "description": "Adversaries may use Windows Dynamic Data Exchange (DDE) to execute arbitrary commands. DDE is a client-server protocol for one-time and/or continuous inter-process communication (IPC) between applications. Once a link is established, applications can autonomously exchange transactions consisting of strings, warm data links (notifications when a data item changes), hot data links (duplications of changes to a data item), and requests for command execution.",
        "id": "657",
        "mitigation": "Behavior Prevention on Endpoint",
        "mitigationid": "M1040",
        "technique": "Dynamic Data Exchange",
        "techniqueid": "T1559.002"
    },
    {
        "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process.",
        "id": "658",
        "mitigation": "Behavior Prevention on Endpoint",
        "mitigationid": "M1040",
        "technique": "Process Injection",
        "techniqueid": "T1055"
    },
    {
        "description": "Adversaries may inject dynamic-link libraries (DLLs) into processes in order to evade process-based defenses as well as possibly elevate privileges. DLL injection is a method of executing arbitrary code in the address space of a separate live process.",
        "id": "659",
        "mitigation": "Behavior Prevention on Endpoint",
        "mitigationid": "M1040",
        "technique": "Dynamic-link Library Injection",
        "techniqueid": "T1055.001"
    },
    {
        "description": "Adversaries may inject portable executables (PE) into processes in order to evade process-based defenses as well as possibly elevate privileges. PE injection is a method of executing arbitrary code in the address space of a separate live process.",
        "id": "660",
        "mitigation": "Behavior Prevention on Endpoint",
        "mitigationid": "M1040",
        "technique": "Portable Executable Injection",
        "techniqueid": "T1055.002"
    },
    {
        "description": "Adversaries may inject malicious code into suspended and hollowed processes in order to evade process-based defenses. Process hollowing is a method of executing arbitrary code in the address space of a separate live process.",
        "id": "661",
        "mitigation": "Behavior Prevention on Endpoint",
        "mitigationid": "M1040",
        "technique": "Process Hollowing",
        "techniqueid": "T1055.012"
    },
    {
        "description": "Adversaries may inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. Thread Execution Hijacking is a method of executing arbitrary code in the address space of a separate live process.",
        "id": "662",
        "mitigation": "Behavior Prevention on Endpoint",
        "mitigationid": "M1040",
        "technique": "Thread Execution Hijacking",
        "techniqueid": "T1055.003"
    },
    {
        "description": "Adversaries may inject malicious code into processes via the asynchronous procedure call (APC) queue in order to evade process-based defenses as well as possibly elevate privileges. APC injection is a method of executing arbitrary code in the address space of a separate live process.",
        "id": "663",
        "mitigation": "Behavior Prevention on Endpoint",
        "mitigationid": "M1040",
        "technique": "Asynchronous Procedure Call",
        "techniqueid": "T1055.004"
    },
    {
        "description": "Adversaries may inject malicious code into processes via thread local storage (TLS) callbacks in order to evade process-based defenses as well as possibly elevate privileges. TLS callback injection is a method of executing arbitrary code in the address space of a separate live process.",
        "id": "664",
        "mitigation": "Behavior Prevention on Endpoint",
        "mitigationid": "M1040",
        "technique": "Thread Local Storage",
        "techniqueid": "T1055.005"
    },
    {
        "description": "Adversaries may inject malicious code into processes via ptrace (process trace) system calls in order to evade process-based defenses as well as possibly elevate privileges. Ptrace system call injection is a method of executing arbitrary code in the address space of a separate live process.",
        "id": "665",
        "mitigation": "Behavior Prevention on Endpoint",
        "mitigationid": "M1040",
        "technique": "Ptrace System Calls",
        "techniqueid": "T1055.008"
    },
    {
        "description": "Adversaries may inject malicious code into processes via the /proc filesystem in order to evade process-based defenses as well as possibly elevate privileges. Proc memory injection is a method of executing arbitrary code in the address space of a separate live process.",
        "id": "666",
        "mitigation": "Behavior Prevention on Endpoint",
        "mitigationid": "M1040",
        "technique": "Proc Memory",
        "techniqueid": "T1055.009"
    },
    {
        "description": "Adversaries may inject malicious code into process via Extra Window Memory (EWM) in order to evade process-based defenses as well as possibly elevate privileges. EWM injection is a method of executing arbitrary code in the address space of a separate live process.",
        "id": "667",
        "mitigation": "Behavior Prevention on Endpoint",
        "mitigationid": "M1040",
        "technique": "Extra Window Memory Injection",
        "techniqueid": "T1055.011"
    },
    {
        "description": "Adversaries may inject malicious code into process via process doppelg?nging in order to evade process-based defenses as well as possibly elevate privileges. Process doppelg?nging is a method of executing arbitrary code in the address space of a separate live process.",
        "id": "668",
        "mitigation": "Behavior Prevention on Endpoint",
        "mitigationid": "M1040",
        "technique": "Process Doppelg?nging",
        "techniqueid": "T1055.013"
    },
    {
        "description": "Adversaries may inject malicious code into processes via VDSO hijacking in order to evade process-based defenses as well as possibly elevate privileges. Virtual dynamic shared object (vdso) hijacking is a method of executing arbitrary code in the address space of a separate live process.",
        "id": "669",
        "mitigation": "Behavior Prevention on Endpoint",
        "mitigationid": "M1040",
        "technique": "VDSO Hijacking",
        "techniqueid": "T1055.014"
    },
    {
        "description": "Adversaries may modify the SSH?authorized_keys?file to maintain persistence on a victim host. Linux distributions and macOS commonly use key-based authentication to secure the authentication process of SSH sessions for remote management. The?authorized_keys?file in SSH specifies the SSH keys that can be used for logging into the user account for which the file is configured. This file is usually found in the user's home directory under?<user-home>/.ssh/authorized_keys. Users may edit the system��s SSH config file to modify the directives PubkeyAuthentication and RSAAuthentication to the value \"yes\" to ensure public key and RSA authentication are enabled. The SSH config file is usually located under?/etc/ssh/sshd_config.",
        "id": "670",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "SSH Authorized Keys",
        "techniqueid": "T1098.004"
    },
    {
        "description": "Adversaries may modify plist files to automatically run an application when a user logs in. Starting in Mac OS X 10.7 (Lion), users can specify certain applications to be re-opened when a user logs into their machine after reboot. While this is usually done via a Graphical User Interface (GUI) on an app-by-app basis, there are property list files (plist) that contain this information as well located at?~/Library/Preferences/com.apple.loginwindow.plist?and?~/Library/Preferences/ByHost/com.apple.loginwindow.* .plist.",
        "id": "671",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Re-opened Applications",
        "techniqueid": "T1547.007"
    },
    {
        "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of?Unix Shell?while Windows installations include the?Windows Command Shell?and?PowerShell.",
        "id": "672",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Command and Scripting Interpreter",
        "techniqueid": "T1059"
    },
    {
        "description": "Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the?Start-Process?cmdlet which can be used to run an executable and the?Invoke-Command?cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).",
        "id": "673",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "PowerShell",
        "techniqueid": "T1059.001"
    },
    {
        "description": "Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as?Component Object Model?and the?Native API?through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.",
        "id": "674",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Visual Basic",
        "techniqueid": "T1059.005"
    },
    {
        "description": "Adversaries may abuse JavaScript and/or JScript for execution. JavaScript (JS) is a platform-agnostic scripting language (compiled just-in-time at runtime) commonly associated with scripts in webpages, though JS can be executed in runtime environments outside the browser.",
        "id": "675",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "JavaScript/JScript",
        "techniqueid": "T1059.007"
    },
    {
        "description": "Adversaries can perform command and control between compromised hosts on potentially disconnected networks using removable media to transfer commands from system to system. Both systems would need to be compromised, with the likelihood that an Internet-connected system was compromised first and the second through lateral movement by?Replication Through Removable Media. Commands and files would be relayed from the disconnected system to the Internet-connected system to which the adversary has direct access.",
        "id": "676",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Communication Through Removable Media",
        "techniqueid": "T1092"
    },
    {
        "description": "Adversaries may establish persistence by executing malicious content triggered by user inactivity. Screensavers are programs that execute after a configurable time of user inactivity and consist of Portable Executable (PE) files with a .scr file extension. The Windows screensaver application scrnsave.scr is located in?C:\\Windows\\System32\\, and?C:\\Windows\\sysWOW64\\?on 64-bit Windows systems, along with screensavers included with base Windows installations.",
        "id": "677",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Screensaver",
        "techniqueid": "T1546.002"
    },
    {
        "description": "Adversaries may gain persistence and elevate privileges by executing malicious content triggered by the Event Monitor Daemon (emond). Emond is a?Launch Daemon?that accepts events from various services, runs them through a simple rules engine, and takes action. The emond binary at?/sbin/emond?will load any rules from the?/etc/emond.d/rules/?directory and take action once an explicitly defined event takes place.",
        "id": "678",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Emond",
        "techniqueid": "T1546.014"
    },
    {
        "description": "Adversaries may attempt to exfiltrate data over Bluetooth rather than the command and control channel. If the command and control network is a wired Internet connection, an attacker may opt to exfiltrate data using a Bluetooth communication channel.",
        "id": "679",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Exfiltration Over Bluetooth",
        "techniqueid": "T1011.001"
    },
    {
        "description": "Adversaries may attempt to exfiltrate data via a physical medium, such as a removable drive. In certain circumstances, such as an air-gapped network compromise, exfiltration could occur via a physical medium or device introduced by a user. Such media could be an external hard drive, USB drive, cellular phone, MP3 player, or other removable storage and processing device. The physical medium or device could be used as the final exfiltration point or to hop between otherwise disconnected systems.",
        "id": "680",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Exfiltration Over Physical Medium",
        "techniqueid": "T1052"
    },
    {
        "description": "Adversaries may attempt to exfiltrate data over a USB connected physical device. In certain circumstances, such as an air-gapped network compromise, exfiltration could occur via a USB device introduced by a user. The USB device could be used as the final exfiltration point or to hop between otherwise disconnected systems.",
        "id": "681",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Exfiltration over USB",
        "techniqueid": "T1052.001"
    },
    {
        "description": "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as?Windows Remote Management?can also be used externally.",
        "id": "682",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "External Remote Services",
        "techniqueid": "T1133"
    },
    {
        "description": "Adversaries may carry out malicious operations using a virtual instance to avoid detection. A wide variety of virtualization technologies exist that allow for the emulation of a computer or computing environment. By running malicious code inside of a virtual instance, adversaries can hide artifacts associated with their behavior from security tools that are unable to monitor activity inside the virtual instance. Additionally, depending on the virtual networking implementation (ex: bridged adapter), network traffic generated by the virtual instance can be difficult to trace back to the compromised host as the IP address and hostname might not match known values.",
        "id": "683",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Run Virtual Instance",
        "techniqueid": "T1564.006"
    },
    {
        "description": "Adversaries may hide malicious Visual Basic for Applications (VBA) payloads embedded within MS Office documents by replacing the VBA source code with benign data.",
        "id": "684",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "vBA Stomping",
        "techniqueid": "T1564.007"
    },
    {
        "description": "Adversaries may abuse inter-process communication (IPC) mechanisms for local code or command execution. IPC is typically used by processes to share data, communicate with each other, or synchronize execution. IPC is also commonly used to avoid situations such as deadlocks, which occurs when processes are stuck in a cyclic waiting pattern.",
        "id": "685",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Inter-Process Communication",
        "techniqueid": "T1559"
    },
    {
        "description": "Adversaries may use Windows Dynamic Data Exchange (DDE) to execute arbitrary commands. DDE is a client-server protocol for one-time and/or continuous inter-process communication (IPC) between applications. Once a link is established, applications can autonomously exchange transactions consisting of strings, warm data links (notifications when a data item changes), hot data links (duplications of changes to a data item), and requests for command execution.",
        "id": "686",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Dynamic Data Exchange",
        "techniqueid": "T1559.002"
    },
    {
        "description": "Adversaries may attempt to position themselves between two or more networked devices using a man-in-the-middle (MiTM) technique to support follow-on behaviors such as?Network Sniffing?or?Transmitted Data Manipulation. By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.",
        "id": "687",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Man-in-the-Middle",
        "techniqueid": "T1557"
    },
    {
        "description": "By responding to LLMNR/NBT-NS network traffic, adversaries may spoof an authoritative source for name resolution to force communication with an adversary controlled system. This activity may be used to collect or relay authentication materials.",
        "id": "688",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "LLMNR/NBT-NS Poisoning and SMB Relay",
        "techniqueid": "T1557.001"
    },
    {
        "description": "Adversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such as?Network Sniffing?or?Transmitted Data Manipulation.",
        "id": "689",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "ARP Cache Poisoning",
        "techniqueid": "T1557.002"
    },
    {
        "description": "Adversaries may leverage Microsoft Office-based applications for persistence between startups. Microsoft Office is a fairly common application suite on Windows-based operating systems within an enterprise network. There are multiple mechanisms that can be used with Office for persistence when an Office-based application is started; this can include the use of Office Template Macros and add-ins.",
        "id": "690",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Office Application Startup",
        "techniqueid": "T1137"
    },
    {
        "description": "Adversaries may abuse Microsoft Office templates to obtain persistence on a compromised system. Microsoft Office contains templates that are part of common Office applications and are used to customize styles. The base templates within the application are used each time an application starts.",
        "id": "691",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Office Template Macros",
        "techniqueid": "T1137.001"
    },
    {
        "description": "Adversaries may take control of preexisting sessions with remote services to move laterally in an environment. Users may use valid credentials to log into a service specifically designed to accept remote connections, such as telnet, SSH, and RDP. When a user logs into a service, a session will be established that will allow them to maintain a continuous interaction with that service.",
        "id": "692",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Remote Service Session Hijacking",
        "techniqueid": "T1563"
    },
    {
        "description": "Adversaries may hijack a legitimate user's SSH session to move laterally within an environment. Secure Shell (SSH) is a standard means of remote access on Linux and macOS systems. It allows a user to connect to another system via an encrypted tunnel, commonly authenticating through a password, certificate or the use of an asymmetric encryption key pair.",
        "id": "693",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "SSH Hijacking",
        "techniqueid": "T1563.001"
    },
    {
        "description": "Adversaries may hijack a legitimate user��s remote desktop session to move laterally within an environment. Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).",
        "id": "694",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "RDP Hijacking",
        "techniqueid": "T1563.002"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.",
        "id": "695",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Remote Desktop Protocol",
        "techniqueid": "T1021.001"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to interact with remote machines by taking advantage of Distributed Component Object Model (DCOM). The adversary may then perform actions as the logged-on user.",
        "id": "696",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Distributed Component Object Model",
        "techniqueid": "T1021.003"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into remote machines using Secure Shell (SSH). The adversary may then perform actions as the logged-on user.",
        "id": "697",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "SSH",
        "techniqueid": "T1021.004"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to interact with remote systems using Windows Remote Management (WinRM). The adversary may then perform actions as the logged-on user.",
        "id": "698",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Windows Remote Management",
        "techniqueid": "T1021.006"
    },
    {
        "description": "Adversaries may move onto systems, possibly those on disconnected or air-gapped networks, by copying malware to removable media and taking advantage of Autorun features when the media is inserted into a system and executes. In the case of Lateral Movement, this may occur through modification of executable files stored on removable media or by copying malware and renaming it to look like a legitimate file to trick users into executing it on a separate system. In the case of Initial Access, this may occur through manual manipulation of the media, modification of systems used to initially format the media, or modification to the media's firmware itself.",
        "id": "699",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Replication Through Removable Media",
        "techniqueid": "T1091"
    },
    {
        "description": "Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed binaries. Binaries signed with trusted digital certificates can execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files.",
        "id": "700",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Signed Binary Proxy Execution",
        "techniqueid": "T1218"
    },
    {
        "description": "Adversaries may abuse CMSTP to proxy execution of malicious code. The Microsoft Connection Manager Profile Installer (CMSTP.exe) is a command-line program used to install Connection Manager service profiles. CMSTP.exe accepts an installation information file (INF) as a parameter and installs a service profile leveraged for remote access connections.",
        "id": "701",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "CMSTP",
        "techniqueid": "T1218.003"
    },
    {
        "description": "Adversaries may use InstallUtil to proxy execution of code through a trusted Windows utility. InstallUtil is a command-line utility that allows for installation and uninstallation of resources by executing specific installer components specified in .NET binaries. InstallUtil is digitally signed by Microsoft and located in the .NET directories on a Windows system:?C:\\Windows\\Microsoft.NET\\Framework\\v\\InstallUtil.exe?and?C:\\Windows\\Microsoft.NET\\Framework64\\v\\InstallUtil.exe.",
        "id": "702",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "InstallUtil",
        "techniqueid": "T1218.004"
    },
    {
        "description": "Adversaries may abuse mshta.exe to proxy execution of malicious .hta files and Javascript or VBScript through a trusted Windows utility. There are several examples of different types of threats leveraging mshta.exe during initial compromise and for execution of code",
        "id": "703",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Mshta",
        "techniqueid": "T1218.005"
    },
    {
        "description": "Adversaries may abuse Regsvcs and Regasm to proxy execution of code through a trusted Windows utility. Regsvcs and Regasm are Windows command-line utilities that are used to register .NET?Component Object Model?(COM) assemblies. Both are digitally signed by Microsoft.",
        "id": "704",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Regsvcs/Regasm",
        "techniqueid": "T1218.009"
    },
    {
        "description": "Adversaries may abuse odbcconf.exe to proxy execution of malicious payloads. Odbcconf.exe is a Windows utility that allows you to configure Open Database Connectivity (ODBC) drivers and data source names. Odbcconf.exe is digitally signed by Microsoft.",
        "id": "705",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Odbcconf",
        "techniqueid": "T1218.008"
    },
    {
        "description": "Adversaries may abuse verclsid.exe to proxy execution of malicious code. Verclsid.exe is known as the Extension CLSID Verification Host and is responsible for verifying each shell extension before they are used by Windows Explorer or the Windows Shell.",
        "id": "706",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Verclsid",
        "techniqueid": "T1218.012"
    },
    {
        "description": "Adversaries may create or modify references in Office document templates to conceal malicious code or force authentication attempts. Microsoft��s Office Open XML (OOXML) specification defines an XML-based format for Office documents (.docx, xlsx, .pptx) to replace older binary formats (.doc, .xls, .ppt). OOXML files are packed together ZIP archives compromised of various XML files, referred to as parts, containing properties that collectively define how a document is rendered.",
        "id": "707",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Template Injection",
        "techniqueid": "T1221"
    },
    {
        "description": "Adversaries may take advantage of trusted developer utilities to proxy execution of malicious payloads. There are many utilities used for software development related tasks that can be used to execute code in various forms to assist in development, debugging, and reverse engineering. These utilities may often be signed with legitimate certificates that allow them to execute on a system and proxy execution of malicious code through a trusted process that effectively bypasses application control solutions.",
        "id": "708",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Trusted Developer Utilities Proxy Execution",
        "techniqueid": "T1127"
    },
    {
        "description": "Adversaries may use MSBuild to proxy execution of code through a trusted Windows utility. MSBuild.exe (Microsoft Build Engine) is a software build platform used by Visual Studio. It handles XML formatted project files that define requirements for loading and building various platforms and configurations.",
        "id": "709",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "MSBuild",
        "techniqueid": "T1127.001"
    },
    {
        "description": "Adversaries may attempt to access the Cloud Instance Metadata API to collect credentials and other sensitive data.",
        "id": "710",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Cloud Instance Metadata API",
        "techniqueid": "T1552.005"
    },
    {
        "description": "Adversaries may modify or add LSASS drivers to obtain persistence on compromised systems. The Windows security subsystem is a set of components that manage and enforce the security policy for a computer or domain. The Local Security Authority (LSA) is the main component responsible for local security policy and user authentication. The LSA includes multiple dynamic link libraries (DLLs) associated with various other security functions, all of which run in the context of the LSA Subsystem Service (LSASS) lsass.exe process.",
        "id": "711",
        "mitigation": "Credential Access Protection",
        "mitigationid": "M1043",
        "technique": "LSASS Driver",
        "techniqueid": "T1547.008"
    },
    {
        "description": "Adversaries may make changes to the operating system of embedded network devices to weaken defenses and provide new capabilities for themselves. On such devices, the operating systems are typically monolithic and most of the device functionality and capabilities are contained within a single file.",
        "id": "712",
        "mitigation": "Credential Access Protection",
        "mitigationid": "M1043",
        "technique": "Modify System Image",
        "techniqueid": "T1601"
    },
    {
        "description": "Adversaries may modify the operating system of a network device to introduce new capabilities or weaken existing defenses. Some network devices are built with a monolithic architecture, where the entire operating system and most of the functionality of the device is contained within a single file. Adversaries may change this file in storage, to be loaded in a future boot, or in memory during runtime.",
        "id": "713",
        "mitigation": "Credential Access Protection",
        "mitigationid": "M1043",
        "technique": "Patch System Image",
        "techniqueid": "T1601.001"
    },
    {
        "description": "Adversaries may install an older version of the operating system of a network device to weaken security. Older operating system versions on network devices often have weaker encryption ciphers and, in general, fewer/less updated defensive features.",
        "id": "714",
        "mitigation": "Credential Access Protection",
        "mitigationid": "M1043",
        "technique": "Downgrade System Image",
        "techniqueid": "T1601.002"
    },
    {
        "description": "Adversaries may bridge network boundaries by compromising perimeter network devices. Breaching these devices may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.",
        "id": "715",
        "mitigation": "Credential Access Protection",
        "mitigationid": "M1043",
        "technique": "Network Boundary Bridging",
        "techniqueid": "T1599"
    },
    {
        "description": "Adversaries may bridge network boundaries by modifying a network device��s Network Address Translation (NAT) configuration. Malicious modifications to NAT may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.",
        "id": "716",
        "mitigation": "Credential Access Protection",
        "mitigationid": "M1043",
        "technique": "Network Address Translation Traversal",
        "techniqueid": "T1599.001"
    },
    {
        "description": "Adversaries may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password, from the operating system and software. Credentials can then be used to perform?Lateral Movement?and access restricted information.",
        "id": "717",
        "mitigation": "Credential Access Protection",
        "mitigationid": "M1043",
        "technique": "OS Credential Dumping",
        "techniqueid": "T1003"
    },
    {
        "description": "Adversaries may attempt to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS). After a user logs on, the system generates and stores a variety of credential materials in LSASS process memory. These credential materials can be harvested by an administrative user or SYSTEM and used to conduct?Lateral Movement?using?Use Alternate Authentication Material.",
        "id": "718",
        "mitigation": "Credential Access Protection",
        "mitigationid": "M1043",
        "technique": "LSASS Memory",
        "techniqueid": "T1003.001"
    },
    {
        "description": "Adversaries may modify or add LSASS drivers to obtain persistence on compromised systems. The Windows security subsystem is a set of components that manage and enforce the security policy for a computer or domain. The Local Security Authority (LSA) is the main component responsible for local security policy and user authentication. The LSA includes multiple dynamic link libraries (DLLs) associated with various other security functions, all of which run in the context of the LSA Subsystem Service (LSASS) lsass.exe process.",
        "id": "719",
        "mitigation": "Restrict Library Loading",
        "mitigationid": "M1044",
        "technique": "LSASS Driver",
        "techniqueid": "T1547.008"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.",
        "id": "720",
        "mitigation": "Restrict Library Loading",
        "mitigationid": "M1044",
        "technique": "Hijack Execution Flow",
        "techniqueid": "T1574"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the search order used to load DLLs. Windows systems use a common method to look for required DLLs to load into a program. Hijacking DLL loads may be for the purpose of establishing persistence as well as elevating privileges and/or evading restrictions on file execution.",
        "id": "721",
        "mitigation": "Restrict Library Loading",
        "mitigationid": "M1044",
        "technique": "DLL Search Order Hijacking",
        "techniqueid": "T1574.001"
    },
    {
        "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of?Unix Shell?while Windows installations include the?Windows Command Shell?and?PowerShell.",
        "id": "722",
        "mitigation": "Code Signing",
        "mitigationid": "M1045",
        "technique": "Command and Scripting Interpreter",
        "techniqueid": "T1059"
    },
    {
        "description": "Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the?Start-Process?cmdlet which can be used to run an executable and the?Invoke-Command?cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).",
        "id": "723",
        "mitigation": "Code Signing",
        "mitigationid": "M1045",
        "technique": "PowerShell",
        "techniqueid": "T1059.001"
    },
    {
        "description": "Adversaries may abuse AppleScript for execution. AppleScript is a macOS scripting language designed to control applications and parts of the OS via inter-application messages called AppleEvents. These AppleEvent messages can be sent independently or easily scripted with AppleScript. These events can locate open windows, send keystrokes, and interact with almost any open application locally or remotely.",
        "id": "724",
        "mitigation": "Code Signing",
        "mitigationid": "M1045",
        "technique": "AppleScript",
        "techniqueid": "T1059.002"
    },
    {
        "description": "Adversaries may modify client software binaries to establish persistent access to systems. Client software enables users to access services provided by a server. Common client software types are SSH clients, FTP clients, email clients, and web browsers.",
        "id": "725",
        "mitigation": "Code Signing",
        "mitigationid": "M1045",
        "technique": "Compromise Client Software Binary",
        "techniqueid": "T1554"
    },
    {
        "description": "Adversaries may establish persistence by executing malicious content triggered by the execution of tainted binaries. Mach-O binaries have a series of headers that are used to perform certain operations when a binary is loaded. The LC_LOAD_DYLIB header in a Mach-O binary tells macOS and OS X which dynamic libraries (dylibs) to load during execution time. These can be added ad-hoc to the compiled binary as long as adjustments are made to the rest of the fields and dependencies. There are tools available to perform these changes.",
        "id": "726",
        "mitigation": "Code Signing",
        "mitigationid": "M1045",
        "technique": "LC_LOAD_DYLIB Addition",
        "techniqueid": "T1546.006"
    },
    {
        "description": "Adversaries may gain persistence and elevate privileges by executing malicious content triggered by PowerShell profiles. A PowerShell profile (profile.ps1) is a script that runs when?PowerShell?starts and can be used as a logon script to customize user environments.",
        "id": "727",
        "mitigation": "Code Signing",
        "mitigationid": "M1045",
        "technique": "PowerShell Profile",
        "techniqueid": "T1546.013"
    },
    {
        "description": "Adversaries may implant cloud container images with malicious code to establish persistence. Amazon Web Service (AWS) Amazon Machine Images (AMI), Google Cloud Platform (GCP) Images, and Azure Images as well as popular container runtimes such as Docker can be implanted or backdoored. Depending on how the infrastructure is provisioned, this could provide persistent access if the infrastructure provisioning tool is instructed to always use the latest image.",
        "id": "728",
        "mitigation": "Code Signing",
        "mitigationid": "M1045",
        "technique": "Implant Container Image",
        "techniqueid": "T1525"
    },
    {
        "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.",
        "id": "729",
        "mitigation": "Code Signing",
        "mitigationid": "M1045",
        "technique": "Masquerading",
        "techniqueid": "T1036"
    },
    {
        "description": "Adversaries may attempt to mimic features of valid code signatures to increase the chance of deceiving a user, analyst, or tool. Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with. Adversaries can copy the metadata and signature information from a signed program, then use it as a template for an unsigned program. Files with invalid code signatures will fail digital signature validation checks, but they may appear more legitimate to users and security tools may improperly handle these files.",
        "id": "730",
        "mitigation": "Code Signing",
        "mitigationid": "M1045",
        "technique": "Invalid Code Signature",
        "techniqueid": "T1036.001"
    },
    {
        "description": "Adversaries may match or approximate the name or location of legitimate files when naming/placing their files. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). Alternatively, the filename given may be a close approximation of legitimate programs or something innocuous.",
        "id": "731",
        "mitigation": "Code Signing",
        "mitigationid": "M1045",
        "technique": "Match Legitimate Name or Location",
        "techniqueid": "T1036.005"
    },
    {
        "description": "Adversaries may make changes to the operating system of embedded network devices to weaken defenses and provide new capabilities for themselves. On such devices, the operating systems are typically monolithic and most of the device functionality and capabilities are contained within a single file.",
        "id": "732",
        "mitigation": "Code Signing",
        "mitigationid": "M1045",
        "technique": "Modify System Image",
        "techniqueid": "T1601"
    },
    {
        "description": "Adversaries may modify the operating system of a network device to introduce new capabilities or weaken existing defenses. Some network devices are built with a monolithic architecture, where the entire operating system and most of the functionality of the device is contained within a single file. Adversaries may change this file in storage, to be loaded in a future boot, or in memory during runtime.",
        "id": "733",
        "mitigation": "Code Signing",
        "mitigationid": "M1045",
        "technique": "Patch System Image",
        "techniqueid": "T1601.001"
    },
    {
        "description": "Adversaries may install an older version of the operating system of a network device to weaken security. Older operating system versions on network devices often have weaker encryption ciphers and, in general, fewer/less updated defensive features.",
        "id": "734",
        "mitigation": "Code Signing",
        "mitigationid": "M1045",
        "technique": "Downgrade System Image",
        "techniqueid": "T1601.002"
    },
    {
        "description": "Adversaries may abuse legitimate extensible development features of servers to establish persistent access to systems. Enterprise server applications may include features that allow developers to write and install software or scripts to extend the functionality of the main application. Adversaries may install malicious components to extend and abuse server applications.",
        "id": "735",
        "mitigation": "Code Signing",
        "mitigationid": "M1045",
        "technique": "Server Software Component",
        "techniqueid": "T1505"
    },
    {
        "description": "Adversaries may abuse Microsoft transport agents to establish persistent access to systems. Microsoft Exchange transport agents can operate on email messages passing through the transport pipeline to perform various tasks such as filtering spam, filtering malicious attachments, journaling, or adding a corporate signature to the end of all outgoing emails. Transport agents can be written by application developers and then compiled to .NET assemblies that are subsequently registered with the Exchange server. Transport agents will be invoked during a specified stage of email processing and carry out developer defined tasks.",
        "id": "736",
        "mitigation": "Code Signing",
        "mitigationid": "M1045",
        "technique": "Transport Agent",
        "techniqueid": "T1505.002"
    },
    {
        "description": "Adversaries may abuse SQL stored procedures to establish persistent access to systems. SQL Stored Procedures are code that can be saved and reused so that database users do not waste time rewriting frequently used SQL queries. Stored procedures can be invoked via SQL statements to the database using the procedure name or via defined events (e.g. when a SQL server application is started/restarted).",
        "id": "737",
        "mitigation": "Code Signing",
        "mitigationid": "M1045",
        "technique": "SQL Stored Procedures",
        "techniqueid": "T1505.001"
    },
    {
        "description": "Adversaries may overwrite or corrupt the flash memory contents of system BIOS or other firmware in devices attached to a system in order to render them inoperable or unable to boot. Firmware is software that is loaded and executed from non-volatile memory on hardware devices in order to initialize and manage device functionality. These devices could include the motherboard, hard drive, or video cards.",
        "id": "738",
        "mitigation": "Boot Integrity",
        "mitigationid": "M1046",
        "technique": "Firmware Corruption",
        "techniqueid": "T1495"
    },
    {
        "description": "Adversaries may make changes to the operating system of embedded network devices to weaken defenses and provide new capabilities for themselves. On such devices, the operating systems are typically monolithic and most of the device functionality and capabilities are contained within a single file.",
        "id": "739",
        "mitigation": "Boot Integrity",
        "mitigationid": "M1046",
        "technique": "Modify System Image",
        "techniqueid": "T1601"
    },
    {
        "description": "Adversaries may modify the operating system of a network device to introduce new capabilities or weaken existing defenses. Some network devices are built with a monolithic architecture, where the entire operating system and most of the functionality of the device is contained within a single file. Adversaries may change this file in storage, to be loaded in a future boot, or in memory during runtime.",
        "id": "740",
        "mitigation": "Boot Integrity",
        "mitigationid": "M1046",
        "technique": "Patch System Image",
        "techniqueid": "T1601.001"
    },
    {
        "description": "Adversaries may install an older version of the operating system of a network device to weaken security. Older operating system versions on network devices often have weaker encryption ciphers and, in general, fewer/less updated defensive features.",
        "id": "741",
        "mitigation": "Boot Integrity",
        "mitigationid": "M1046",
        "technique": "Downgrade System Image",
        "techniqueid": "T1601.002"
    },
    {
        "description": "Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control.",
        "id": "742",
        "mitigation": "Boot Integrity",
        "mitigationid": "M1046",
        "technique": "Pre-OS Boot",
        "techniqueid": "T1542"
    },
    {
        "description": "Adversaries may modify system firmware to persist on systems.The BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer.",
        "id": "743",
        "mitigation": "Boot Integrity",
        "mitigationid": "M1046",
        "technique": "System Firmware",
        "techniqueid": "T1542.001"
    },
    {
        "description": "Adversaries may use bootkits to persist on systems. Bootkits reside at a layer below the operating system and may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.",
        "id": "744",
        "mitigation": "Boot Integrity",
        "mitigationid": "M1046",
        "technique": "Bootkit",
        "techniqueid": "T1542.003"
    },
    {
        "description": "Adversaries may abuse netbooting to load an unauthorized network device operating system from a Trivial File Transfer Protocol (TFTP) server. TFTP boot (netbooting) is commonly used by network administrators to load configuration-controlled network device images from a centralized management server. Netbooting is one option in the boot sequence and can be used to centralize, manage, and control device images.",
        "id": "745",
        "mitigation": "Boot Integrity",
        "mitigationid": "M1046",
        "technique": "TFTP Boot",
        "techniqueid": "T1542.005"
    },
    {
        "description": "Adversaries may abuse the ROM Monitor (ROMMON) by loading an unauthorized firmware with adversary code to provide persistent access and manipulate device behavior that is difficult to detect.",
        "id": "746",
        "mitigation": "Boot Integrity",
        "mitigationid": "M1046",
        "technique": "ROMMONkit",
        "techniqueid": "T1542.004"
    },
    {
        "description": "Adversaries may manipulate hardware components in products prior to receipt by a final consumer for the purpose of data or system compromise. By modifying hardware or firmware in the supply chain, adversaries can insert a backdoor into consumer networks that may be difficult to detect and give the adversary a high degree of control over the system. Hardware backdoors may be inserted into various devices, such as servers, workstations, network infrastructure, or peripherals.",
        "id": "747",
        "mitigation": "Boot Integrity",
        "mitigationid": "M1046",
        "technique": "Compromise Hardware Supply Chain",
        "techniqueid": "T1195.003"
    },
    {
        "description": "Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk. An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.",
        "id": "748",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Abuse Elevation Control Mechanism",
        "techniqueid": "T1548"
    },
    {
        "description": "Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.",
        "id": "749",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Bypass User Account Control",
        "techniqueid": "T1548.002"
    },
    {
        "description": "Adversaries may attempt to get a listing of cloud accounts. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application.",
        "id": "750",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Cloud Account",
        "techniqueid": "T1087.004"
    },
    {
        "description": "Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services. On macOS, launchd processes known as?Launch Daemon?and?Launch Agent?are run to finish system initialization and load user specific parameters.",
        "id": "751",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Create or Modify System Process",
        "techniqueid": "T1543"
    },
    {
        "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry. Service configurations can be modified using utilities such as sc.exe and?Reg.",
        "id": "752",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Windows Service",
        "techniqueid": "T1543.003"
    },
    {
        "description": "Adversaries may access data objects from improperly secured cloud storage.",
        "id": "753",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Data from Cloud Storage Object",
        "techniqueid": "T1530"
    },
    {
        "description": "Adversaries may modify the configuration settings of a domain to evade defenses and/or escalate privileges in domain environments. Domains provide a centralized means of managing how computer resources (ex: computers, user accounts) can act, and interact with each other, on a network. The policy of the domain also includes configuration settings that may apply between domains in a multi-domain/forest environment. Modifications to domain settings may include altering domain Group Policy Objects (GPOs) or changing trust settings for domains, including federation trusts.",
        "id": "754",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Domain Policy Modification",
        "techniqueid": "T1484"
    },
    {
        "description": "Adversaries may modify Group Policy Objects (GPOs) to subvert the intended discretionary access controls for a domain, usually with the intention of escalating privileges on the domain. Group policy allows for centralized management of user and computer settings in Active Directory (AD). GPOs are containers for group policy settings made up of files stored within a predicable network path?\\<DOMAIN>\\SYSVOL\\<DOMAIN>\\Policies\\.",
        "id": "755",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Group Policy Modification",
        "techniqueid": "T1484.001"
    },
    {
        "description": "Adversaries may attempt to gather information on domain trust relationships that may be used to identify lateral movement opportunities in Windows multi-domain/forest environments. Domain trusts provide a mechanism for a domain to allow access to resources based on the authentication procedures of another domain. Domain trusts allow the users of the trusted domain to access resources in the trusting domain. The information discovered may help the adversary conduct?SID-History Injection,?Pass the Ticket, and?Kerberoasting. Domain trusts can be enumerated using the?DSEnumerateDomainTrusts()?Win32 API call, .NET methods, and LDAP. The Windows utility?Nltest?is known to be used by adversaries to enumerate domain trusts.",
        "id": "756",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Domain Trust Discovery",
        "techniqueid": "T1482"
    },
    {
        "description": "Adversaries may establish persistence by executing malicious content triggered by the execution of tainted binaries. Mach-O binaries have a series of headers that are used to perform certain operations when a binary is loaded. The LC_LOAD_DYLIB header in a Mach-O binary tells macOS and OS X which dynamic libraries (dylibs) to load during execution time. These can be added ad-hoc to the compiled binary as long as adjustments are made to the rest of the fields and dependencies. There are tools available to perform these changes.",
        "id": "757",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "LC_LOAD_DYLIB Addition",
        "techniqueid": "T1546.006"
    },
    {
        "description": "Adversaries may forge credential materials that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies, tokens, or other materials to authenticate and authorize user access.",
        "id": "758",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Forge Web Credentials",
        "techniqueid": "T1606"
    },
    {
        "description": "Adversaries may forge web cookies that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies to authenticate and authorize user access.",
        "id": "759",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Web Cookies",
        "techniqueid": "T1606.001"
    },
    {
        "description": "An adversary may forge SAML tokens with any permissions claims and lifetimes if they possess a valid SAML token-signing certificate. The default lifetime of a SAML token is one hour, but the validity period can be specified in the?NotOnOrAfter?value of the?conditions ...?element in a token. This value can be changed using the?AccessTokenLifetime?in a?LifetimeTokenPolicy. Forged SAML tokens enable adversaries to authenticate across services that use SAML 2.0 as an SSO (single sign-on) mechanism.",
        "id": "760",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "SAML Tokens",
        "techniqueid": "T1606.002"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.",
        "id": "761",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Hijack Execution Flow",
        "techniqueid": "T1574"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the binaries used by services. Adversaries may use flaws in the permissions of Windows services to replace the binary that is executed upon service start. These service processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.",
        "id": "762",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Services File Permissions Weakness",
        "techniqueid": "T1574.010"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the binaries used by an installer. These processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.",
        "id": "763",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Executable Installer File Permissions Weakness",
        "techniqueid": "T1574.005"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking vulnerable file path references. Adversaries can take advantage of paths that lack surrounding quotations by placing an executable in a higher level directory within the path, so that Windows will choose the adversary's executable to launch.",
        "id": "764",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Path Interception by Unquoted Path",
        "techniqueid": "T1574.009"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking environment variables used to load libraries. Adversaries may place a program in an earlier entry in the list of directories stored in the PATH environment variable, which Windows will then execute when it searches sequentially through that PATH listing in search of the binary that was called from a script or the command line.",
        "id": "765",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Path Interception by PATH Environment Variable",
        "techniqueid": "T1574.007"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the search order used to load other programs. Because some programs do not call other programs using the full path, adversaries may place their own file in the directory where the calling program is located, causing the operating system to launch their malicious software at the request of the calling program.",
        "id": "766",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Path Interception by Search Order Hijacking",
        "techniqueid": "T1574.008"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the search order used to load DLLs. Windows systems use a common method to look for required DLLs to load into a program. Hijacking DLL loads may be for the purpose of establishing persistence as well as elevating privileges and/or evading restrictions on file execution.",
        "id": "767",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "DLL Search Order Hijacking",
        "techniqueid": "T1574.001"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the library manifest used to load DLLs. Adversaries may take advantage of vague references in the library manifest of a program by replacing a legitimate library with a malicious one, causing the operating system to load their malicious library when it is called for by the victim program.",
        "id": "768",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "DLL Side-Loading",
        "techniqueid": "T1574.002"
    },
    {
        "description": "Adversaries may disable or modify a firewall within a cloud environment to bypass controls that limit access to cloud resources. Cloud firewalls are separate from system firewalls that are described in?Disable or Modify System Firewall.",
        "id": "769",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Disable or Modify Cloud Firewall",
        "techniqueid": "T1562.007"
    },
    {
        "description": "Adversaries may hijack a legitimate user��s remote desktop session to move laterally within an environment. Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).",
        "id": "770",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "RDP Hijacking",
        "techniqueid": "T1563.002"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.",
        "id": "771",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Remote Desktop Protocol",
        "techniqueid": "T1021.001"
    },
    {
        "description": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically requires being a member of an admin or otherwise privileged group on the remote system.",
        "id": "772",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Scheduled Task/Job",
        "techniqueid": "T1053"
    },
    {
        "description": "Adversaries may abuse the?at.exe?utility to perform task scheduling for initial or recurring execution of malicious code. The?at?utility exists as an executable within Windows for scheduling tasks at a specified time and date. Using?at?requires that the Task Scheduler service be running, and the user to be logged on as a member of the local Administrators group.",
        "id": "773",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "At (Windows)",
        "techniqueid": "T1053.002"
    },
    {
        "description": "Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The?schtasks?can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task.",
        "id": "774",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Scheduled Task",
        "techniqueid": "T1053.005"
    },
    {
        "description": "Adversaries can steal user application access tokens as a means of acquiring credentials to access remote systems and resources. This can occur through social engineering and typically requires user action to grant access.",
        "id": "775",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Steal Application Access Token",
        "techniqueid": "T1528"
    },
    {
        "description": "Adversaries may reveal credentials of accounts that have disabled Kerberos preauthentication by?Password Cracking?Kerberos messages.",
        "id": "776",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "AS-REP Roasting",
        "techniqueid": "T1558.004"
    },
    {
        "description": "Adversaries may use stolen application access tokens to bypass the typical authentication process and access restricted accounts, information, or services on remote systems. These tokens are typically stolen from users and used in lieu of login credentials.",
        "id": "777",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Application Access Token",
        "techniqueid": "T1550.001"
    },
    {
        "description": "Adversaries may abuse inter-process communication (IPC) mechanisms for local code or command execution. IPC is typically used by processes to share data, communicate with each other, or synchronize execution. IPC is also commonly used to avoid situations such as deadlocks, which occurs when processes are stuck in a cyclic waiting pattern.",
        "id": "778",
        "mitigation": "Application Isolation and Sandboxing",
        "mitigationid": "M1048",
        "technique": "Inter-Process Communication",
        "techniqueid": "T1559"
    },
    {
        "description": "Adversaries may use Windows Dynamic Data Exchange (DDE) to execute arbitrary commands. DDE is a client-server protocol for one-time and/or continuous inter-process communication (IPC) between applications. Once a link is established, applications can autonomously exchange transactions consisting of strings, warm data links (notifications when a data item changes), hot data links (duplications of changes to a data item), and requests for command execution.",
        "id": "779",
        "mitigation": "Application Isolation and Sandboxing",
        "mitigationid": "M1048",
        "technique": "Dynamic Data Exchange",
        "techniqueid": "T1559.002"
    },
    {
        "description": "Adversaries may use the Windows Component Object Model (COM) for local code execution. COM is an inter-process communication (IPC) component of the native Windows application programming interface (API) that enables interaction between software objects, or executable code that implements one or more interfaces. Through COM, a client object can call methods of server objects, which are typically binary Dynamic Link Libraries (DLL) or executables (EXE).",
        "id": "780",
        "mitigation": "Application Isolation and Sandboxing",
        "mitigationid": "M1048",
        "technique": "Component Object Model",
        "techniqueid": "T1559.001"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to interact with remote machines by taking advantage of Distributed Component Object Model (DCOM). The adversary may then perform actions as the logged-on user.",
        "id": "781",
        "mitigation": "Application Isolation and Sandboxing",
        "mitigationid": "M1048",
        "technique": "Distributed Component Object Model",
        "techniqueid": "T1021.003"
    },
    {
        "description": "Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk. An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.",
        "id": "782",
        "mitigation": "User Account Control",
        "mitigationid": "M1052",
        "technique": "Abuse Elevation Control Mechanism",
        "techniqueid": "T1548"
    },
    {
        "description": "Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.",
        "id": "783",
        "mitigation": "User Account Control",
        "mitigationid": "M1052",
        "technique": "Bypass User Account Control",
        "techniqueid": "T1548.002"
    },
    {
        "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims. The Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time. For example, the application shimming feature allows developers to apply fixes to applications (without rewriting code) that were created for Windows XP so that it will work with Windows 10.",
        "id": "784",
        "mitigation": "User Account Control",
        "mitigationid": "M1052",
        "technique": "Application Shimming",
        "techniqueid": "T1546.011"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.",
        "id": "785",
        "mitigation": "User Account Control",
        "mitigationid": "M1052",
        "technique": "Hijack Execution Flow",
        "techniqueid": "T1574"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the binaries used by services. Adversaries may use flaws in the permissions of Windows services to replace the binary that is executed upon service start. These service processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.",
        "id": "786",
        "mitigation": "User Account Control",
        "mitigationid": "M1052",
        "technique": "Services File Permissions Weakness",
        "techniqueid": "T1574.010"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the binaries used by an installer. These processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.",
        "id": "787",
        "mitigation": "User Account Control",
        "mitigationid": "M1052",
        "technique": "Executable Installer File Permissions Weakness",
        "techniqueid": "T1574.005"
    },
    {
        "description": "Adversaries may breach or otherwise leverage organizations who have access to intended victims. Access through trusted third party relationship exploits an existing connection that may not be protected or receives less scrutiny than standard mechanisms of gaining access to a network.",
        "id": "788",
        "mitigation": "User Account Control",
        "mitigationid": "M1052",
        "technique": "Trusted Relationship",
        "techniqueid": "T1199"
    },
    {
        "description": "Adversaries may \"pass the hash\" using stolen password hashes to move laterally within an environment, bypassing normal system access controls. Pass the hash (PtH) is a method of authenticating as a user without having access to the user's cleartext password. This method bypasses standard authentication steps that require a cleartext password, moving directly into the portion of the authentication that uses the password hash. In this technique, valid password hashes for the account being used are captured using a Credential Access technique. Captured hashes are used with PtH to authenticate as that user. Once authenticated, PtH may be used to perform actions on local or remote systems.",
        "id": "789",
        "mitigation": "User Account Control",
        "mitigationid": "M1052",
        "technique": "Pass the Hash",
        "techniqueid": "T1550.002"
    },
    {
        "description": "Adversaries may collect data related to managed devices from configuration repositories. Configuration repositories are used by management systems in order to configure, manage, and control data on remote systems. Configuration repositories may also facilitate remote access and administration of devices.",
        "id": "790",
        "mitigation": "Software Configuration",
        "mitigationid": "M1054",
        "technique": "Data from Configuration Repository",
        "techniqueid": "T1602"
    },
    {
        "description": "Adversaries may target the Management Information Base (MIB) to collect and/or mine valuable information in a network managed using Simple Network Management Protocol (SNMP).",
        "id": "791",
        "mitigation": "Software Configuration",
        "mitigationid": "M1054",
        "technique": "SNMP (MIB Dump)",
        "techniqueid": "T1602.001"
    },
    {
        "description": "Adversaries may access network configuration files to collect sensitive data about the device and the network. The network configuration is a file containing parameters that determine the operation of the device. The device typically stores an in-memory copy of the configuration while operating, and a separate configuration on non-volatile storage to load after device reset. Adversaries can inspect the configuration files to reveal information about the target network and its layout, the network device and its software, or identifying legitimate accounts and credentials for later use.",
        "id": "792",
        "mitigation": "Software Configuration",
        "mitigationid": "M1054",
        "technique": "Network Device Configuration Dump",
        "techniqueid": "T1602.002"
    },
    {
        "description": "Adversaries may gain persistence and elevate privileges by executing malicious content triggered by PowerShell profiles. A PowerShell profile (profile.ps1) is a script that runs when?PowerShell?starts and can be used as a logon script to customize user environments.",
        "id": "793",
        "mitigation": "Software Configuration",
        "mitigationid": "M1054",
        "technique": "PowerShell Profile",
        "techniqueid": "T1546.013"
    },
    {
        "description": "Adversaries may forge credential materials that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies, tokens, or other materials to authenticate and authorize user access.",
        "id": "794",
        "mitigation": "Software Configuration",
        "mitigationid": "M1054",
        "technique": "Forge Web Credentials",
        "techniqueid": "T1606"
    },
    {
        "description": "Adversaries may forge web cookies that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies to authenticate and authorize user access.",
        "id": "795",
        "mitigation": "Software Configuration",
        "mitigationid": "M1054",
        "technique": "Web Cookies",
        "techniqueid": "T1606.001"
    },
    {
        "description": "An adversary may attempt to block indicators or events typically captured by sensors from being gathered and analyzed. This could include maliciously redirecting or even disabling host-based sensors, such as Event Tracing for Windows (ETW), by tampering settings that control the collection and flow of event telemetry. These settings may be stored on the system in configuration files and/or in the Registry as well as being accessible via administrative utilities such as?PowerShell?or?Windows Management Instrumentation.",
        "id": "796",
        "mitigation": "Software Configuration",
        "mitigationid": "M1054",
        "technique": "Indicator Blocking",
        "techniqueid": "T1562.006"
    },
    {
        "description": "Adversaries may abuse inter-process communication (IPC) mechanisms for local code or command execution. IPC is typically used by processes to share data, communicate with each other, or synchronize execution. IPC is also commonly used to avoid situations such as deadlocks, which occurs when processes are stuck in a cyclic waiting pattern.",
        "id": "797",
        "mitigation": "Software Configuration",
        "mitigationid": "M1054",
        "technique": "Inter-Process Communication",
        "techniqueid": "T1559"
    },
    {
        "description": "Adversaries may use Windows Dynamic Data Exchange (DDE) to execute arbitrary commands. DDE is a client-server protocol for one-time and/or continuous inter-process communication (IPC) between applications. Once a link is established, applications can autonomously exchange transactions consisting of strings, warm data links (notifications when a data item changes), hot data links (duplications of changes to a data item), and requests for command execution.",
        "id": "798",
        "mitigation": "Software Configuration",
        "mitigationid": "M1054",
        "technique": "Dynamic Data Exchange",
        "techniqueid": "T1559.002"
    },
    {
        "description": "Adversaries may leverage Microsoft Office-based applications for persistence between startups. Microsoft Office is a fairly common application suite on Windows-based operating systems within an enterprise network. There are multiple mechanisms that can be used with Office for persistence when an Office-based application is started; this can include the use of Office Template Macros and add-ins.",
        "id": "799",
        "mitigation": "Software Configuration",
        "mitigationid": "M1054",
        "technique": "Office Application Startup",
        "techniqueid": "T1137"
    },
    {
        "description": "Adversaries may abuse the Microsoft Office \"Office Test\" Registry key to obtain persistence on a compromised system. An Office Test Registry location exists that allows a user to specify an arbitrary DLL that will be executed every time an Office application is started. This Registry key is thought to be used by Microsoft to load DLLs for testing and debugging purposes while developing Office applications. This Registry key is not created by default during an Office installation.",
        "id": "800",
        "mitigation": "Software Configuration",
        "mitigationid": "M1054",
        "technique": "Office Test",
        "techniqueid": "T1137.002"
    },
    {
        "description": "An adversary may steal web application or service session cookies and use them to gain access web applications or Internet services as an authenticated user without needing credentials. Web applications and services often use session cookies as an authentication token after a user has authenticated to a website.",
        "id": "801",
        "mitigation": "Software Configuration",
        "mitigationid": "M1054",
        "technique": "Steal Web Session Cookie",
        "techniqueid": "T1539"
    },
    {
        "description": "Adversaries may undermine security controls that will either warn users of untrusted activity or prevent execution of untrusted programs. Operating systems and security products may contain mechanisms to identify programs or websites as possessing some level of trust. Examples of such features would include a program being allowed to run because it is signed by a valid code signing certificate, a program prompting the user with a warning because it has an attribute set from being downloaded from the Internet, or getting an indication that you are about to connect to an untrusted site.",
        "id": "802",
        "mitigation": "Software Configuration",
        "mitigationid": "M1054",
        "technique": "Subvert Trust Controls",
        "techniqueid": "T1553"
    },
    {
        "description": "Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers. Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate. Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.",
        "id": "803",
        "mitigation": "Software Configuration",
        "mitigationid": "M1054",
        "technique": "Install Root Certificate",
        "techniqueid": "T1553.004"
    },
    {
        "description": "Adversaries may create cloud instances in unused geographic service regions in order to evade detection. Access is usually obtained through compromising accounts used to manage cloud infrastructure.",
        "id": "804",
        "mitigation": "Software Configuration",
        "mitigationid": "M1054",
        "technique": "Unused/Unsupported Cloud Regions",
        "techniqueid": "T1535"
    },
    {
        "description": "Adversaries can use stolen session cookies to authenticate to web applications and services. This technique bypasses some multi-factor authentication protocols since the session is already authenticated.",
        "id": "805",
        "mitigation": "Software Configuration",
        "mitigationid": "M1054",
        "technique": "Web Session Cookie",
        "techniqueid": "T1550.004"
    },
    {
        "description": "Adversaries may manipulate accounts to maintain access to victim systems. Account manipulation may consist of any action that preserves adversary access to a compromised account, such as modifying credentials or permission groups. These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials. In order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain.",
        "id": "806",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Account Manipulation",
        "techniqueid": "T1098"
    },
    {
        "description": "Adversaries may add adversary-controlled credentials to a cloud account to maintain persistent access to victim accounts and instances within the environment.",
        "id": "807",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Additional Cloud Credentials",
        "techniqueid": "T1098.001"
    },
    {
        "description": "Adversaries may create an account to maintain access to victim systems. With a sufficient level of access, creating such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.",
        "id": "808",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Create Account",
        "techniqueid": "T1136"
    },
    {
        "description": "Adversaries may create a domain account to maintain access to victim systems. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover user, administrator, and service accounts. With a sufficient level of access, the?net user /add /domain?command can be used to create a domain account.",
        "id": "809",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Domain Account",
        "techniqueid": "T1136.002"
    },
    {
        "description": "Adversaries may create a cloud account to maintain access to victim systems. With a sufficient level of access, such accounts may be used to establish secondary credentialed access that does not require persistent remote access tools to be deployed on the system.",
        "id": "810",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Cloud Account",
        "techniqueid": "T1136.003"
    },
    {
        "description": "Adversaries may steal data by exfiltrating it over a different protocol than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.",
        "id": "811",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Exfiltration Over Alternative Protocol",
        "techniqueid": "T1048"
    },
    {
        "description": "Adversaries may steal data by exfiltrating it over a symmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.",
        "id": "812",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Exfiltration Over Symmetric Encrypted Non-C2 Protocol",
        "techniqueid": "T1048.001"
    },
    {
        "description": "Adversaries may steal data by exfiltrating it over an asymmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.",
        "id": "813",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Exfiltration Over Asymmetric Encrypted Non-C2 Protocol",
        "techniqueid": "T1048.002"
    },
    {
        "description": "Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.",
        "id": "814",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol",
        "techniqueid": "T1048.003"
    },
    {
        "description": "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as?Windows Remote Management?can also be used externally.",
        "id": "815",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "External Remote Services",
        "techniqueid": "T1133"
    },
    {
        "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).",
        "id": "816",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Non-Application Layer Protocol",
        "techniqueid": "T1095"
    },
    {
        "description": "Adversaries may communicate using a protocol and port paring that are typically not associated. For example, HTTPS over port 8088 or port 587 as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data.",
        "id": "817",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Non-Standard Port",
        "techniqueid": "T1571"
    },
    {
        "description": "Adversaries may take control of preexisting sessions with remote services to move laterally in an environment. Users may use valid credentials to log into a service specifically designed to accept remote connections, such as telnet, SSH, and RDP. When a user logs into a service, a session will be established that will allow them to maintain a continuous interaction with that service.",
        "id": "818",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Remote Service Session Hijacking",
        "techniqueid": "T1563"
    },
    {
        "description": "Adversaries may hijack a legitimate user��s remote desktop session to move laterally within an environment. Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).",
        "id": "819",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "RDP Hijacking",
        "techniqueid": "T1563.002"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.",
        "id": "820",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Remote Desktop Protocol",
        "techniqueid": "T1021.001"
    },
    {
        "description": "Adversaries may collect data related to managed devices from configuration repositories. Configuration repositories are used by management systems in order to configure, manage, and control data on remote systems. Configuration repositories may also facilitate remote access and administration of devices.",
        "id": "821",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Data from Configuration Repository",
        "techniqueid": "T1602"
    },
    {
        "description": "Adversaries may target the Management Information Base (MIB) to collect and/or mine valuable information in a network managed using Simple Network Management Protocol (SNMP).",
        "id": "822",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "SNMP (MIB Dump)",
        "techniqueid": "T1602.001"
    },
    {
        "description": "Adversaries may access network configuration files to collect sensitive data about the device and the network. The network configuration is a file containing parameters that determine the operation of the device. The device typically stores an in-memory copy of the configuration while operating, and a separate configuration on non-volatile storage to load after device reset. Adversaries can inspect the configuration files to reveal information about the target network and its layout, the network device and its software, or identifying legitimate accounts and credentials for later use.",
        "id": "823",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Network Device Configuration Dump",
        "techniqueid": "T1602.002"
    },
    {
        "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by accessibility features. Windows contains accessibility features that may be launched with a key combination before a user has logged in (ex: when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system.",
        "id": "824",
        "mitigation": "Limit Access to Resource Over Network",
        "mitigationid": "M1035",
        "technique": "Accessibility Features",
        "techniqueid": "T1546.008"
    },
    {
        "description": "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as?Windows Remote Management?can also be used externally.",
        "id": "825",
        "mitigation": "Limit Access to Resource Over Network",
        "mitigationid": "M1035",
        "technique": "External Remote Services",
        "techniqueid": "T1133"
    },
    {
        "description": "Adversaries may introduce computer accessories, computers, or networking hardware into a system or network that can be used as a vector to gain access. While public references of usage by APT groups are scarce, many penetration testers leverage hardware additions for initial access. Commercial and open source products are leveraged with capabilities such as passive network tapping , man-in-the middle encryption breaking , keystroke injection , kernel memory reading via DMA , adding new wireless access to an existing network , and others.",
        "id": "826",
        "mitigation": "Limit Access to Resource Over Network",
        "mitigationid": "M1035",
        "technique": "Hardware Additions",
        "techniqueid": "T1200"
    },
    {
        "description": "Adversaries may attempt to position themselves between two or more networked devices using a man-in-the-middle (MiTM) technique to support follow-on behaviors such as?Network Sniffing?or?Transmitted Data Manipulation. By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.",
        "id": "827",
        "mitigation": "Limit Access to Resource Over Network",
        "mitigationid": "M1035",
        "technique": "Man-in-the-Middle",
        "techniqueid": "T1557"
    },
    {
        "description": "Adversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such as?Network Sniffing?or?Transmitted Data Manipulation.",
        "id": "828",
        "mitigation": "Limit Access to Resource Over Network",
        "mitigationid": "M1035",
        "technique": "ARP Cache Poisoning",
        "techniqueid": "T1557.002"
    },
    {
        "description": "Adversaries may abuse netbooting to load an unauthorized network device operating system from a Trivial File Transfer Protocol (TFTP) server. TFTP boot (netbooting) is commonly used by network administrators to load configuration-controlled network device images from a centralized management server. Netbooting is one option in the boot sequence and can be used to centralize, manage, and control device images.",
        "id": "829",
        "mitigation": "Limit Access to Resource Over Network",
        "mitigationid": "M1035",
        "technique": "TFTP Boot",
        "techniqueid": "T1542.005"
    },
    {
        "description": "Adversaries may hijack a legitimate user��s remote desktop session to move laterally within an environment. Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).",
        "id": "830",
        "mitigation": "Limit Access to Resource Over Network",
        "mitigationid": "M1035",
        "technique": "RDP Hijacking",
        "techniqueid": "T1563.002"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.",
        "id": "831",
        "mitigation": "Limit Access to Resource Over Network",
        "mitigationid": "M1035",
        "technique": "Remote Desktop Protocol",
        "techniqueid": "T1021.001"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user.",
        "id": "832",
        "mitigation": "Limit Access to Resource Over Network",
        "mitigationid": "M1035",
        "technique": "SMB/Windows Admin Shares",
        "techniqueid": "T1021.002"
    },
    {
        "description": "Adversaries may communicate using the Domain Name System (DNS) application layer protocol to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.",
        "id": "833",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "DNS",
        "techniqueid": "T1071.004"
    },
    {
        "description": "Adversaries may abuse BITS jobs to persistently execute or clean up after malicious payloads. Windows Background Intelligent Transfer Service (BITS) is a low-bandwidth, asynchronous file transfer mechanism exposed through?Component Object Model?(COM). BITS is commonly used by updaters, messengers, and other applications preferred to operate in the background (using available idle bandwidth) without interrupting other networked applications. File transfer tasks are implemented as BITS jobs, which contain a queue of one or more file operations.",
        "id": "834",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "BITS Jobs",
        "techniqueid": "T1197"
    },
    {
        "description": "Adversaries may access data objects from improperly secured cloud storage.",
        "id": "835",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Data from Cloud Storage Object",
        "techniqueid": "T1530"
    },
    {
        "description": "Adversaries may collect data related to managed devices from configuration repositories. Configuration repositories are used by management systems in order to configure, manage, and control data on remote systems. Configuration repositories may also facilitate remote access and administration of devices.",
        "id": "836",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Data from Configuration Repository",
        "techniqueid": "T1602"
    },
    {
        "description": "Adversaries may target the Management Information Base (MIB) to collect and/or mine valuable information in a network managed using Simple Network Management Protocol (SNMP).",
        "id": "837",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "SNMP (MIB Dump)",
        "techniqueid": "T1602.001"
    },
    {
        "description": "Adversaries may access network configuration files to collect sensitive data about the device and the network. The network configuration is a file containing parameters that determine the operation of the device. The device typically stores an in-memory copy of the configuration while operating, and a separate configuration on non-volatile storage to load after device reset. Adversaries can inspect the configuration files to reveal information about the target network and its layout, the network device and its software, or identifying legitimate accounts and credentials for later use.",
        "id": "838",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Network Device Configuration Dump",
        "techniqueid": "T1602.002"
    },
    {
        "description": "Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.",
        "id": "839",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Endpoint Denial of Service",
        "techniqueid": "T1499"
    },
    {
        "description": "Adversaries may target the operating system (OS) for a DoS attack, since the (OS) is responsible for managing the finite resources on a system. These attacks do not need to exhaust the actual resources on a system since they can simply exhaust the limits that an OS self-imposes to prevent the entire system from being overwhelmed by excessive demands on its capacity.",
        "id": "840",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "OS Exhaustion Flood",
        "techniqueid": "T1499.001"
    },
    {
        "description": "Adversaries may target the different network services provided by systems to conduct a DoS. Adversaries often target DNS and web services, however others have been targeted as well. Web server software can be attacked through a variety of means, some of which apply generally while others are specific to the software being used to provide the service.",
        "id": "841",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Service Exhaustion Flood",
        "techniqueid": "T1499.002"
    },
    {
        "description": "Adversaries may target resource intensive features of web applications to cause a denial of service (DoS). Specific features in web applications may be highly resource intensive. Repeated requests to those features may be able to exhaust system resources and deny access to the application or the server itself.",
        "id": "842",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Application Exhaustion Flood",
        "techniqueid": "T1499.003"
    },
    {
        "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent DoS condition.",
        "id": "843",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Application or System Exploitation",
        "techniqueid": "T1499.004"
    },
    {
        "description": "Adversaries may steal data by exfiltrating it over a different protocol than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.",
        "id": "844",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Exfiltration Over Alternative Protocol",
        "techniqueid": "T1048"
    },
    {
        "description": "Adversaries may steal data by exfiltrating it over a symmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.",
        "id": "845",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Exfiltration Over Symmetric Encrypted Non-C2 Protocol",
        "techniqueid": "T1048.001"
    },
    {
        "description": "Adversaries may steal data by exfiltrating it over an asymmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.",
        "id": "846",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Exfiltration Over Asymmetric Encrypted Non-C2 Protocol",
        "techniqueid": "T1048.002"
    },
    {
        "description": "Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.",
        "id": "847",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol",
        "techniqueid": "T1048.003"
    },
    {
        "description": "Adversaries may gather credential material by invoking or forcing a user to automatically provide authentication information through a mechanism in which they can intercept.",
        "id": "848",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Forced Authentication",
        "techniqueid": "T1187"
    },
    {
        "description": "Adversaries may transfer tools or other files between systems in a compromised environment. Files may be copied from one system to another to stage adversary tools or other files over the course of an operation. Adversaries may copy files laterally between internal victim systems to support lateral movement using inherent file sharing protocols such as file sharing over SMB to connected network shares or with authenticated connections with?SMB/Windows Admin Shares?or?Remote Desktop Protocol. Files can also be copied over on Mac and Linux with native tools like scp, rsync, and sftp.",
        "id": "849",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Lateral Tool Transfer",
        "techniqueid": "T1570"
    },
    {
        "description": "Adversaries may attempt to position themselves between two or more networked devices using a man-in-the-middle (MiTM) technique to support follow-on behaviors such as?Network Sniffing?or?Transmitted Data Manipulation. By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.",
        "id": "850",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Man-in-the-Middle",
        "techniqueid": "T1557"
    },
    {
        "description": "By responding to LLMNR/NBT-NS network traffic, adversaries may spoof an authoritative source for name resolution to force communication with an adversary controlled system. This activity may be used to collect or relay authentication materials.",
        "id": "851",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "LLMNR/NBT-NS Poisoning and SMB Relay",
        "techniqueid": "T1557.001"
    },
    {
        "description": "Adversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such as?Network Sniffing?or?Transmitted Data Manipulation.",
        "id": "852",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "ARP Cache Poisoning",
        "techniqueid": "T1557.002"
    },
    {
        "description": "Adversaries may bridge network boundaries by compromising perimeter network devices. Breaching these devices may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.",
        "id": "853",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Network Boundary Bridging",
        "techniqueid": "T1599"
    },
    {
        "description": "Adversaries may bridge network boundaries by modifying a network device��s Network Address Translation (NAT) configuration. Malicious modifications to NAT may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.",
        "id": "854",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Network Address Translation Traversal",
        "techniqueid": "T1599.001"
    },
    {
        "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).",
        "id": "855",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Non-Application Layer Protocol",
        "techniqueid": "T1095"
    },
    {
        "description": "Adversaries may tunnel network communications to and from a victim system within a separate protocol to avoid detection/network filtering and/or enable access to otherwise unreachable systems. Tunneling involves explicitly encapsulating a protocol within another. This behavior may conceal malicious traffic by blending in with existing traffic and/or provide an outer layer of encryption (similar to a VPN). Tunneling could also enable routing of network packets that would otherwise not reach their intended destination, such as SMB, RDP, or other traffic that would be filtered by network appliances or not routed over the Internet.",
        "id": "856",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Protocol Tunneling",
        "techniqueid": "T1572"
    },
    {
        "description": "Adversaries may use a connection proxy to direct network traffic between systems or act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including?HTRAN, ZXProxy, and ZXPortMap. Adversaries use these types of proxies to manage command and control communications, reduce the number of simultaneous outbound network connections, provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between victims to avoid suspicion. Adversaries may chain together multiple proxies to further disguise the source of malicious traffic.",
        "id": "857",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Proxy",
        "techniqueid": "T1090"
    },
    {
        "description": "To disguise the source of malicious traffic, adversaries may chain together multiple proxies. Typically, a defender will be able to identify the last proxy traffic traversed before it enters their network; the defender may or may not be able to identify any previous proxies before the last-hop proxy. This technique makes identifying the original source of the malicious traffic even more difficult by requiring the defender to trace malicious traffic through several proxies to identify its source. A particular variant of this behavior is to use onion routing networks, such as the publicly available TOR network.",
        "id": "858",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Multi-hop Proxy",
        "techniqueid": "T1090.003"
    },
    {
        "description": "An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks. These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment. Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries.",
        "id": "859",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Remote Access Software",
        "techniqueid": "T1219"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to remotely control machines using Virtual Network Computing (VNC). The adversary may then perform actions as the logged-on user.",
        "id": "860",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "VNC",
        "techniqueid": "T1021.005"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user.",
        "id": "861",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "SMB/Windows Admin Shares",
        "techniqueid": "T1021.002"
    },
    {
        "description": "Adversaries may abuse verclsid.exe to proxy execution of malicious code. Verclsid.exe is known as the Extension CLSID Verification Host and is responsible for verifying each shell extension before they are used by Windows Explorer or the Windows Shell.",
        "id": "862",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Verclsid",
        "techniqueid": "T1218.012"
    },
    {
        "description": "Adversaries may use traffic signaling to hide open ports or other malicious functionality used for persistence or command and control. Traffic signaling involves the use of a magic value or sequence that must be sent to a system to trigger a special response, such as opening a closed port or executing a malicious task. This may take the form of sending a series of packets with certain characteristics before a port will be opened that the adversary can use for command and control. Usually this series of packets consists of attempted connections to a predefined sequence of closed ports (i.e.?Port Knocking), but can involve unusual flags, specific strings, or other unique characteristics. After the sequence is completed, opening a port may be accomplished by the host-based firewall, but could also be implemented by custom software.",
        "id": "863",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Traffic Signaling",
        "techniqueid": "T1205"
    },
    {
        "description": "Adversaries may use port knocking to hide open ports used for persistence or command and control. To enable a port, an adversary sends a series of attempted connections to a predefined sequence of closed ports. After the sequence is completed, opening a port is often accomplished by the host based firewall, but could also be implemented by custom software.",
        "id": "864",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Port Knocking",
        "techniqueid": "T1205.001"
    },
    {
        "description": "Adversaries may exfiltrate data by transferring the data, including backups of cloud environments, to another cloud account they control on the same service to avoid typical file transfers/downloads and network-based exfiltration detection.",
        "id": "865",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Transfer Data to Cloud Account",
        "techniqueid": "T1537"
    },
    {
        "description": "Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g.?Bash History), operating system or application-specific repositories (e.g.?Credentials in Registry), or other specialized files/artifacts (e.g.?Private Keys).",
        "id": "866",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Unsecured Credentials",
        "techniqueid": "T1552"
    },
    {
        "description": "Adversaries may attempt to access the Cloud Instance Metadata API to collect credentials and other sensitive data.",
        "id": "867",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Cloud Instance Metadata API",
        "techniqueid": "T1552.005"
    },
    {
        "description": "Adversaries may leverage traffic mirroring in order to automate data exfiltration over compromised network infrastructure. Traffic mirroring is a native feature for some network devices and used for network analysis and may be configured to duplicate traffic and forward to one or more destinations for analysis by a network analyzer or other monitoring device.",
        "id": "868",
        "mitigation": "Encrypt Sensitive Information",
        "mitigationid": "M1041",
        "technique": "Traffic Duplication",
        "techniqueid": "T1020.001"
    },
    {
        "description": "Adversaries may collect data related to managed devices from configuration repositories. Configuration repositories are used by management systems in order to configure, manage, and control data on remote systems. Configuration repositories may also facilitate remote access and administration of devices.",
        "id": "869",
        "mitigation": "Encrypt Sensitive Information",
        "mitigationid": "M1041",
        "technique": "Data from Configuration Repository",
        "techniqueid": "T1602"
    },
    {
        "description": "Adversaries may target the Management Information Base (MIB) to collect and/or mine valuable information in a network managed using Simple Network Management Protocol (SNMP).",
        "id": "870",
        "mitigation": "Encrypt Sensitive Information",
        "mitigationid": "M1041",
        "technique": "SNMP (MIB Dump)",
        "techniqueid": "T1602.001"
    },
    {
        "description": "Adversaries may access network configuration files to collect sensitive data about the device and the network. The network configuration is a file containing parameters that determine the operation of the device. The device typically stores an in-memory copy of the configuration while operating, and a separate configuration on non-volatile storage to load after device reset. Adversaries can inspect the configuration files to reveal information about the target network and its layout, the network device and its software, or identifying legitimate accounts and credentials for later use.",
        "id": "871",
        "mitigation": "Encrypt Sensitive Information",
        "mitigationid": "M1041",
        "technique": "Network Device Configuration Dump",
        "techniqueid": "T1602.002"
    },
    {
        "description": "Adversaries may attempt to position themselves between two or more networked devices using a man-in-the-middle (MiTM) technique to support follow-on behaviors such as?Network Sniffing?or?Transmitted Data Manipulation. By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.",
        "id": "872",
        "mitigation": "Encrypt Sensitive Information",
        "mitigationid": "M1041",
        "technique": "Man-in-the-Middle",
        "techniqueid": "T1557"
    },
    {
        "description": "Adversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such as?Network Sniffing?or?Transmitted Data Manipulation.",
        "id": "873",
        "mitigation": "Encrypt Sensitive Information",
        "mitigationid": "M1041",
        "technique": "ARP Cache Poisoning",
        "techniqueid": "T1557.002"
    },
    {
        "description": "Adversaries may sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.",
        "id": "874",
        "mitigation": "Encrypt Sensitive Information",
        "mitigationid": "M1041",
        "technique": "Network Sniffing",
        "techniqueid": "T1040"
    },
    {
        "description": "Adversaries may collect data related to managed devices from configuration repositories. Configuration repositories are used by management systems in order to configure, manage, and control data on remote systems. Configuration repositories may also facilitate remote access and administration of devices.",
        "id": "875",
        "mitigation": "Software Configuration",
        "mitigationid": "M1054",
        "technique": "Data from Configuration Repository",
        "techniqueid": "T1602"
    },
    {
        "description": "Adversaries may target the Management Information Base (MIB) to collect and/or mine valuable information in a network managed using Simple Network Management Protocol (SNMP).",
        "id": "876",
        "mitigation": "Software Configuration",
        "mitigationid": "M1054",
        "technique": "SNMP (MIB Dump)",
        "techniqueid": "T1602.001"
    },
    {
        "description": "Adversaries may access network configuration files to collect sensitive data about the device and the network. The network configuration is a file containing parameters that determine the operation of the device. The device typically stores an in-memory copy of the configuration while operating, and a separate configuration on non-volatile storage to load after device reset. Adversaries can inspect the configuration files to reveal information about the target network and its layout, the network device and its software, or identifying legitimate accounts and credentials for later use.",
        "id": "877",
        "mitigation": "Software Configuration",
        "mitigationid": "M1054",
        "technique": "Network Device Configuration Dump",
        "techniqueid": "T1602.002"
    },
    {
        "description": "An adversary may attempt to block indicators or events typically captured by sensors from being gathered and analyzed. This could include maliciously redirecting or even disabling host-based sensors, such as Event Tracing for Windows (ETW), by tampering settings that control the collection and flow of event telemetry. These settings may be stored on the system in configuration files and/or in the Registry as well as being accessible via administrative utilities such as?PowerShell?or?Windows Management Instrumentation.",
        "id": "878",
        "mitigation": "Software Configuration",
        "mitigationid": "M1054",
        "technique": "Indicator Blocking",
        "techniqueid": "T1562.006"
    },
    {
        "description": "Adversaries may manipulate accounts to maintain access to victim systems. Account manipulation may consist of any action that preserves adversary access to a compromised account, such as modifying credentials or permission groups. These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials. In order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain.",
        "id": "879",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Account Manipulation",
        "techniqueid": "T1098"
    },
    {
        "description": "Adversaries may add adversary-controlled credentials to a cloud account to maintain persistent access to victim accounts and instances within the environment.",
        "id": "880",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Additional Cloud Credentials",
        "techniqueid": "T1098.001"
    },
    {
        "description": "Adversaries may create an account to maintain access to victim systems. With a sufficient level of access, creating such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.",
        "id": "881",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Create Account",
        "techniqueid": "T1136"
    },
    {
        "description": "Adversaries may create a domain account to maintain access to victim systems. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover user, administrator, and service accounts. With a sufficient level of access, the?net user /add /domain?command can be used to create a domain account.",
        "id": "882",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Domain Account",
        "techniqueid": "T1136.002"
    },
    {
        "description": "Adversaries may create a cloud account to maintain access to victim systems. With a sufficient level of access, such accounts may be used to establish secondary credentialed access that does not require persistent remote access tools to be deployed on the system.",
        "id": "883",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Cloud Account",
        "techniqueid": "T1136.003"
    },
    {
        "description": "Adversaries may collect data related to managed devices from configuration repositories. Configuration repositories are used by management systems in order to configure, manage, and control data on remote systems. Configuration repositories may also facilitate remote access and administration of devices.",
        "id": "884",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Data from Configuration Repository",
        "techniqueid": "T1602"
    },
    {
        "description": "Adversaries may target the Management Information Base (MIB) to collect and/or mine valuable information in a network managed using Simple Network Management Protocol (SNMP).",
        "id": "885",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "SNMP (MIB Dump)",
        "techniqueid": "T1602.001"
    },
    {
        "description": "Adversaries may access network configuration files to collect sensitive data about the device and the network. The network configuration is a file containing parameters that determine the operation of the device. The device typically stores an in-memory copy of the configuration while operating, and a separate configuration on non-volatile storage to load after device reset. Adversaries can inspect the configuration files to reveal information about the target network and its layout, the network device and its software, or identifying legitimate accounts and credentials for later use.",
        "id": "886",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Network Device Configuration Dump",
        "techniqueid": "T1602.002"
    },
    {
        "description": "Adversaries may insert, delete, or manipulate data in order to manipulate external outcomes or hide activity. By manipulating data, adversaries may attempt to affect a business process, organizational understanding, or decision making.",
        "id": "887",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Data Manipulation",
        "techniqueid": "T1565"
    },
    {
        "description": "Adversaries may modify systems in order to manipulate the data as it is accessed and displayed to an end user. By manipulating runtime data, adversaries may attempt to affect a business process, organizational understanding, and decision making.",
        "id": "888",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Runtime Data Manipulation",
        "techniqueid": "T1565.003"
    },
    {
        "description": "Adversaries may attempt to gather information on domain trust relationships that may be used to identify lateral movement opportunities in Windows multi-domain/forest environments. Domain trusts provide a mechanism for a domain to allow access to resources based on the authentication procedures of another domain. Domain trusts allow the users of the trusted domain to access resources in the trusting domain. The information discovered may help the adversary conduct?SID-History Injection,?Pass the Ticket, and?Kerberoasting. Domain trusts can be enumerated using the?DSEnumerateDomainTrusts()?Win32 API call, .NET methods, and LDAP. The Windows utility?Nltest?is known to be used by adversaries to enumerate domain trusts.",
        "id": "889",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Domain Trust Discovery",
        "techniqueid": "T1482"
    },
    {
        "description": "Adversaries may steal data by exfiltrating it over a different protocol than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.",
        "id": "890",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Exfiltration Over Alternative Protocol",
        "techniqueid": "T1048"
    },
    {
        "description": "Adversaries may steal data by exfiltrating it over a symmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.",
        "id": "891",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Exfiltration Over Symmetric Encrypted Non-C2 Protocol",
        "techniqueid": "T1048.001"
    },
    {
        "description": "Adversaries may steal data by exfiltrating it over an asymmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.",
        "id": "892",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Exfiltration Over Asymmetric Encrypted Non-C2 Protocol",
        "techniqueid": "T1048.002"
    },
    {
        "description": "Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.",
        "id": "893",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol",
        "techniqueid": "T1048.003"
    },
    {
        "description": "Adversaries may attempt to take advantage of a weakness in an Internet-facing computer or program using software, data, or commands in order to cause unintended or unanticipated behavior. The weakness in the system can be a bug, a glitch, or a design vulnerability. These applications are often websites, but can include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other applications with Internet accessible open sockets, such as web servers and related services. Depending on the flaw being exploited this may include?Exploitation for Defense Evasion.",
        "id": "894",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Exploit Public-Facing Application",
        "techniqueid": "T1190"
    },
    {
        "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.?A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.",
        "id": "895",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Exploitation of Remote Services",
        "techniqueid": "T1210"
    },
    {
        "description": "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as?Windows Remote Management?can also be used externally.",
        "id": "896",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "External Remote Services",
        "techniqueid": "T1133"
    },
    {
        "description": "Adversaries may attempt to position themselves between two or more networked devices using a man-in-the-middle (MiTM) technique to support follow-on behaviors such as?Network Sniffing?or?Transmitted Data Manipulation. By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.",
        "id": "897",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Man-in-the-Middle",
        "techniqueid": "T1557"
    },
    {
        "description": "By responding to LLMNR/NBT-NS network traffic, adversaries may spoof an authoritative source for name resolution to force communication with an adversary controlled system. This activity may be used to collect or relay authentication materials.",
        "id": "898",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "LLMNR/NBT-NS Poisoning and SMB Relay",
        "techniqueid": "T1557.001"
    },
    {
        "description": "Adversaries may attempt to get a listing of services running on remote hosts, including those that may be vulnerable to remote software exploitation. Methods to acquire this information include port scans and vulnerability scans using tools that are brought onto a system.",
        "id": "899",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Network Service Scanning",
        "techniqueid": "T1046"
    },
    {
        "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).",
        "id": "900",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Non-Application Layer Protocol",
        "techniqueid": "T1095"
    },
    {
        "description": "Adversaries may communicate using a protocol and port paring that are typically not associated. For example, HTTPS over port 8088 or port 587 as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data.",
        "id": "901",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Non-Standard Port",
        "techniqueid": "T1571"
    },
    {
        "description": "Adversaries may take control of preexisting sessions with remote services to move laterally in an environment. Users may use valid credentials to log into a service specifically designed to accept remote connections, such as telnet, SSH, and RDP. When a user logs into a service, a session will be established that will allow them to maintain a continuous interaction with that service.",
        "id": "902",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Remote Service Session Hijacking",
        "techniqueid": "T1563"
    },
    {
        "description": "Adversaries may hijack a legitimate user��s remote desktop session to move laterally within an environment. Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).",
        "id": "903",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "RDP Hijacking",
        "techniqueid": "T1563.002"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.",
        "id": "904",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Remote Desktop Protocol",
        "techniqueid": "T1021.001"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to interact with remote machines by taking advantage of Distributed Component Object Model (DCOM). The adversary may then perform actions as the logged-on user.",
        "id": "905",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Distributed Component Object Model",
        "techniqueid": "T1021.003"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to interact with remote systems using Windows Remote Management (WinRM). The adversary may then perform actions as the logged-on user.",
        "id": "906",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Windows Remote Management",
        "techniqueid": "T1021.006"
    },
    {
        "description": "Adversaries may gain access to and use third-party software suites installed within an enterprise network, such as administration, monitoring, and deployment systems, to move laterally through the network. Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, VNC, HBSS, Altiris, etc.).",
        "id": "907",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Software Deployment Tools",
        "techniqueid": "T1072"
    },
    {
        "description": "Adversaries may breach or otherwise leverage organizations who have access to intended victims. Access through trusted third party relationship exploits an existing connection that may not be protected or receives less scrutiny than standard mechanisms of gaining access to a network.",
        "id": "908",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Trusted Relationship",
        "techniqueid": "T1199"
    },
    {
        "description": "Adversaries may attempt to position themselves between two or more networked devices using a man-in-the-middle (MiTM) technique to support follow-on behaviors such as?Network Sniffing?or?Transmitted Data Manipulation. By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.",
        "id": "909",
        "mitigation": "Limit Access to Resource Over Network",
        "mitigationid": "M1035",
        "technique": "Man-in-the-Middle",
        "techniqueid": "T1557"
    },
    {
        "description": "Adversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such as?Network Sniffing?or?Transmitted Data Manipulation.",
        "id": "910",
        "mitigation": "Limit Access to Resource Over Network",
        "mitigationid": "M1035",
        "technique": "ARP Cache Poisoning",
        "techniqueid": "T1557.002"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user.",
        "id": "911",
        "mitigation": "Limit Access to Resource Over Network",
        "mitigationid": "M1035",
        "technique": "SMB/Windows Admin Shares",
        "techniqueid": "T1021.002"
    },
    {
        "description": "Adversaries may abuse BITS jobs to persistently execute or clean up after malicious payloads. Windows Background Intelligent Transfer Service (BITS) is a low-bandwidth, asynchronous file transfer mechanism exposed through?Component Object Model?(COM). BITS is commonly used by updaters, messengers, and other applications preferred to operate in the background (using available idle bandwidth) without interrupting other networked applications. File transfer tasks are implemented as BITS jobs, which contain a queue of one or more file operations.",
        "id": "912",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "BITS Jobs",
        "techniqueid": "T1197"
    },
    {
        "description": "Adversaries may access data objects from improperly secured cloud storage.",
        "id": "913",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Data from Cloud Storage Object",
        "techniqueid": "T1530"
    },
    {
        "description": "Adversaries may collect data related to managed devices from configuration repositories. Configuration repositories are used by management systems in order to configure, manage, and control data on remote systems. Configuration repositories may also facilitate remote access and administration of devices.",
        "id": "914",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Data from Configuration Repository",
        "techniqueid": "T1602"
    },
    {
        "description": "Adversaries may target the Management Information Base (MIB) to collect and/or mine valuable information in a network managed using Simple Network Management Protocol (SNMP).",
        "id": "915",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "SNMP (MIB Dump)",
        "techniqueid": "T1602.001"
    },
    {
        "description": "Adversaries may access network configuration files to collect sensitive data about the device and the network. The network configuration is a file containing parameters that determine the operation of the device. The device typically stores an in-memory copy of the configuration while operating, and a separate configuration on non-volatile storage to load after device reset. Adversaries can inspect the configuration files to reveal information about the target network and its layout, the network device and its software, or identifying legitimate accounts and credentials for later use.",
        "id": "916",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Network Device Configuration Dump",
        "techniqueid": "T1602.002"
    },
    {
        "description": "Adversaries may steal data by exfiltrating it over a different protocol than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.",
        "id": "917",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Exfiltration Over Alternative Protocol",
        "techniqueid": "T1048"
    },
    {
        "description": "Adversaries may steal data by exfiltrating it over a symmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.",
        "id": "918",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Exfiltration Over Symmetric Encrypted Non-C2 Protocol",
        "techniqueid": "T1048.001"
    },
    {
        "description": "Adversaries may steal data by exfiltrating it over an asymmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.",
        "id": "919",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Exfiltration Over Asymmetric Encrypted Non-C2 Protocol",
        "techniqueid": "T1048.002"
    },
    {
        "description": "Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.",
        "id": "920",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol",
        "techniqueid": "T1048.003"
    },
    {
        "description": "Adversaries may gather credential material by invoking or forcing a user to automatically provide authentication information through a mechanism in which they can intercept.",
        "id": "921",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Forced Authentication",
        "techniqueid": "T1187"
    },
    {
        "description": "Adversaries may transfer tools or other files between systems in a compromised environment. Files may be copied from one system to another to stage adversary tools or other files over the course of an operation. Adversaries may copy files laterally between internal victim systems to support lateral movement using inherent file sharing protocols such as file sharing over SMB to connected network shares or with authenticated connections with?SMB/Windows Admin Shares?or?Remote Desktop Protocol. Files can also be copied over on Mac and Linux with native tools like scp, rsync, and sftp.",
        "id": "922",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Lateral Tool Transfer",
        "techniqueid": "T1570"
    },
    {
        "description": "Adversaries may attempt to position themselves between two or more networked devices using a man-in-the-middle (MiTM) technique to support follow-on behaviors such as?Network Sniffing?or?Transmitted Data Manipulation. By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.",
        "id": "923",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Man-in-the-Middle",
        "techniqueid": "T1557"
    },
    {
        "description": "By responding to LLMNR/NBT-NS network traffic, adversaries may spoof an authoritative source for name resolution to force communication with an adversary controlled system. This activity may be used to collect or relay authentication materials.",
        "id": "924",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "LLMNR/NBT-NS Poisoning and SMB Relay",
        "techniqueid": "T1557.001"
    },
    {
        "description": "Adversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such as?Network Sniffing?or?Transmitted Data Manipulation.",
        "id": "925",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "ARP Cache Poisoning",
        "techniqueid": "T1557.002"
    },
    {
        "description": "Adversaries may bridge network boundaries by compromising perimeter network devices. Breaching these devices may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.",
        "id": "926",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Network Boundary Bridging",
        "techniqueid": "T1599"
    },
    {
        "description": "Adversaries may bridge network boundaries by modifying a network device��s Network Address Translation (NAT) configuration. Malicious modifications to NAT may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.",
        "id": "927",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Network Address Translation Traversal",
        "techniqueid": "T1599.001"
    },
    {
        "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).",
        "id": "928",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Non-Application Layer Protocol",
        "techniqueid": "T1095"
    },
    {
        "description": "Adversaries may tunnel network communications to and from a victim system within a separate protocol to avoid detection/network filtering and/or enable access to otherwise unreachable systems. Tunneling involves explicitly encapsulating a protocol within another. This behavior may conceal malicious traffic by blending in with existing traffic and/or provide an outer layer of encryption (similar to a VPN). Tunneling could also enable routing of network packets that would otherwise not reach their intended destination, such as SMB, RDP, or other traffic that would be filtered by network appliances or not routed over the Internet.",
        "id": "929",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Protocol Tunneling",
        "techniqueid": "T1572"
    },
    {
        "description": "Adversaries may use a connection proxy to direct network traffic between systems or act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including?HTRAN, ZXProxy, and ZXPortMap. Adversaries use these types of proxies to manage command and control communications, reduce the number of simultaneous outbound network connections, provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between victims to avoid suspicion. Adversaries may chain together multiple proxies to further disguise the source of malicious traffic.",
        "id": "930",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Proxy",
        "techniqueid": "T1090"
    },
    {
        "description": "To disguise the source of malicious traffic, adversaries may chain together multiple proxies. Typically, a defender will be able to identify the last proxy traffic traversed before it enters their network; the defender may or may not be able to identify any previous proxies before the last-hop proxy. This technique makes identifying the original source of the malicious traffic even more difficult by requiring the defender to trace malicious traffic through several proxies to identify its source. A particular variant of this behavior is to use onion routing networks, such as the publicly available TOR network.",
        "id": "931",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Multi-hop Proxy",
        "techniqueid": "T1090.003"
    },
    {
        "description": "An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks. These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment. Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries.",
        "id": "932",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Remote Access Software",
        "techniqueid": "T1219"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to remotely control machines using Virtual Network Computing (VNC). The adversary may then perform actions as the logged-on user.",
        "id": "933",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "VNC",
        "techniqueid": "T1021.005"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user.",
        "id": "934",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "SMB/Windows Admin Shares",
        "techniqueid": "T1021.002"
    },
    {
        "description": "Adversaries may abuse verclsid.exe to proxy execution of malicious code. Verclsid.exe is known as the Extension CLSID Verification Host and is responsible for verifying each shell extension before they are used by Windows Explorer or the Windows Shell.",
        "id": "935",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Verclsid",
        "techniqueid": "T1218.012"
    },
    {
        "description": "Adversaries may use traffic signaling to hide open ports or other malicious functionality used for persistence or command and control. Traffic signaling involves the use of a magic value or sequence that must be sent to a system to trigger a special response, such as opening a closed port or executing a malicious task. This may take the form of sending a series of packets with certain characteristics before a port will be opened that the adversary can use for command and control. Usually this series of packets consists of attempted connections to a predefined sequence of closed ports (i.e.?Port Knocking), but can involve unusual flags, specific strings, or other unique characteristics. After the sequence is completed, opening a port may be accomplished by the host-based firewall, but could also be implemented by custom software.",
        "id": "936",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Traffic Signaling",
        "techniqueid": "T1205"
    },
    {
        "description": "Adversaries may use port knocking to hide open ports used for persistence or command and control. To enable a port, an adversary sends a series of attempted connections to a predefined sequence of closed ports. After the sequence is completed, opening a port is often accomplished by the host based firewall, but could also be implemented by custom software.",
        "id": "937",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Port Knocking",
        "techniqueid": "T1205.001"
    },
    {
        "description": "Adversaries may exfiltrate data by transferring the data, including backups of cloud environments, to another cloud account they control on the same service to avoid typical file transfers/downloads and network-based exfiltration detection.",
        "id": "938",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Transfer Data to Cloud Account",
        "techniqueid": "T1537"
    },
    {
        "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).",
        "id": "939",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Non-Application Layer Protocol",
        "techniqueid": "T1095"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to interact with remote machines by taking advantage of Distributed Component Object Model (DCOM). The adversary may then perform actions as the logged-on user.",
        "id": "940",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Distributed Component Object Model",
        "techniqueid": "T1021.003"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to interact with remote systems using Windows Remote Management (WinRM). The adversary may then perform actions as the logged-on user.",
        "id": "941",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Windows Remote Management",
        "techniqueid": "T1021.006"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user.",
        "id": "942",
        "mitigation": "Limit Access to Resource Over Network",
        "mitigationid": "M1035",
        "technique": "SMB/Windows Admin Shares",
        "techniqueid": "T1021.002"
    },
    {
        "description": "Adversaries may abuse BITS jobs to persistently execute or clean up after malicious payloads. Windows Background Intelligent Transfer Service (BITS) is a low-bandwidth, asynchronous file transfer mechanism exposed through?Component Object Model?(COM). BITS is commonly used by updaters, messengers, and other applications preferred to operate in the background (using available idle bandwidth) without interrupting other networked applications. File transfer tasks are implemented as BITS jobs, which contain a queue of one or more file operations.",
        "id": "943",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "BITS Jobs",
        "techniqueid": "T1197"
    },
    {
        "description": "Adversaries may transfer tools or other files between systems in a compromised environment. Files may be copied from one system to another to stage adversary tools or other files over the course of an operation. Adversaries may copy files laterally between internal victim systems to support lateral movement using inherent file sharing protocols such as file sharing over SMB to connected network shares or with authenticated connections with?SMB/Windows Admin Shares?or?Remote Desktop Protocol. Files can also be copied over on Mac and Linux with native tools like scp, rsync, and sftp.",
        "id": "944",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Lateral Tool Transfer",
        "techniqueid": "T1570"
    },
    {
        "description": "By responding to LLMNR/NBT-NS network traffic, adversaries may spoof an authoritative source for name resolution to force communication with an adversary controlled system. This activity may be used to collect or relay authentication materials.",
        "id": "945",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "LLMNR/NBT-NS Poisoning and SMB Relay",
        "techniqueid": "T1557.001"
    },
    {
        "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).",
        "id": "946",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Non-Application Layer Protocol",
        "techniqueid": "T1095"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to remotely control machines using Virtual Network Computing (VNC). The adversary may then perform actions as the logged-on user.",
        "id": "947",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "VNC",
        "techniqueid": "T1021.005"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user.",
        "id": "948",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "SMB/Windows Admin Shares",
        "techniqueid": "T1021.002"
    },
    {
        "description": "Adversaries may abuse verclsid.exe to proxy execution of malicious code. Verclsid.exe is known as the Extension CLSID Verification Host and is responsible for verifying each shell extension before they are used by Windows Explorer or the Windows Shell.",
        "id": "949",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Verclsid",
        "techniqueid": "T1218.012"
    },
    {
        "description": "Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g.?Bash History), operating system or application-specific repositories (e.g.?Credentials in Registry), or other specialized files/artifacts (e.g.?Private Keys).",
        "id": "950",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Unsecured Credentials",
        "techniqueid": "T1552"
    },
    {
        "description": "Adversaries may attempt to access the Cloud Instance Metadata API to collect credentials and other sensitive data.",
        "id": "951",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Cloud Instance Metadata API",
        "techniqueid": "T1552.005"
    },
    {
        "description": "Adversaries may leverage traffic mirroring in order to automate data exfiltration over compromised network infrastructure. Traffic mirroring is a native feature for some network devices and used for network analysis and may be configured to duplicate traffic and forward to one or more destinations for analysis by a network analyzer or other monitoring device.",
        "id": "952",
        "mitigation": "Encrypt Sensitive Information",
        "mitigationid": "M1041",
        "technique": "Traffic Duplication",
        "techniqueid": "T1020.001"
    },
    {
        "description": "Adversaries may collect data related to managed devices from configuration repositories. Configuration repositories are used by management systems in order to configure, manage, and control data on remote systems. Configuration repositories may also facilitate remote access and administration of devices.",
        "id": "953",
        "mitigation": "Encrypt Sensitive Information",
        "mitigationid": "M1041",
        "technique": "Data from Configuration Repository",
        "techniqueid": "T1602"
    },
    {
        "description": "Adversaries may target the Management Information Base (MIB) to collect and/or mine valuable information in a network managed using Simple Network Management Protocol (SNMP).",
        "id": "954",
        "mitigation": "Encrypt Sensitive Information",
        "mitigationid": "M1041",
        "technique": "SNMP (MIB Dump)",
        "techniqueid": "T1602.001"
    },
    {
        "description": "Adversaries may access network configuration files to collect sensitive data about the device and the network. The network configuration is a file containing parameters that determine the operation of the device. The device typically stores an in-memory copy of the configuration while operating, and a separate configuration on non-volatile storage to load after device reset. Adversaries can inspect the configuration files to reveal information about the target network and its layout, the network device and its software, or identifying legitimate accounts and credentials for later use.",
        "id": "955",
        "mitigation": "Encrypt Sensitive Information",
        "mitigationid": "M1041",
        "technique": "Network Device Configuration Dump",
        "techniqueid": "T1602.002"
    },
    {
        "description": "Adversaries may attempt to position themselves between two or more networked devices using a man-in-the-middle (MiTM) technique to support follow-on behaviors such as?Network Sniffing?or?Transmitted Data Manipulation. By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.",
        "id": "956",
        "mitigation": "Encrypt Sensitive Information",
        "mitigationid": "M1041",
        "technique": "Man-in-the-Middle",
        "techniqueid": "T1557"
    },
    {
        "description": "Adversaries may sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.",
        "id": "957",
        "mitigation": "Encrypt Sensitive Information",
        "mitigationid": "M1041",
        "technique": "Network Sniffing",
        "techniqueid": "T1040"
    },
    {
        "description": "Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.",
        "id": "958",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Access Token Manipulation",
        "techniqueid": "T1134"
    },
    {
        "description": "Adversaries may duplicate then impersonate another user's token to escalate privileges and bypass access controls. An adversary can create a new access token that duplicates an existing token using?DuplicateToken(Ex). The token can then be used with?ImpersonateLoggedOnUser?to allow the calling thread to impersonate a logged on user's security context, or with?SetThreadToken?to assign the impersonated token to a thread.",
        "id": "959",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Token Impersonation/Theft",
        "techniqueid": "T1134.001"
    },
    {
        "description": "Adversaries may create a new process with a duplicated token to escalate privileges and bypass access controls. An adversary can duplicate a desired access token with?DuplicateToken(Ex)?and use it with?CreateProcessWithTokenW?to create a new process running under the security context of the impersonated user. This is useful for creating a new process under the security context of a different user.",
        "id": "960",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Create Process with Token",
        "techniqueid": "T1134.002"
    },
    {
        "description": "Adversaries may make and impersonate tokens to escalate privileges and bypass access controls. If an adversary has a username and password but the user is not logged onto the system, the adversary can then create a logon session for the user using the?LogonUser?function. The function will return a copy of the new session's access token and the adversary can use?SetThreadToken?to assign the token to a thread.",
        "id": "961",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Make and Impersonate Token",
        "techniqueid": "T1134.003"
    },
    {
        "description": "Adversaries may attempt to get a listing of cloud accounts. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application.",
        "id": "962",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Cloud Account",
        "techniqueid": "T1087.004"
    },
    {
        "description": "Adversaries may abuse BITS jobs to persistently execute or clean up after malicious payloads. Windows Background Intelligent Transfer Service (BITS) is a low-bandwidth, asynchronous file transfer mechanism exposed through?Component Object Model?(COM). BITS is commonly used by updaters, messengers, and other applications preferred to operate in the background (using available idle bandwidth) without interrupting other networked applications. File transfer tasks are implemented as BITS jobs, which contain a queue of one or more file operations.",
        "id": "963",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "BITS Jobs",
        "techniqueid": "T1197"
    },
    {
        "description": "Adversaries may abuse features of Winlogon to execute DLLs and/or executables when a user logs in. Winlogon.exe is a Windows component responsible for actions at logon/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete. Registry entries in?HKLM\\Software[\\Wow6432Node\\]\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\?and?HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\?are used to manage additional helper programs and functionalities that support Winlogon.",
        "id": "964",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Winlogon Helper DLL",
        "techniqueid": "T1547.004"
    },
    {
        "description": "Adversaries may create or edit shortcuts to run a program during system boot or user login. Shortcuts or symbolic links are ways of referencing other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process.",
        "id": "965",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Shortcut Modification",
        "techniqueid": "T1547.009"
    },
    {
        "description": "Adversaries may abuse print processors to run malicious DLLs during system boot for persistence and/or privilege escalation. Print processors are DLLs that are loaded by the print spooler service, spoolsv.exe, during boot.",
        "id": "966",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Print Processors",
        "techniqueid": "T1547.012"
    },
    {
        "description": "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.",
        "id": "967",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Brute Force",
        "techniqueid": "T1110"
    },
    {
        "description": "Adversaries may use credentials obtained from breach dumps of unrelated accounts to gain access to target accounts through credential overlap. Occasionally, large numbers of username and password pairs are dumped online when a website or service is compromised and the user account credentials accessed. The information may be useful to an adversary attempting to compromise accounts by taking advantage of the tendency for users to use the same passwords across personal and business accounts.",
        "id": "968",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Credential Stuffing",
        "techniqueid": "T1110.004"
    },
    {
        "description": "An adversary may attempt to discover resources that are available within an infrastructure-as-a-service (IaaS) environment. This includes compute service resources such as instances, virtual machines, and snapshots as well as resources of other services including the storage and database services.",
        "id": "969",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Cloud Infrastructure Discovery",
        "techniqueid": "T1580"
    },
    {
        "description": "An adversary may use a cloud service dashboard GUI with stolen credentials to gain useful information from an operational cloud environment, such as specific services, resources, and features. For example, the GCP Command Center can be used to view all assets, findings of potential security risks, and to run additional queries, such as finding public IP addresses and open ports.",
        "id": "970",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Cloud Service Dashboard",
        "techniqueid": "T1538"
    },
    {
        "description": "Adversaries may abuse scripting or built-in command line interpreters (CLI) on network devices to execute malicious command and payloads. The CLI is the primary means through which users and administrators interact with the device in order to view system information, modify device operations, or perform diagnostic and administrative functions. CLIs typically contain various permission levels required for different commands.",
        "id": "971",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Network Device CLI",
        "techniqueid": "T1059.008"
    },
    {
        "description": "Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services. On macOS, launchd processes known as?Launch Daemon?and?Launch Agent?are run to finish system initialization and load user specific parameters.",
        "id": "972",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Create or Modify System Process",
        "techniqueid": "T1543"
    },
    {
        "description": "Adversaries may create or modify launch agents to repeatedly execute malicious payloads as part of persistence. Per Apple��s developer documentation, when a user logs in, a per-user launchd process is started which loads the parameters for each launch-on-demand user agent from the property list (plist) files found in?/System/Library/LaunchAgents,?/Library/LaunchAgents, and?$HOME/Library/LaunchAgents?. These launch agents have property list files which point to the executables that will be launched .",
        "id": "973",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Launch Agent",
        "techniqueid": "T1543.001"
    },
    {
        "description": "Adversaries may create or modify systemd services to repeatedly execute malicious payloads as part of persistence. The systemd service manager is commonly used for managing background daemon processes (also known as services) and other system resources. Systemd is the default initialization (init) system on many Linux distributions starting with Debian 8, Ubuntu 15.04, CentOS 7, RHEL 7, Fedora 15, and replaces legacy init systems including SysVinit and Upstart while remaining backwards compatible with the aforementioned init systems.",
        "id": "974",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Systemd Service",
        "techniqueid": "T1543.002"
    },
    {
        "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry. Service configurations can be modified using utilities such as sc.exe and?Reg.",
        "id": "975",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Windows Service",
        "techniqueid": "T1543.003"
    },
    {
        "description": "Adversaries may create or modify launch daemons to repeatedly execute malicious payloads as part of persistence. Per Apple��s developer documentation, when macOS and OS X boot up, launchd is run to finish system initialization. This process loads the parameters for each launch-on-demand system-level daemon from the property list (plist) files found in?/System/Library/LaunchDaemons?and?/Library/LaunchDaemons?. These LaunchDaemons have property list files which point to the executables that will be launched .",
        "id": "976",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Launch Daemon",
        "techniqueid": "T1543.004"
    },
    {
        "description": "Adversaries may access data objects from improperly secured cloud storage.",
        "id": "977",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Data from Cloud Storage Object",
        "techniqueid": "T1530"
    },
    {
        "description": "Adversaries may leverage information repositories to mine valuable information. Information repositories are tools that allow for storage of information, typically to facilitate collaboration or information sharing between users, and can store a wide variety of data that may aid adversaries in further objectives, or direct access to the target information.",
        "id": "978",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Data from Information Repositories",
        "techniqueid": "T1213"
    },
    {
        "description": "Adversaries may leverage Confluence repositories to mine valuable information. Often found in development environments alongside Atlassian JIRA, Confluence is generally used to store development-related documentation, however, in general may contain more diverse categories of useful information, such as:",
        "id": "979",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Confluence",
        "techniqueid": "T1213.001"
    },
    {
        "description": "Adversaries may leverage the SharePoint repository as a source to mine valuable information. SharePoint will often contain useful information for an adversary to learn about the structure and functionality of the internal network and systems. For example, the following is a list of example information that may hold potential value to an adversary and may also be found on SharePoint:",
        "id": "980",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Sharepoint",
        "techniqueid": "T1213.002"
    },
    {
        "description": "Adversaries may modify the configuration settings of a domain to evade defenses and/or escalate privileges in domain environments. Domains provide a centralized means of managing how computer resources (ex: computers, user accounts) can act, and interact with each other, on a network. The policy of the domain also includes configuration settings that may apply between domains in a multi-domain/forest environment. Modifications to domain settings may include altering domain Group Policy Objects (GPOs) or changing trust settings for domains, including federation trusts.",
        "id": "981",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Domain Policy Modification",
        "techniqueid": "T1484"
    },
    {
        "description": "Adversaries may modify Group Policy Objects (GPOs) to subvert the intended discretionary access controls for a domain, usually with the intention of escalating privileges on the domain. Group policy allows for centralized management of user and computer settings in Active Directory (AD). GPOs are containers for group policy settings made up of files stored within a predicable network path?\\<DOMAIN>\\SYSVOL\\<DOMAIN>\\Policies\\.",
        "id": "982",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Group Policy Modification",
        "techniqueid": "T1484.001"
    },
    {
        "description": "Adversaries may establish persistence and elevate privileges by executing malicious content triggered by a Windows Management Instrumentation (WMI) event subscription. WMI can be used to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Examples of events that may be subscribed to are the wall clock time, user loging, or the computer's uptime.",
        "id": "983",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Windows Management Instrumentation Event Subscription",
        "techniqueid": "T1546.003"
    },
    {
        "description": "Adversaries may forge credential materials that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies, tokens, or other materials to authenticate and authorize user access.",
        "id": "984",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Forge Web Credentials",
        "techniqueid": "T1606"
    },
    {
        "description": "An adversary may forge SAML tokens with any permissions claims and lifetimes if they possess a valid SAML token-signing certificate. The default lifetime of a SAML token is one hour, but the validity period can be specified in the?NotOnOrAfter?value of the?conditions ...?element in a token. This value can be changed using the?AccessTokenLifetime?in a?LifetimeTokenPolicy. Forged SAML tokens enable adversaries to authenticate across services that use SAML 2.0 as an SSO (single sign-on) mechanism.",
        "id": "985",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "SAML Tokens",
        "techniqueid": "T1606.002"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.",
        "id": "986",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Hijack Execution Flow",
        "techniqueid": "T1574"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the binaries used by services. Adversaries may use flaws in the permissions of Windows services to replace the binary that is executed upon service start. These service processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.",
        "id": "987",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Services File Permissions Weakness",
        "techniqueid": "T1574.010"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the binaries used by an installer. These processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.",
        "id": "988",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Executable Installer File Permissions Weakness",
        "techniqueid": "T1574.005"
    },
    {
        "description": "Adversaries may leverage the COR_PROFILER environment variable to hijack the execution flow of programs that load the .NET CLR. The COR_PROFILER is a .NET Framework feature which allows developers to specify an unmanaged (or external of .NET) profiling DLL to be loaded into each .NET process that loads the Common Language Runtime (CLR). These profiliers are designed to monitor, troubleshoot, and debug managed code executed by the .NET CLR.",
        "id": "989",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "COR_PROFILER",
        "techniqueid": "T1574.012"
    },
    {
        "description": "Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators.",
        "id": "990",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Impair Defenses",
        "techniqueid": "T1562"
    },
    {
        "description": "Adversaries may disable security tools to avoid possible detection of their tools and activities. This can take the form of killing security software or event logging processes, deleting Registry keys so that tools do not start at run time, or other methods to interfere with security tools scanning or reporting information.",
        "id": "991",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Disable or Modify Tools",
        "techniqueid": "T1562.001"
    },
    {
        "description": "Adversaries may disable Windows event logging to limit data that can be leveraged for detections and audits. Windows event logs record user and system activity such as login attempts, process creation, and much more. This data is used by security tools and analysts to generate detections.",
        "id": "992",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Disable Windows Event Logging",
        "techniqueid": "T1562.002"
    },
    {
        "description": "Adversaries may disable or modify system firewalls in order to bypass controls limiting network usage. Changes could be disabling the entire mechanism as well as adding, deleting, or modifying particular rules. This can be done numerous ways depending on the operating system, including via command-line, editing Windows Registry keys, and Windows Control Panel.",
        "id": "993",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Disable or Modify System Firewall",
        "techniqueid": "T1562.004"
    },
    {
        "description": "An adversary may attempt to block indicators or events typically captured by sensors from being gathered and analyzed. This could include maliciously redirecting or even disabling host-based sensors, such as Event Tracing for Windows (ETW), by tampering settings that control the collection and flow of event telemetry. These settings may be stored on the system in configuration files and/or in the Registry as well as being accessible via administrative utilities such as?PowerShell?or?Windows Management Instrumentation.",
        "id": "994",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Indicator Blocking",
        "techniqueid": "T1562.006"
    },
    {
        "description": "Adversaries may disable or modify a firewall within a cloud environment to bypass controls that limit access to cloud resources. Cloud firewalls are separate from system firewalls that are described in?Disable or Modify System Firewall.",
        "id": "995",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Disable or Modify Cloud Firewall",
        "techniqueid": "T1562.007"
    },
    {
        "description": "An adversary may disable cloud logging capabilities and integrations to limit what data is collected on their activities and avoid detection.",
        "id": "996",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Disable Cloud Logs",
        "techniqueid": "T1562.008"
    },
    {
        "description": "Adversaries can take advantage of security vulnerabilities and inherent functionality in browser software to change content, modify behavior, and intercept information as part of various man in the browser techniques.",
        "id": "997",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Man in the Browser",
        "techniqueid": "T1185"
    },
    {
        "description": "An adversary may attempt to modify a cloud account's compute service infrastructure to evade defenses. A modification to the compute service infrastructure can include the creation, deletion, or modification of one or more components such as compute instances, virtual machines, and snapshots.",
        "id": "998",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Modify Cloud Compute Infrastructure",
        "techniqueid": "T1578"
    },
    {
        "description": "An adversary may create a new instance or virtual machine (VM) within the compute service of a cloud account to evade defenses. Creating a new instance may allow an adversary to bypass firewall rules and permissions that exist on instances currently residing within an account. An adversary may?Create Snapshot?of one or more volumes in an account, create a new instance, mount the snapshots, and then apply a less restrictive security policy to collect?Data from Local System?or for?Remote Data Staging.",
        "id": "999",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Create Cloud Instance",
        "techniqueid": "T1578.002"
    },
    {
        "description": "An adversary may create a snapshot or data backup within a cloud account to evade defenses. A snapshot is a point-in-time copy of an existing cloud compute component such as a virtual machine (VM), virtual hard drive, or volume. An adversary may leverage permissions to create a snapshot in order to bypass restrictions that prevent access to existing compute service infrastructure, unlike in?Revert Cloud Instance?where an adversary may revert to a snapshot to evade detection and remove evidence of their presence.",
        "id": "1000",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Create Snapshot",
        "techniqueid": "T1578.001"
    },
    {
        "description": "An adversary may delete a cloud instance after they have performed malicious activities in an attempt to evade detection and remove evidence of their presence. Deleting an instance or virtual machine can remove valuable forensic artifacts and other evidence of suspicious behavior if the instance is not recoverable.",
        "id": "1001",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Delete Cloud Instance",
        "techniqueid": "T1578.003"
    },
    {
        "description": "Adversaries may take control of preexisting sessions with remote services to move laterally in an environment. Users may use valid credentials to log into a service specifically designed to accept remote connections, such as telnet, SSH, and RDP. When a user logs into a service, a session will be established that will allow them to maintain a continuous interaction with that service.",
        "id": "1002",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Remote Service Session Hijacking",
        "techniqueid": "T1563"
    },
    {
        "description": "Adversaries may hijack a legitimate user��s remote desktop session to move laterally within an environment. Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).",
        "id": "1003",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "RDP Hijacking",
        "techniqueid": "T1563.002"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into a service specifically designed to accept remote connections, such as telnet, SSH, and VNC. The adversary may then perform actions as the logged-on user.",
        "id": "1004",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Remote Services",
        "techniqueid": "T1021"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.",
        "id": "1005",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Remote Desktop Protocol",
        "techniqueid": "T1021.001"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into remote machines using Secure Shell (SSH). The adversary may then perform actions as the logged-on user.",
        "id": "1006",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "SSH",
        "techniqueid": "T1021.004"
    },
    {
        "description": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically requires being a member of an admin or otherwise privileged group on the remote system.",
        "id": "1007",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Scheduled Task/Job",
        "techniqueid": "T1053"
    },
    {
        "description": "Adversaries may abuse the?at.exe?utility to perform task scheduling for initial or recurring execution of malicious code. The?at?utility exists as an executable within Windows for scheduling tasks at a specified time and date. Using?at?requires that the Task Scheduler service be running, and the user to be logged on as a member of the local Administrators group.",
        "id": "1008",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "At (Windows)",
        "techniqueid": "T1053.002"
    },
    {
        "description": "Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The?schtasks?can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task.",
        "id": "1009",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Scheduled Task",
        "techniqueid": "T1053.005"
    },
    {
        "description": "Adversaries may abuse the?at?utility to perform task scheduling for initial or recurring execution of malicious code. The?at?command within Linux operating systems enables administrators to schedule tasks.",
        "id": "1010",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "At (Linux)",
        "techniqueid": "T1053.001"
    },
    {
        "description": "Adversaries may abuse the?Launchd?daemon to perform task scheduling for initial or recurring execution of malicious code. The?launchd?daemon, native to macOS, is responsible for loading and maintaining services within the operating system. This process loads the parameters for each launch-on-demand system-level daemon from the property list (plist) files found in?/System/Library/LaunchDaemons?and?/Library/LaunchDaemons?. These LaunchDaemons have property list files which point to the executables that will be launched .",
        "id": "1011",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Launchd",
        "techniqueid": "T1053.004"
    },
    {
        "description": "Adversaries may abuse the?cron?utility to perform task scheduling for initial or recurring execution of malicious code. The?cron?utility is a time-based job scheduler for Unix-like operating systems. The?crontab?file contains the schedule of cron entries to be run and the specified times for execution. Any?crontab?files are stored in operating system-specific file paths.",
        "id": "1012",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Cron",
        "techniqueid": "T1053.003"
    },
    {
        "description": "Adversaries may abuse systemd timers to perform task scheduling for initial or recurring execution of malicious code. Systemd timers are unit files with file extension?.timer?that control services. Timers can be set to run on a calendar event or after a time span relative to a starting point. They can be used as an alternative to?Cron?in Linux environments.",
        "id": "1013",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Systemd Timers",
        "techniqueid": "T1053.006"
    },
    {
        "description": "Adversaries may stop or disable services on a system to render those services unavailable to legitimate users. Stopping critical services can inhibit or stop response to an incident or aid in the adversary's overall objectives to cause damage to the environment.",
        "id": "1014",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Service Stop",
        "techniqueid": "T1489"
    },
    {
        "description": "Adversaries may gain access to and use third-party software suites installed within an enterprise network, such as administration, monitoring, and deployment systems, to move laterally through the network. Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, VNC, HBSS, Altiris, etc.).",
        "id": "1015",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Software Deployment Tools",
        "techniqueid": "T1072"
    },
    {
        "description": "Adversaries can steal user application access tokens as a means of acquiring credentials to access remote systems and resources. This can occur through social engineering and typically requires user action to grant access.",
        "id": "1016",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Steal Application Access Token",
        "techniqueid": "T1528"
    },
    {
        "description": "Adversaries may abuse system services or daemons to execute commands or programs. Adversaries can execute malicious content by interacting with or creating services. Many services are set to run at boot, which can aid in achieving persistence (Create or Modify System Process), but adversaries can also abuse services for one-time or temporary execution.",
        "id": "1017",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "System Services",
        "techniqueid": "T1569"
    },
    {
        "description": "Adversaries may abuse launchctl to execute commands or programs. Launchctl controls the macOS launchd process, which handles things like?Launch Agents and?Launch Daemons, but can execute other commands or programs itself. Launchctl supports taking subcommands on the command-line, interactively, or even redirected from standard input.",
        "id": "1018",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Launchctl",
        "techniqueid": "T1569.001"
    },
    {
        "description": "Adversaries may exfiltrate data by transferring the data, including backups of cloud environments, to another cloud account they control on the same service to avoid typical file transfers/downloads and network-based exfiltration detection.",
        "id": "1019",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Transfer Data to Cloud Account",
        "techniqueid": "T1537"
    },
    {
        "description": "Adversaries may use alternate authentication material, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls.",
        "id": "1020",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Use Alternate Authentication Material",
        "techniqueid": "T1550"
    },
    {
        "description": "Adversaries may \"pass the hash\" using stolen password hashes to move laterally within an environment, bypassing normal system access controls. Pass the hash (PtH) is a method of authenticating as a user without having access to the user's cleartext password. This method bypasses standard authentication steps that require a cleartext password, moving directly into the portion of the authentication that uses the password hash. In this technique, valid password hashes for the account being used are captured using a Credential Access technique. Captured hashes are used with PtH to authenticate as that user. Once authenticated, PtH may be used to perform actions on local or remote systems.",
        "id": "1021",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Pass the Hash",
        "techniqueid": "T1550.002"
    },
    {
        "description": "Adversaries may \"pass the ticket\" using stolen Kerberos tickets to move laterally within an environment, bypassing normal system access controls. Pass the ticket (PtT) is a method of authenticating to a system using Kerberos tickets without having access to an account's password. Kerberos authentication can be used as the first step to lateral movement to a remote system.",
        "id": "1022",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Pass the Ticket",
        "techniqueid": "T1550.003"
    },
    {
        "description": "Adversaries may obtain and abuse credentials of a cloud account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. In some cases, cloud accounts may be federated with traditional identity management system, such as Window Active Directory.",
        "id": "1023",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Cloud Accounts",
        "techniqueid": "T1078.004"
    },
    {
        "description": "Adversaries may abuse Windows Management Instrumentation (WMI) to achieve execution. WMI is a Windows administration feature that provides a uniform environment for local and remote access to Windows system components. It relies on the WMI service for local and remote access and the server message block (SMB) and Remote Procedure Call Service (RPCS) for remote access. RPCS operates over port 135.",
        "id": "1024",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Windows Management Instrumentation",
        "techniqueid": "T1047"
    },
    {
        "description": "Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk. An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.",
        "id": "1025",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Abuse Elevation Control Mechanism",
        "techniqueid": "T1548"
    },
    {
        "description": "Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.",
        "id": "1026",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Bypass User Account Control",
        "techniqueid": "T1548.002"
    },
    {
        "description": "Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.",
        "id": "1027",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Access Token Manipulation",
        "techniqueid": "T1134"
    },
    {
        "description": "Adversaries may duplicate then impersonate another user's token to escalate privileges and bypass access controls. An adversary can create a new access token that duplicates an existing token using?DuplicateToken(Ex). The token can then be used with?ImpersonateLoggedOnUser?to allow the calling thread to impersonate a logged on user's security context, or with?SetThreadToken?to assign the impersonated token to a thread.",
        "id": "1028",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Token Impersonation/Theft",
        "techniqueid": "T1134.001"
    },
    {
        "description": "Adversaries may create a new process with a duplicated token to escalate privileges and bypass access controls. An adversary can duplicate a desired access token with?DuplicateToken(Ex)?and use it with?CreateProcessWithTokenW?to create a new process running under the security context of the impersonated user. This is useful for creating a new process under the security context of a different user.",
        "id": "1029",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Create Process with Token",
        "techniqueid": "T1134.002"
    },
    {
        "description": "Adversaries may make and impersonate tokens to escalate privileges and bypass access controls. If an adversary has a username and password but the user is not logged onto the system, the adversary can then create a logon session for the user using the?LogonUser?function. The function will return a copy of the new session's access token and the adversary can use?SetThreadToken?to assign the token to a thread.",
        "id": "1030",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Make and Impersonate Token",
        "techniqueid": "T1134.003"
    },
    {
        "description": "Adversaries may manipulate accounts to maintain access to victim systems. Account manipulation may consist of any action that preserves adversary access to a compromised account, such as modifying credentials or permission groups. These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials. In order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain.",
        "id": "1031",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Account Manipulation",
        "techniqueid": "T1098"
    },
    {
        "description": "Adversaries may grant additional permission levels, such as ReadPermission or FullAccess, to maintain persistent access to an adversary-controlled email account. The?Add-MailboxPermission?PowerShell?cmdlet, available in on-premises Exchange and in the cloud-based service Office 365, adds permissions to a mailbox.",
        "id": "1032",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Exchange Email Delegate Permissions",
        "techniqueid": "T1098.002"
    },
    {
        "description": "An adversary may add the Global Administrator role to an adversary-controlled account to maintain persistent access to an Office 365 tenant. With sufficient permissions, a compromised account can gain almost unlimited access to data and settings (including the ability to reset the passwords of other admins) via the global admin role.",
        "id": "1033",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Add Office 365 Global Administrator Role",
        "techniqueid": "T1098.003"
    },
    {
        "description": "Adversaries may add adversary-controlled credentials to a cloud account to maintain persistent access to victim accounts and instances within the environment.",
        "id": "1034",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Additional Cloud Credentials",
        "techniqueid": "T1098.001"
    },
    {
        "description": "Adversaries may modify the kernel to automatically execute programs on system boot. Loadable Kernel Modules (LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. ?",
        "id": "1035",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Kernel Modules and Extensions",
        "techniqueid": "T1547.006"
    },
    {
        "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of?Unix Shell?while Windows installations include the?Windows Command Shell?and?PowerShell.",
        "id": "1036",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Command and Scripting Interpreter",
        "techniqueid": "T1059"
    },
    {
        "description": "Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the?Start-Process?cmdlet which can be used to run an executable and the?Invoke-Command?cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).",
        "id": "1037",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "PowerShell",
        "techniqueid": "T1059.001"
    },
    {
        "description": "Adversaries may abuse scripting or built-in command line interpreters (CLI) on network devices to execute malicious command and payloads. The CLI is the primary means through which users and administrators interact with the device in order to view system information, modify device operations, or perform diagnostic and administrative functions. CLIs typically contain various permission levels required for different commands.",
        "id": "1038",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Network Device CLI",
        "techniqueid": "T1059.008"
    },
    {
        "description": "Adversaries may create an account to maintain access to victim systems. With a sufficient level of access, creating such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.",
        "id": "1039",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Create Account",
        "techniqueid": "T1136"
    },
    {
        "description": "Adversaries may create a local account to maintain access to victim systems. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service. With a sufficient level of access, the?net user /add?command can be used to create a local account.",
        "id": "1040",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Local Account",
        "techniqueid": "T1136.001"
    },
    {
        "description": "Adversaries may create a domain account to maintain access to victim systems. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover user, administrator, and service accounts. With a sufficient level of access, the?net user /add /domain?command can be used to create a domain account.",
        "id": "1041",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Domain Account",
        "techniqueid": "T1136.002"
    },
    {
        "description": "Adversaries may create a cloud account to maintain access to victim systems. With a sufficient level of access, such accounts may be used to establish secondary credentialed access that does not require persistent remote access tools to be deployed on the system.",
        "id": "1042",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Cloud Account",
        "techniqueid": "T1136.003"
    },
    {
        "description": "Adversaries may create or modify systemd services to repeatedly execute malicious payloads as part of persistence. The systemd service manager is commonly used for managing background daemon processes (also known as services) and other system resources. Systemd is the default initialization (init) system on many Linux distributions starting with Debian 8, Ubuntu 15.04, CentOS 7, RHEL 7, Fedora 15, and replaces legacy init systems including SysVinit and Upstart while remaining backwards compatible with the aforementioned init systems.",
        "id": "1043",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Systemd Service",
        "techniqueid": "T1543.002"
    },
    {
        "description": "Adversaries may modify the configuration settings of a domain to evade defenses and/or escalate privileges in domain environments. Domains provide a centralized means of managing how computer resources (ex: computers, user accounts) can act, and interact with each other, on a network. The policy of the domain also includes configuration settings that may apply between domains in a multi-domain/forest environment. Modifications to domain settings may include altering domain Group Policy Objects (GPOs) or changing trust settings for domains, including federation trusts.",
        "id": "1044",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Domain Policy Modification",
        "techniqueid": "T1484"
    },
    {
        "description": "Adversaries may add new domain trusts or modify the properties of existing domain trusts to evade defenses and/or elevate privileges. Domain trust details, such as whether or not a domain is federated, allow authentication and authorization properties to apply between domains for the purpose of accessing shared resources. These trust objects may include accounts, credentials, and other authentication material applied to servers, tokens, and domains.",
        "id": "1045",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Domain Trust Modification",
        "techniqueid": "T1484.002"
    },
    {
        "description": "Adversaries may establish persistence and elevate privileges by executing malicious content triggered by a Windows Management Instrumentation (WMI) event subscription. WMI can be used to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Examples of events that may be subscribed to are the wall clock time, user loging, or the computer's uptime.",
        "id": "1046",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Windows Management Instrumentation Event Subscription",
        "techniqueid": "T1546.003"
    },
    {
        "description": "Adversaries may attempt to take advantage of a weakness in an Internet-facing computer or program using software, data, or commands in order to cause unintended or unanticipated behavior. The weakness in the system can be a bug, a glitch, or a design vulnerability. These applications are often websites, but can include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other applications with Internet accessible open sockets, such as web servers and related services. Depending on the flaw being exploited this may include?Exploitation for Defense Evasion.",
        "id": "1047",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Exploit Public-Facing Application",
        "techniqueid": "T1190"
    },
    {
        "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.?A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.",
        "id": "1048",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Exploitation of Remote Services",
        "techniqueid": "T1210"
    },
    {
        "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).",
        "id": "1049",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "File and Directory Permissions Modification",
        "techniqueid": "T1222"
    },
    {
        "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).",
        "id": "1050",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Windows File and Directory Permissions Modification",
        "techniqueid": "T1222.001"
    },
    {
        "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).",
        "id": "1051",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Linux and Mac File and Directory Permissions Modification",
        "techniqueid": "T1222.002"
    },
    {
        "description": "Adversaries may overwrite or corrupt the flash memory contents of system BIOS or other firmware in devices attached to a system in order to render them inoperable or unable to boot. Firmware is software that is loaded and executed from non-volatile memory on hardware devices in order to initialize and manage device functionality. These devices could include the motherboard, hard drive, or video cards.",
        "id": "1052",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Firmware Corruption",
        "techniqueid": "T1495"
    },
    {
        "description": "Adversaries may forge credential materials that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies, tokens, or other materials to authenticate and authorize user access.",
        "id": "1053",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Forge Web Credentials",
        "techniqueid": "T1606"
    },
    {
        "description": "An adversary may forge SAML tokens with any permissions claims and lifetimes if they possess a valid SAML token-signing certificate. The default lifetime of a SAML token is one hour, but the validity period can be specified in the?NotOnOrAfter?value of the?conditions ...?element in a token. This value can be changed using the?AccessTokenLifetime?in a?LifetimeTokenPolicy. Forged SAML tokens enable adversaries to authenticate across services that use SAML 2.0 as an SSO (single sign-on) mechanism.",
        "id": "1054",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "SAML Tokens",
        "techniqueid": "T1606.002"
    },
    {
        "description": "Adversaries may implant cloud container images with malicious code to establish persistence. Amazon Web Service (AWS) Amazon Machine Images (AMI), Google Cloud Platform (GCP) Images, and Azure Images as well as popular container runtimes such as Docker can be implanted or backdoored. Depending on how the infrastructure is provisioned, this could provide persistent access if the infrastructure provisioning tool is instructed to always use the latest image.",
        "id": "1055",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Implant Container Image",
        "techniqueid": "T1525"
    },
    {
        "description": "Adversaries may install code on externally facing portals, such as a VPN login page, to capture and transmit credentials of users who attempt to log into the service. For example, a compromised login page may log provided user credentials before logging the user in to the service.",
        "id": "1056",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Web Portal Capture",
        "techniqueid": "T1056.003"
    },
    {
        "description": "Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows or pluggable authentication modules (PAM) on Unix-based systems, responsible for gathering, storing, and validating credentials.",
        "id": "1057",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Modify Authentication Process",
        "techniqueid": "T1556"
    },
    {
        "description": "Adversaries may patch the authentication process on a domain controller to bypass the typical authentication mechanisms and enable access to accounts.",
        "id": "1058",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Domain Controller Authentication",
        "techniqueid": "T1556.001"
    },
    {
        "description": "Adversaries may modify pluggable authentication modules (PAM) to access user credentials or enable otherwise unwarranted access to accounts. PAM is a modular system of configuration files, libraries, and executable files which guide authentication for many services. The most common authentication module is?pam_unix.so, which retrieves, sets, and verifies account authentication information in?/etc/passwd?and?/etc/shadow.",
        "id": "1059",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Pluggable Authentication Modules",
        "techniqueid": "T1556.003"
    },
    {
        "description": "Adversaries may use?Patch System Image?to hard code a password in the operating system, thus bypassing of native authentication mechanisms for local accounts on network devices.",
        "id": "1060",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Network Device Authentication",
        "techniqueid": "T1556.004"
    },
    {
        "description": "Adversaries may make changes to the operating system of embedded network devices to weaken defenses and provide new capabilities for themselves. On such devices, the operating systems are typically monolithic and most of the device functionality and capabilities are contained within a single file.",
        "id": "1061",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Modify System Image",
        "techniqueid": "T1601"
    },
    {
        "description": "Adversaries may modify the operating system of a network device to introduce new capabilities or weaken existing defenses. Some network devices are built with a monolithic architecture, where the entire operating system and most of the functionality of the device is contained within a single file. Adversaries may change this file in storage, to be loaded in a future boot, or in memory during runtime.",
        "id": "1062",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Patch System Image",
        "techniqueid": "T1601.001"
    },
    {
        "description": "Adversaries may install an older version of the operating system of a network device to weaken security. Older operating system versions on network devices often have weaker encryption ciphers and, in general, fewer/less updated defensive features.",
        "id": "1063",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Downgrade System Image",
        "techniqueid": "T1601.002"
    },
    {
        "description": "Adversaries may bridge network boundaries by compromising perimeter network devices. Breaching these devices may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.",
        "id": "1064",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Network Boundary Bridging",
        "techniqueid": "T1599"
    },
    {
        "description": "Adversaries may bridge network boundaries by modifying a network device��s Network Address Translation (NAT) configuration. Malicious modifications to NAT may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.",
        "id": "1065",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Network Address Translation Traversal",
        "techniqueid": "T1599.001"
    },
    {
        "description": "Adversaries may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password, from the operating system and software. Credentials can then be used to perform?Lateral Movement?and access restricted information.",
        "id": "1066",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "OS Credential Dumping",
        "techniqueid": "T1003"
    },
    {
        "description": "Adversaries may attempt to access credentials and other sensitive information by abusing a Windows Domain Controller's application programming interface (API) to simulate the replication process from a remote domain controller using a technique called DCSync.",
        "id": "1067",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "DCSync",
        "techniqueid": "T1003.006"
    },
    {
        "description": "Adversaries may attempt to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS). After a user logs on, the system generates and stores a variety of credential materials in LSASS process memory. These credential materials can be harvested by an administrative user or SYSTEM and used to conduct?Lateral Movement?using?Use Alternate Authentication Material.",
        "id": "1068",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "LSASS Memory",
        "techniqueid": "T1003.001"
    },
    {
        "description": "Adversaries may attempt to extract credential material from the Security Account Manager (SAM) database either through in-memory techniques or through the Windows Registry where the SAM database is stored. The SAM is a database file that contains local accounts for the host, typically those found with the?net user?command. Enumerating the SAM database requires SYSTEM level access.",
        "id": "1069",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Security Account Manager",
        "techniqueid": "T1003.002"
    },
    {
        "description": "Adversaries may gather credentials from information stored in the Proc filesystem or?/proc. The Proc filesystem on Linux contains a great deal of information regarding the state of the running operating system. Processes running with root privileges can use this facility to scrape live memory of other running programs. If any of these programs store passwords in clear text or password hashes in memory, these values can then be harvested for either usage or brute force attacks, respectively.",
        "id": "1070",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Proc Filesystem",
        "techniqueid": "T1003.007"
    },
    {
        "description": "Adversaries may attempt to dump the contents of?/etc/passwd?and?/etc/shadow?to enable offline password cracking. Most modern Linux operating systems use a combination of?/etc/passwd?and?/etc/shadow?to store user account information including password hashes in?/etc/shadow. By default,?/etc/shadow?is only readable by the root user.",
        "id": "1071",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "/etc/passwd and /etc/shadow",
        "techniqueid": "T1003.008"
    },
    {
        "description": "Adversaries may attempt to access cached domain credentials used to allow authentication to occur in the event a domain controller is unavailable.",
        "id": "1072",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Cached Domain Credentials",
        "techniqueid": "T1003.005"
    },
    {
        "description": "Adversaries with SYSTEM access to a host may attempt to access Local Security Authority (LSA) secrets, which can contain a variety of different credential materials, such as credentials for service accounts. LSA secrets are stored in the registry at?HKEY_LOCAL_MACHINE\\SECURITY\\Policy\\Secrets. LSA secrets can also be dumped from memory.",
        "id": "1073",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "LSA Secrets",
        "techniqueid": "T1003.004"
    },
    {
        "description": "Adversaries may attempt to access or create a copy of the Active Directory domain database in order to steal credential information, as well as obtain other information about domain members such as devices, users, and access rights. By default, the NTDS file (NTDS.dit) is located in?%SystemRoot%\\NTDS\\Ntds.dit?of a domain controller.",
        "id": "1074",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "NTDS",
        "techniqueid": "T1003.003"
    },
    {
        "description": "Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control.",
        "id": "1075",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Pre-OS Boot",
        "techniqueid": "T1542"
    },
    {
        "description": "Adversaries may modify system firmware to persist on systems.The BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer.",
        "id": "1076",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "System Firmware",
        "techniqueid": "T1542.001"
    },
    {
        "description": "Adversaries may use bootkits to persist on systems. Bootkits reside at a layer below the operating system and may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.",
        "id": "1077",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Bootkit",
        "techniqueid": "T1542.003"
    },
    {
        "description": "Adversaries may abuse netbooting to load an unauthorized network device operating system from a Trivial File Transfer Protocol (TFTP) server. TFTP boot (netbooting) is commonly used by network administrators to load configuration-controlled network device images from a centralized management server. Netbooting is one option in the boot sequence and can be used to centralize, manage, and control device images.",
        "id": "1078",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "TFTP Boot",
        "techniqueid": "T1542.005"
    },
    {
        "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process.",
        "id": "1079",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Process Injection",
        "techniqueid": "T1055"
    },
    {
        "description": "Adversaries may inject malicious code into processes via ptrace (process trace) system calls in order to evade process-based defenses as well as possibly elevate privileges. Ptrace system call injection is a method of executing arbitrary code in the address space of a separate live process.",
        "id": "1080",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Ptrace System Calls",
        "techniqueid": "T1055.008"
    },
    {
        "description": "Adversaries may take control of preexisting sessions with remote services to move laterally in an environment. Users may use valid credentials to log into a service specifically designed to accept remote connections, such as telnet, SSH, and RDP. When a user logs into a service, a session will be established that will allow them to maintain a continuous interaction with that service.",
        "id": "1081",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Remote Service Session Hijacking",
        "techniqueid": "T1563"
    },
    {
        "description": "Adversaries may hijack a legitimate user's SSH session to move laterally within an environment. Secure Shell (SSH) is a standard means of remote access on Linux and macOS systems. It allows a user to connect to another system via an encrypted tunnel, commonly authenticating through a password, certificate or the use of an asymmetric encryption key pair.",
        "id": "1082",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "SSH Hijacking",
        "techniqueid": "T1563.001"
    },
    {
        "description": "Adversaries may hijack a legitimate user��s remote desktop session to move laterally within an environment. Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).",
        "id": "1083",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "RDP Hijacking",
        "techniqueid": "T1563.002"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.",
        "id": "1084",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Remote Desktop Protocol",
        "techniqueid": "T1021.001"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user.",
        "id": "1085",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "SMB/Windows Admin Shares",
        "techniqueid": "T1021.002"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to interact with remote systems using Windows Remote Management (WinRM). The adversary may then perform actions as the logged-on user.",
        "id": "1086",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Windows Remote Management",
        "techniqueid": "T1021.006"
    },
    {
        "description": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically requires being a member of an admin or otherwise privileged group on the remote system.",
        "id": "1087",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Scheduled Task/Job",
        "techniqueid": "T1053"
    },
    {
        "description": "Adversaries may abuse the?at.exe?utility to perform task scheduling for initial or recurring execution of malicious code. The?at?utility exists as an executable within Windows for scheduling tasks at a specified time and date. Using?at?requires that the Task Scheduler service be running, and the user to be logged on as a member of the local Administrators group.",
        "id": "1088",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "At (Windows)",
        "techniqueid": "T1053.002"
    },
    {
        "description": "Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The?schtasks?can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task.",
        "id": "1089",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Scheduled Task",
        "techniqueid": "T1053.005"
    },
    {
        "description": "Adversaries may abuse systemd timers to perform task scheduling for initial or recurring execution of malicious code. Systemd timers are unit files with file extension?.timer?that control services. Timers can be set to run on a calendar event or after a time span relative to a starting point. They can be used as an alternative to?Cron?in Linux environments.",
        "id": "1090",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Systemd Timers",
        "techniqueid": "T1053.006"
    },
    {
        "description": "Adversaries may abuse legitimate extensible development features of servers to establish persistent access to systems. Enterprise server applications may include features that allow developers to write and install software or scripts to extend the functionality of the main application. Adversaries may install malicious components to extend and abuse server applications.",
        "id": "1091",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Server Software Component",
        "techniqueid": "T1505"
    },
    {
        "description": "Adversaries may abuse Microsoft transport agents to establish persistent access to systems. Microsoft Exchange transport agents can operate on email messages passing through the transport pipeline to perform various tasks such as filtering spam, filtering malicious attachments, journaling, or adding a corporate signature to the end of all outgoing emails. Transport agents can be written by application developers and then compiled to .NET assemblies that are subsequently registered with the Exchange server. Transport agents will be invoked during a specified stage of email processing and carry out developer defined tasks.",
        "id": "1092",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Transport Agent",
        "techniqueid": "T1505.002"
    },
    {
        "description": "Adversaries may abuse SQL stored procedures to establish persistent access to systems. SQL Stored Procedures are code that can be saved and reused so that database users do not waste time rewriting frequently used SQL queries. Stored procedures can be invoked via SQL statements to the database using the procedure name or via defined events (e.g. when a SQL server application is started/restarted).",
        "id": "1093",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "SQL Stored Procedures",
        "techniqueid": "T1505.001"
    },
    {
        "description": "Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed binaries. Binaries signed with trusted digital certificates can execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files.",
        "id": "1094",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Signed Binary Proxy Execution",
        "techniqueid": "T1218"
    },
    {
        "description": "Adversaries may abuse msiexec.exe to proxy execution of malicious payloads. Msiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi). Msiexec.exe is digitally signed by Microsoft.",
        "id": "1095",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Msiexec",
        "techniqueid": "T1218.007"
    },
    {
        "description": "Adversaries may gain access to and use third-party software suites installed within an enterprise network, such as administration, monitoring, and deployment systems, to move laterally through the network. Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, VNC, HBSS, Altiris, etc.).",
        "id": "1096",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Software Deployment Tools",
        "techniqueid": "T1072"
    },
    {
        "description": "Adversaries may attempt to subvert Kerberos authentication by stealing or forging Kerberos tickets to enable?Pass the Ticket.",
        "id": "1097",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Steal or Forge Kerberos Tickets",
        "techniqueid": "T1558"
    },
    {
        "description": "Adversaries who have the KRBTGT account password hash may forge Kerberos ticket-granting tickets (TGT), also known as a golden ticket. Golden tickets enable adversaries to generate authentication material for any account in Active Directory.",
        "id": "1098",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Golden Ticket",
        "techniqueid": "T1558.001"
    },
    {
        "description": "Adversaries who have the password hash of a target service account (e.g. SharePoint, MSSQL) may forge Kerberos ticket granting service (TGS) tickets, also known as silver tickets. Kerberos TGS tickets are also known as service tickets.",
        "id": "1099",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Silver Ticket",
        "techniqueid": "T1558.002"
    },
    {
        "description": "Adversaries may abuse a valid Kerberos ticket-granting ticket (TGT) or sniff network traffic to obtain a ticket-granting service (TGS) ticket that may be vulnerable to?Brute Force.",
        "id": "1100",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Kerberoasting",
        "techniqueid": "T1558.003"
    },
    {
        "description": "Adversaries may abuse system services or daemons to execute commands or programs. Adversaries can execute malicious content by interacting with or creating services. Many services are set to run at boot, which can aid in achieving persistence (Create or Modify System Process), but adversaries can also abuse services for one-time or temporary execution.",
        "id": "1101",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "System Services",
        "techniqueid": "T1569"
    },
    {
        "description": "Adversaries may abuse the Windows service control manager to execute malicious commands or payloads. The Windows service control manager (services.exe) is an interface to manage and manipulate services. The service control manager is accessible to users via GUI components as well as system utilities such as?sc.exe?and?Net.",
        "id": "1102",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Service Execution",
        "techniqueid": "T1569.002"
    },
    {
        "description": "Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g.?Bash History), operating system or application-specific repositories (e.g.?Credentials in Registry), or other specialized files/artifacts (e.g.?Private Keys).",
        "id": "1103",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Unsecured Credentials",
        "techniqueid": "T1552"
    },
    {
        "description": "Adversaries may search the Registry on compromised systems for insecurely stored credentials. The Windows Registry stores configuration information that can be used by the system or other programs. Adversaries may query the Registry looking for credentials and passwords that have been stored for use by other programs or services. Sometimes these credentials are used for automatic logons.",
        "id": "1104",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Credentials in Registry",
        "techniqueid": "T1552.002"
    },
    {
        "description": "Adversaries may use alternate authentication material, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls.",
        "id": "1105",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Use Alternate Authentication Material",
        "techniqueid": "T1550"
    },
    {
        "description": "Adversaries may \"pass the hash\" using stolen password hashes to move laterally within an environment, bypassing normal system access controls. Pass the hash (PtH) is a method of authenticating as a user without having access to the user's cleartext password. This method bypasses standard authentication steps that require a cleartext password, moving directly into the portion of the authentication that uses the password hash. In this technique, valid password hashes for the account being used are captured using a Credential Access technique. Captured hashes are used with PtH to authenticate as that user. Once authenticated, PtH may be used to perform actions on local or remote systems.",
        "id": "1106",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Pass the Hash",
        "techniqueid": "T1550.002"
    },
    {
        "description": "Adversaries may \"pass the ticket\" using stolen Kerberos tickets to move laterally within an environment, bypassing normal system access controls. Pass the ticket (PtT) is a method of authenticating to a system using Kerberos tickets without having access to an account's password. Kerberos authentication can be used as the first step to lateral movement to a remote system.",
        "id": "1107",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Pass the Ticket",
        "techniqueid": "T1550.003"
    },
    {
        "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop. Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.",
        "id": "1108",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Valid Accounts",
        "techniqueid": "T1078"
    },
    {
        "description": "Adversaries may obtain and abuse credentials of a domain account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover users, administrators, and services.",
        "id": "1109",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Domain Accounts",
        "techniqueid": "T1078.002"
    },
    {
        "description": "Adversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.",
        "id": "1110",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Local Accounts",
        "techniqueid": "T1078.003"
    },
    {
        "description": "Adversaries may obtain and abuse credentials of a cloud account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. In some cases, cloud accounts may be federated with traditional identity management system, such as Window Active Directory.",
        "id": "1111",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Cloud Accounts",
        "techniqueid": "T1078.004"
    },
    {
        "description": "Adversaries may abuse Windows Management Instrumentation (WMI) to achieve execution. WMI is a Windows administration feature that provides a uniform environment for local and remote access to Windows system components. It relies on the WMI service for local and remote access and the server message block (SMB) and Remote Procedure Call Service (RPCS) for remote access. RPCS operates over port 135.",
        "id": "1112",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Windows Management Instrumentation",
        "techniqueid": "T1047"
    },
    {
        "description": "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.",
        "id": "1113",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "Brute Force",
        "techniqueid": "T1110"
    },
    {
        "description": "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.",
        "id": "1114",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "Password Guessing",
        "techniqueid": "T1110.001"
    },
    {
        "description": "Adversaries may use password cracking to attempt to recover usable credentials, such as plaintext passwords, when credential material such as password hashes are obtained.?OS Credential Dumping?is used to obtain password hashes, this may only get an adversary so far when?Pass the Hash?is not an option. Techniques to systematically guess the passwords used to compute hashes are available, or the adversary may use a pre-computed rainbow table to crack hashes. Cracking hashes is usually done on adversary-controlled systems outside of the target network. The resulting plaintext password resulting from a successfully cracked hash may be used to log into systems, resources, and services in which the account has access.",
        "id": "1115",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "Password Cracking",
        "techniqueid": "T1110.002"
    },
    {
        "description": "Adversaries may use a single or small list of commonly used passwords against many different accounts to attempt to acquire valid account credentials. Password spraying uses one password (e.g. 'Password01'), or a small list of commonly used passwords, that may match the complexity policy of the domain. Logins are attempted with that password against many different accounts on a network to avoid account lockouts that would normally occur when brute forcing a single account with many passwords.",
        "id": "1116",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "Password Spraying",
        "techniqueid": "T1110.003"
    },
    {
        "description": "Adversaries may use credentials obtained from breach dumps of unrelated accounts to gain access to target accounts through credential overlap. Occasionally, large numbers of username and password pairs are dumped online when a website or service is compromised and the user account credentials accessed. The information may be useful to an adversary attempting to compromise accounts by taking advantage of the tendency for users to use the same passwords across personal and business accounts.",
        "id": "1117",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "Credential Stuffing",
        "techniqueid": "T1110.004"
    },
    {
        "description": "Adversaries may gather credential material by invoking or forcing a user to automatically provide authentication information through a mechanism in which they can intercept.",
        "id": "1118",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "Forced Authentication",
        "techniqueid": "T1187"
    },
    {
        "description": "Adversaries may make changes to the operating system of embedded network devices to weaken defenses and provide new capabilities for themselves. On such devices, the operating systems are typically monolithic and most of the device functionality and capabilities are contained within a single file.",
        "id": "1119",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "Modify System Image",
        "techniqueid": "T1601"
    },
    {
        "description": "Adversaries may modify the operating system of a network device to introduce new capabilities or weaken existing defenses. Some network devices are built with a monolithic architecture, where the entire operating system and most of the functionality of the device is contained within a single file. Adversaries may change this file in storage, to be loaded in a future boot, or in memory during runtime.",
        "id": "1120",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "Patch System Image",
        "techniqueid": "T1601.001"
    },
    {
        "description": "Adversaries may install an older version of the operating system of a network device to weaken security. Older operating system versions on network devices often have weaker encryption ciphers and, in general, fewer/less updated defensive features.",
        "id": "1121",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "Downgrade System Image",
        "techniqueid": "T1601.002"
    },
    {
        "description": "Adversaries may bridge network boundaries by compromising perimeter network devices. Breaching these devices may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.",
        "id": "1122",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "Network Boundary Bridging",
        "techniqueid": "T1599"
    },
    {
        "description": "Adversaries may bridge network boundaries by modifying a network device��s Network Address Translation (NAT) configuration. Malicious modifications to NAT may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.",
        "id": "1123",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "Network Address Translation Traversal",
        "techniqueid": "T1599.001"
    },
    {
        "description": "Adversaries may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password, from the operating system and software. Credentials can then be used to perform?Lateral Movement?and access restricted information.",
        "id": "1124",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "OS Credential Dumping",
        "techniqueid": "T1003"
    },
    {
        "description": "Adversaries may attempt to access credentials and other sensitive information by abusing a Windows Domain Controller's application programming interface (API) to simulate the replication process from a remote domain controller using a technique called DCSync.",
        "id": "1125",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "DCSync",
        "techniqueid": "T1003.006"
    },
    {
        "description": "Adversaries may attempt to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS). After a user logs on, the system generates and stores a variety of credential materials in LSASS process memory. These credential materials can be harvested by an administrative user or SYSTEM and used to conduct?Lateral Movement?using?Use Alternate Authentication Material.",
        "id": "1126",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "LSASS Memory",
        "techniqueid": "T1003.001"
    },
    {
        "description": "Adversaries may attempt to extract credential material from the Security Account Manager (SAM) database either through in-memory techniques or through the Windows Registry where the SAM database is stored. The SAM is a database file that contains local accounts for the host, typically those found with the?net user?command. Enumerating the SAM database requires SYSTEM level access.",
        "id": "1127",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "Security Account Manager",
        "techniqueid": "T1003.002"
    },
    {
        "description": "Adversaries may gather credentials from information stored in the Proc filesystem or?/proc. The Proc filesystem on Linux contains a great deal of information regarding the state of the running operating system. Processes running with root privileges can use this facility to scrape live memory of other running programs. If any of these programs store passwords in clear text or password hashes in memory, these values can then be harvested for either usage or brute force attacks, respectively.",
        "id": "1128",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "Proc Filesystem",
        "techniqueid": "T1003.007"
    },
    {
        "description": "Adversaries may attempt to dump the contents of?/etc/passwd?and?/etc/shadow?to enable offline password cracking. Most modern Linux operating systems use a combination of?/etc/passwd?and?/etc/shadow?to store user account information including password hashes in?/etc/shadow. By default,?/etc/shadow?is only readable by the root user.",
        "id": "1129",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "/etc/passwd and /etc/shadow",
        "techniqueid": "T1003.008"
    },
    {
        "description": "Adversaries may attempt to access cached domain credentials used to allow authentication to occur in the event a domain controller is unavailable.",
        "id": "1130",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "Cached Domain Credentials",
        "techniqueid": "T1003.005"
    },
    {
        "description": "Adversaries with SYSTEM access to a host may attempt to access Local Security Authority (LSA) secrets, which can contain a variety of different credential materials, such as credentials for service accounts. LSA secrets are stored in the registry at?HKEY_LOCAL_MACHINE\\SECURITY\\Policy\\Secrets. LSA secrets can also be dumped from memory.",
        "id": "1131",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "LSA Secrets",
        "techniqueid": "T1003.004"
    },
    {
        "description": "Adversaries may attempt to access or create a copy of the Active Directory domain database in order to steal credential information, as well as obtain other information about domain members such as devices, users, and access rights. By default, the NTDS file (NTDS.dit) is located in?%SystemRoot%\\NTDS\\Ntds.dit?of a domain controller.",
        "id": "1132",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "NTDS",
        "techniqueid": "T1003.003"
    },
    {
        "description": "Adversaries may hijack a legitimate user's SSH session to move laterally within an environment. Secure Shell (SSH) is a standard means of remote access on Linux and macOS systems. It allows a user to connect to another system via an encrypted tunnel, commonly authenticating through a password, certificate or the use of an asymmetric encryption key pair.",
        "id": "1133",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "SSH Hijacking",
        "techniqueid": "T1563.001"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user.",
        "id": "1134",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "SMB/Windows Admin Shares",
        "techniqueid": "T1021.002"
    },
    {
        "description": "Adversaries may gain access to and use third-party software suites installed within an enterprise network, such as administration, monitoring, and deployment systems, to move laterally through the network. Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, VNC, HBSS, Altiris, etc.).",
        "id": "1135",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "Software Deployment Tools",
        "techniqueid": "T1072"
    },
    {
        "description": "Adversaries may attempt to subvert Kerberos authentication by stealing or forging Kerberos tickets to enable?Pass the Ticket.",
        "id": "1136",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "Steal or Forge Kerberos Tickets",
        "techniqueid": "T1558"
    },
    {
        "description": "Adversaries who have the password hash of a target service account (e.g. SharePoint, MSSQL) may forge Kerberos ticket granting service (TGS) tickets, also known as silver tickets. Kerberos TGS tickets are also known as service tickets.",
        "id": "1137",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "Silver Ticket",
        "techniqueid": "T1558.002"
    },
    {
        "description": "Adversaries may abuse a valid Kerberos ticket-granting ticket (TGT) or sniff network traffic to obtain a ticket-granting service (TGS) ticket that may be vulnerable to?Brute Force.",
        "id": "1138",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "Kerberoasting",
        "techniqueid": "T1558.003"
    },
    {
        "description": "Adversaries may reveal credentials of accounts that have disabled Kerberos preauthentication by?Password Cracking?Kerberos messages.",
        "id": "1139",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "AS-REP Roasting",
        "techniqueid": "T1558.004"
    },
    {
        "description": "Adversaries may exfiltrate data by transferring the data, including backups of cloud environments, to another cloud account they control on the same service to avoid typical file transfers/downloads and network-based exfiltration detection.",
        "id": "1140",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "Transfer Data to Cloud Account",
        "techniqueid": "T1537"
    },
    {
        "description": "Adversaries may \"pass the ticket\" using stolen Kerberos tickets to move laterally within an environment, bypassing normal system access controls. Pass the ticket (PtT) is a method of authenticating to a system using Kerberos tickets without having access to an account's password. Kerberos authentication can be used as the first step to lateral movement to a remote system.",
        "id": "1141",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "Pass the Ticket",
        "techniqueid": "T1550.003"
    },
    {
        "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop. Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.",
        "id": "1142",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "Valid Accounts",
        "techniqueid": "T1078"
    },
    {
        "description": "Adversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.",
        "id": "1143",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "Local Accounts",
        "techniqueid": "T1078.003"
    },
    {
        "description": "Adversaries may obtain and abuse credentials of a cloud account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. In some cases, cloud accounts may be federated with traditional identity management system, such as Window Active Directory.",
        "id": "1144",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "Cloud Accounts",
        "techniqueid": "T1078.004"
    },
    {
        "description": "Adversaries may obtain and abuse credentials of a default account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Default accounts are those that are built-into an OS, such as the Guest or Administrator accounts on Windows systems or default factory/provider set accounts on other types of systems, software, or devices.",
        "id": "1145",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "Default Accounts",
        "techniqueid": "T1078.001"
    },
    {
        "description": "Adversaries may attempt to get a listing of accounts on a system or within an environment. This information can help adversaries determine which accounts exist to aid in follow-on behavior.",
        "id": "1146",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Account Discovery",
        "techniqueid": "T1087"
    },
    {
        "description": "Adversaries may attempt to get a listing of local system accounts. This information can help adversaries determine which local accounts exist on a system to aid in follow-on behavior.",
        "id": "1147",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Local Account",
        "techniqueid": "T1087.001"
    },
    {
        "description": "Adversaries may attempt to get a listing of domain accounts. This information can help adversaries determine which domain accounts exist to aid in follow-on behavior.",
        "id": "1148",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Domain Account",
        "techniqueid": "T1087.002"
    },
    {
        "description": "Adversaries may manipulate accounts to maintain access to victim systems. Account manipulation may consist of any action that preserves adversary access to a compromised account, such as modifying credentials or permission groups. These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials. In order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain.",
        "id": "1149",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Account Manipulation",
        "techniqueid": "T1098"
    },
    {
        "description": "Adversaries may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password, from the operating system and software. Credentials can then be used to perform?Lateral Movement?and access restricted information.",
        "id": "1150",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "OS Credential Dumping",
        "techniqueid": "T1003"
    },
    {
        "description": "Adversaries may attempt to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS). After a user logs on, the system generates and stores a variety of credential materials in LSASS process memory. These credential materials can be harvested by an administrative user or SYSTEM and used to conduct?Lateral Movement?using?Use Alternate Authentication Material.",
        "id": "1151",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "LSASS Memory",
        "techniqueid": "T1003.001"
    },
    {
        "description": "Adversaries may attempt to extract credential material from the Security Account Manager (SAM) database either through in-memory techniques or through the Windows Registry where the SAM database is stored. The SAM is a database file that contains local accounts for the host, typically those found with the?net user?command. Enumerating the SAM database requires SYSTEM level access.",
        "id": "1152",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Security Account Manager",
        "techniqueid": "T1003.002"
    },
    {
        "description": "Adversaries may abuse netbooting to load an unauthorized network device operating system from a Trivial File Transfer Protocol (TFTP) server. TFTP boot (netbooting) is commonly used by network administrators to load configuration-controlled network device images from a centralized management server. Netbooting is one option in the boot sequence and can be used to centralize, manage, and control device images.",
        "id": "1153",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "TFTP Boot",
        "techniqueid": "T1542.005"
    },
    {
        "description": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically requires being a member of an admin or otherwise privileged group on the remote system.",
        "id": "1154",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Scheduled Task/Job",
        "techniqueid": "T1053"
    },
    {
        "description": "Adversaries may abuse the?at.exe?utility to perform task scheduling for initial or recurring execution of malicious code. The?at?utility exists as an executable within Windows for scheduling tasks at a specified time and date. Using?at?requires that the Task Scheduler service be running, and the user to be logged on as a member of the local Administrators group.",
        "id": "1155",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "At (Windows)",
        "techniqueid": "T1053.002"
    },
    {
        "description": "Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The?schtasks?can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task.",
        "id": "1156",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Scheduled Task",
        "techniqueid": "T1053.005"
    },
    {
        "description": "Adversaries may undermine security controls that will either warn users of untrusted activity or prevent execution of untrusted programs. Operating systems and security products may contain mechanisms to identify programs or websites as possessing some level of trust. Examples of such features would include a program being allowed to run because it is signed by a valid code signing certificate, a program prompting the user with a warning because it has an attribute set from being downloaded from the Internet, or getting an indication that you are about to connect to an untrusted site.",
        "id": "1157",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Subvert Trust Controls",
        "techniqueid": "T1553"
    },
    {
        "description": "Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers. Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate. Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.",
        "id": "1158",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Install Root Certificate",
        "techniqueid": "T1553.004"
    },
    {
        "description": "Adversaries may modify the SSH?authorized_keys?file to maintain persistence on a victim host. Linux distributions and macOS commonly use key-based authentication to secure the authentication process of SSH sessions for remote management. The?authorized_keys?file in SSH specifies the SSH keys that can be used for logging into the user account for which the file is configured. This file is usually found in the user's home directory under?<user-home>/.ssh/authorized_keys. Users may edit the system��s SSH config file to modify the directives PubkeyAuthentication and RSAAuthentication to the value \"yes\" to ensure public key and RSA authentication are enabled. The SSH config file is usually located under?/etc/ssh/sshd_config.",
        "id": "1159",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "SSH Authorized Keys",
        "techniqueid": "T1098.004"
    },
    {
        "description": "Adversaries may modify plist files to automatically run an application when a user logs in. Starting in Mac OS X 10.7 (Lion), users can specify certain applications to be re-opened when a user logs into their machine after reboot. While this is usually done via a Graphical User Interface (GUI) on an app-by-app basis, there are property list files (plist) that contain this information as well located at?~/Library/Preferences/com.apple.loginwindow.plist?and?~/Library/Preferences/ByHost/com.apple.loginwindow.* .plist.",
        "id": "1160",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Re-opened Applications",
        "techniqueid": "T1547.007"
    },
    {
        "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of?Unix Shell?while Windows installations include the?Windows Command Shell?and?PowerShell.",
        "id": "1161",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Command and Scripting Interpreter",
        "techniqueid": "T1059"
    },
    {
        "description": "Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the?Start-Process?cmdlet which can be used to run an executable and the?Invoke-Command?cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).",
        "id": "1162",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "PowerShell",
        "techniqueid": "T1059.001"
    },
    {
        "description": "Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as?Component Object Model?and the?Native API?through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.",
        "id": "1163",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Visual Basic",
        "techniqueid": "T1059.005"
    },
    {
        "description": "Adversaries may abuse JavaScript and/or JScript for execution. JavaScript (JS) is a platform-agnostic scripting language (compiled just-in-time at runtime) commonly associated with scripts in webpages, though JS can be executed in runtime environments outside the browser.",
        "id": "1164",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "JavaScript/JScript",
        "techniqueid": "T1059.007"
    },
    {
        "description": "Adversaries can perform command and control between compromised hosts on potentially disconnected networks using removable media to transfer commands from system to system. Both systems would need to be compromised, with the likelihood that an Internet-connected system was compromised first and the second through lateral movement by?Replication Through Removable Media. Commands and files would be relayed from the disconnected system to the Internet-connected system to which the adversary has direct access.",
        "id": "1165",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Communication Through Removable Media",
        "techniqueid": "T1092"
    },
    {
        "description": "Adversaries may establish persistence by executing malicious content triggered by user inactivity. Screensavers are programs that execute after a configurable time of user inactivity and consist of Portable Executable (PE) files with a .scr file extension. The Windows screensaver application scrnsave.scr is located in?C:\\Windows\\System32\\, and?C:\\Windows\\sysWOW64\\?on 64-bit Windows systems, along with screensavers included with base Windows installations.",
        "id": "1166",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Screensaver",
        "techniqueid": "T1546.002"
    },
    {
        "description": "Adversaries may gain persistence and elevate privileges by executing malicious content triggered by the Event Monitor Daemon (emond). Emond is a?Launch Daemon?that accepts events from various services, runs them through a simple rules engine, and takes action. The emond binary at?/sbin/emond?will load any rules from the?/etc/emond.d/rules/?directory and take action once an explicitly defined event takes place.",
        "id": "1167",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Emond",
        "techniqueid": "T1546.014"
    },
    {
        "description": "Adversaries may attempt to exfiltrate data over Bluetooth rather than the command and control channel. If the command and control network is a wired Internet connection, an attacker may opt to exfiltrate data using a Bluetooth communication channel.",
        "id": "1168",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Exfiltration Over Bluetooth",
        "techniqueid": "T1011.001"
    },
    {
        "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.?A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.",
        "id": "1169",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Exploitation of Remote Services",
        "techniqueid": "T1210"
    },
    {
        "description": "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as?Windows Remote Management?can also be used externally.",
        "id": "1170",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "External Remote Services",
        "techniqueid": "T1133"
    },
    {
        "description": "Adversaries may carry out malicious operations using a virtual instance to avoid detection. A wide variety of virtualization technologies exist that allow for the emulation of a computer or computing environment. By running malicious code inside of a virtual instance, adversaries can hide artifacts associated with their behavior from security tools that are unable to monitor activity inside the virtual instance. Additionally, depending on the virtual networking implementation (ex: bridged adapter), network traffic generated by the virtual instance can be difficult to trace back to the compromised host as the IP address and hostname might not match known values.",
        "id": "1171",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Run Virtual Instance",
        "techniqueid": "T1564.006"
    },
    {
        "description": "Adversaries may hide malicious Visual Basic for Applications (VBA) payloads embedded within MS Office documents by replacing the VBA source code with benign data.",
        "id": "1172",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "VBA Stomping",
        "techniqueid": "T1564.007"
    },
    {
        "description": "Adversaries may abuse inter-process communication (IPC) mechanisms for local code or command execution. IPC is typically used by processes to share data, communicate with each other, or synchronize execution. IPC is also commonly used to avoid situations such as deadlocks, which occurs when processes are stuck in a cyclic waiting pattern.",
        "id": "1173",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Inter-Process Communication",
        "techniqueid": "T1559"
    },
    {
        "description": "Adversaries may use Windows Dynamic Data Exchange (DDE) to execute arbitrary commands. DDE is a client-server protocol for one-time and/or continuous inter-process communication (IPC) between applications. Once a link is established, applications can autonomously exchange transactions consisting of strings, warm data links (notifications when a data item changes), hot data links (duplications of changes to a data item), and requests for command execution.",
        "id": "1174",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Dynamic Data Exchange",
        "techniqueid": "T1559.002"
    },
    {
        "description": "Adversaries may attempt to position themselves between two or more networked devices using a man-in-the-middle (MiTM) technique to support follow-on behaviors such as?Network Sniffing?or?Transmitted Data Manipulation. By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.",
        "id": "1175",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Man-in-the-Middle",
        "techniqueid": "T1557"
    },
    {
        "description": "By responding to LLMNR/NBT-NS network traffic, adversaries may spoof an authoritative source for name resolution to force communication with an adversary controlled system. This activity may be used to collect or relay authentication materials.",
        "id": "1176",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "LLMNR/NBT-NS Poisoning and SMB Relay",
        "techniqueid": "T1557.001"
    },
    {
        "description": "Adversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such as?Network Sniffing?or?Transmitted Data Manipulation.",
        "id": "1177",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "ARP Cache Poisoning",
        "techniqueid": "T1557.002"
    },
    {
        "description": "Adversaries may attempt to get a listing of services running on remote hosts, including those that may be vulnerable to remote software exploitation. Methods to acquire this information include port scans and vulnerability scans using tools that are brought onto a system.",
        "id": "1178",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Network Service Scanning",
        "techniqueid": "T1046"
    },
    {
        "description": "Adversaries may leverage Microsoft Office-based applications for persistence between startups. Microsoft Office is a fairly common application suite on Windows-based operating systems within an enterprise network. There are multiple mechanisms that can be used with Office for persistence when an Office-based application is started; this can include the use of Office Template Macros and add-ins.",
        "id": "1179",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Office Application Startup",
        "techniqueid": "T1137"
    },
    {
        "description": "Adversaries may abuse Microsoft Office templates to obtain persistence on a compromised system. Microsoft Office contains templates that are part of common Office applications and are used to customize styles. The base templates within the application are used each time an application starts.",
        "id": "1180",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Office Template Macros",
        "techniqueid": "T1137.001"
    },
    {
        "description": "Adversaries may take control of preexisting sessions with remote services to move laterally in an environment. Users may use valid credentials to log into a service specifically designed to accept remote connections, such as telnet, SSH, and RDP. When a user logs into a service, a session will be established that will allow them to maintain a continuous interaction with that service.",
        "id": "1181",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Remote Service Session Hijacking",
        "techniqueid": "T1563"
    },
    {
        "description": "Adversaries may hijack a legitimate user's SSH session to move laterally within an environment. Secure Shell (SSH) is a standard means of remote access on Linux and macOS systems. It allows a user to connect to another system via an encrypted tunnel, commonly authenticating through a password, certificate or the use of an asymmetric encryption key pair.",
        "id": "1182",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "SSH Hijacking",
        "techniqueid": "T1563.001"
    },
    {
        "description": "Adversaries may hijack a legitimate user��s remote desktop session to move laterally within an environment. Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).",
        "id": "1183",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "RDP Hijacking",
        "techniqueid": "T1563.002"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.",
        "id": "1184",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Remote Desktop Protocol",
        "techniqueid": "T1021.001"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to interact with remote machines by taking advantage of Distributed Component Object Model (DCOM). The adversary may then perform actions as the logged-on user.",
        "id": "1185",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Distributed Component Object Model",
        "techniqueid": "T1021.003"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into remote machines using Secure Shell (SSH). The adversary may then perform actions as the logged-on user.",
        "id": "1186",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "SSH",
        "techniqueid": "T1021.004"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to remotely control machines using Virtual Network Computing (VNC). The adversary may then perform actions as the logged-on user.",
        "id": "1187",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "VNC",
        "techniqueid": "T1021.005"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to interact with remote systems using Windows Remote Management (WinRM). The adversary may then perform actions as the logged-on user.",
        "id": "1188",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Windows Remote Management",
        "techniqueid": "T1021.006"
    },
    {
        "description": "Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed binaries. Binaries signed with trusted digital certificates can execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files.",
        "id": "1189",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Signed Binary Proxy Execution",
        "techniqueid": "T1218"
    },
    {
        "description": "Adversaries may abuse CMSTP to proxy execution of malicious code. The Microsoft Connection Manager Profile Installer (CMSTP.exe) is a command-line program used to install Connection Manager service profiles. CMSTP.exe accepts an installation information file (INF) as a parameter and installs a service profile leveraged for remote access connections.",
        "id": "1190",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "CMSTP",
        "techniqueid": "T1218.003"
    },
    {
        "description": "Adversaries may use InstallUtil to proxy execution of code through a trusted Windows utility. InstallUtil is a command-line utility that allows for installation and uninstallation of resources by executing specific installer components specified in .NET binaries. InstallUtil is digitally signed by Microsoft and located in the .NET directories on a Windows system:?C:\\Windows\\Microsoft.NET\\Framework\\v\\InstallUtil.exe?and?C:\\Windows\\Microsoft.NET\\Framework64\\v\\InstallUtil.exe.",
        "id": "1191",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "InstallUtil",
        "techniqueid": "T1218.004"
    },
    {
        "description": "Adversaries may abuse mshta.exe to proxy execution of malicious .hta files and Javascript or VBScript through a trusted Windows utility. There are several examples of different types of threats leveraging mshta.exe during initial compromise and for execution of code",
        "id": "1192",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Mshta",
        "techniqueid": "T1218.005"
    },
    {
        "description": "Adversaries may abuse Regsvcs and Regasm to proxy execution of code through a trusted Windows utility. Regsvcs and Regasm are Windows command-line utilities that are used to register .NET?Component Object Model?(COM) assemblies. Both are digitally signed by Microsoft.",
        "id": "1193",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Regsvcs/Regasm",
        "techniqueid": "T1218.009"
    },
    {
        "description": "Adversaries may abuse odbcconf.exe to proxy execution of malicious payloads. Odbcconf.exe is a Windows utility that allows you to configure Open Database Connectivity (ODBC) drivers and data source names. Odbcconf.exe is digitally signed by Microsoft.",
        "id": "1194",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Odbcconf",
        "techniqueid": "T1218.008"
    },
    {
        "description": "Adversaries may abuse verclsid.exe to proxy execution of malicious code. Verclsid.exe is known as the Extension CLSID Verification Host and is responsible for verifying each shell extension before they are used by Windows Explorer or the Windows Shell.",
        "id": "1195",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Verclsid",
        "techniqueid": "T1218.012"
    },
    {
        "description": "Adversaries may create or modify references in Office document templates to conceal malicious code or force authentication attempts. Microsoft��s Office Open XML (OOXML) specification defines an XML-based format for Office documents (.docx, xlsx, .pptx) to replace older binary formats (.doc, .xls, .ppt). OOXML files are packed together ZIP archives compromised of various XML files, referred to as parts, containing properties that collectively define how a document is rendered.",
        "id": "1196",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Template Injection",
        "techniqueid": "T1221"
    },
    {
        "description": "Adversaries may take advantage of trusted developer utilities to proxy execution of malicious payloads. There are many utilities used for software development related tasks that can be used to execute code in various forms to assist in development, debugging, and reverse engineering. These utilities may often be signed with legitimate certificates that allow them to execute on a system and proxy execution of malicious code through a trusted process that effectively bypasses application control solutions.",
        "id": "1197",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Trusted Developer Utilities Proxy Execution",
        "techniqueid": "T1127"
    },
    {
        "description": "Adversaries may use MSBuild to proxy execution of code through a trusted Windows utility. MSBuild.exe (Microsoft Build Engine) is a software build platform used by Visual Studio. It handles XML formatted project files that define requirements for loading and building various platforms and configurations.",
        "id": "1198",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "MSBuild",
        "techniqueid": "T1127.001"
    },
    {
        "description": "Adversaries may attempt to access the Cloud Instance Metadata API to collect credentials and other sensitive data.",
        "id": "1199",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Cloud Instance Metadata API",
        "techniqueid": "T1552.005"
    },
    {
        "description": "Adversaries may communicate using the Domain Name System (DNS) application layer protocol to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.",
        "id": "1200",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "DNS",
        "techniqueid": "T1071.004"
    },
    {
        "description": "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.",
        "id": "1201",
        "mitigation": "Account Use Policies",
        "mitigationid": "M1036",
        "technique": "Brute Force",
        "techniqueid": "T1110"
    },
    {
        "description": "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.",
        "id": "1202",
        "mitigation": "Account Use Policies",
        "mitigationid": "M1036",
        "technique": "Password Guessing",
        "techniqueid": "T1110.001"
    },
    {
        "description": "Adversaries may use a single or small list of commonly used passwords against many different accounts to attempt to acquire valid account credentials. Password spraying uses one password (e.g. 'Password01'), or a small list of commonly used passwords, that may match the complexity policy of the domain. Logins are attempted with that password against many different accounts on a network to avoid account lockouts that would normally occur when brute forcing a single account with many passwords.",
        "id": "1203",
        "mitigation": "Account Use Policies",
        "mitigationid": "M1036",
        "technique": "Password Spraying",
        "techniqueid": "T1110.003"
    },
    {
        "description": "Adversaries may use credentials obtained from breach dumps of unrelated accounts to gain access to target accounts through credential overlap. Occasionally, large numbers of username and password pairs are dumped online when a website or service is compromised and the user account credentials accessed. The information may be useful to an adversary attempting to compromise accounts by taking advantage of the tendency for users to use the same passwords across personal and business accounts.",
        "id": "1204",
        "mitigation": "Account Use Policies",
        "mitigationid": "M1036",
        "technique": "Credential Stuffing",
        "techniqueid": "T1110.004"
    },
    {
        "description": "Adversaries may gain access to and use third-party software suites installed within an enterprise network, such as administration, monitoring, and deployment systems, to move laterally through the network. Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, VNC, HBSS, Altiris, etc.).",
        "id": "1205",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Software Deployment Tools",
        "techniqueid": "T1072"
    },
    {
        "description": "Adversaries may obtain and abuse credentials of a cloud account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. In some cases, cloud accounts may be federated with traditional identity management system, such as Window Active Directory.",
        "id": "1206",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Cloud Accounts",
        "techniqueid": "T1078.004"
    },
    {
        "description": "Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows or pluggable authentication modules (PAM) on Unix-based systems, responsible for gathering, storing, and validating credentials.",
        "id": "1207",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Modify Authentication Process",
        "techniqueid": "T1556"
    },
    {
        "description": "Adversaries may patch the authentication process on a domain controller to bypass the typical authentication mechanisms and enable access to accounts.",
        "id": "1208",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Domain Controller Authentication",
        "techniqueid": "T1556.001"
    },
    {
        "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop. Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.",
        "id": "1209",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Valid Accounts",
        "techniqueid": "T1078"
    },
    {
        "description": "Adversaries may obtain and abuse credentials of a domain account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover users, administrators, and services.",
        "id": "1210",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Domain Accounts",
        "techniqueid": "T1078.002"
    },
    {
        "description": "Adversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.",
        "id": "1211",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Local Accounts",
        "techniqueid": "T1078.003"
    },
    {
        "description": "Adversaries may obtain and abuse credentials of a cloud account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. In some cases, cloud accounts may be federated with traditional identity management system, such as Window Active Directory.",
        "id": "1212",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Cloud Accounts",
        "techniqueid": "T1078.004"
    },
    {
        "description": "Adversaries may hijack a legitimate user��s remote desktop session to move laterally within an environment. Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).",
        "id": "1213",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "RDP Hijacking",
        "techniqueid": "T1563.002"
    },
    {
        "description": "Adversaries may establish persistence and elevate privileges by executing malicious content triggered by a Windows Management Instrumentation (WMI) event subscription. WMI can be used to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Examples of events that may be subscribed to are the wall clock time, user loging, or the computer's uptime.",
        "id": "1214",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Windows Management Instrumentation Event Subscription",
        "techniqueid": "T1546.003"
    },
    {
        "description": "Adversaries may use?Patch System Image?to hard code a password in the operating system, thus bypassing of native authentication mechanisms for local accounts on network devices.",
        "id": "1215",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Network Device Authentication",
        "techniqueid": "T1556.004"
    },
    {
        "description": "Adversaries may make changes to the operating system of embedded network devices to weaken defenses and provide new capabilities for themselves. On such devices, the operating systems are typically monolithic and most of the device functionality and capabilities are contained within a single file.",
        "id": "1216",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Modify System Image",
        "techniqueid": "T1601"
    },
    {
        "description": "Adversaries may modify the operating system of a network device to introduce new capabilities or weaken existing defenses. Some network devices are built with a monolithic architecture, where the entire operating system and most of the functionality of the device is contained within a single file. Adversaries may change this file in storage, to be loaded in a future boot, or in memory during runtime.",
        "id": "1217",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Patch System Image",
        "techniqueid": "T1601.001"
    },
    {
        "description": "Adversaries may install an older version of the operating system of a network device to weaken security. Older operating system versions on network devices often have weaker encryption ciphers and, in general, fewer/less updated defensive features.",
        "id": "1218",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Downgrade System Image",
        "techniqueid": "T1601.002"
    },
    {
        "description": "Adversaries may bridge network boundaries by compromising perimeter network devices. Breaching these devices may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.",
        "id": "1219",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Network Boundary Bridging",
        "techniqueid": "T1599"
    },
    {
        "description": "Adversaries may bridge network boundaries by modifying a network device��s Network Address Translation (NAT) configuration. Malicious modifications to NAT may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.",
        "id": "1220",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Network Address Translation Traversal",
        "techniqueid": "T1599.001"
    },
    {
        "description": "Adversaries may use alternate authentication material, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls.",
        "id": "1221",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Use Alternate Authentication Material",
        "techniqueid": "T1550"
    },
    {
        "description": "Adversaries may \"pass the hash\" using stolen password hashes to move laterally within an environment, bypassing normal system access controls. Pass the hash (PtH) is a method of authenticating as a user without having access to the user's cleartext password. This method bypasses standard authentication steps that require a cleartext password, moving directly into the portion of the authentication that uses the password hash. In this technique, valid password hashes for the account being used are captured using a Credential Access technique. Captured hashes are used with PtH to authenticate as that user. Once authenticated, PtH may be used to perform actions on local or remote systems.",
        "id": "1222",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Pass the Hash",
        "techniqueid": "T1550.002"
    },
    {
        "description": "Adversaries may obtain and abuse credentials of a domain account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover users, administrators, and services.",
        "id": "1223",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Domain Accounts",
        "techniqueid": "T1078.002"
    },
    {
        "description": "Adversaries may abuse Windows Management Instrumentation (WMI) to achieve execution. WMI is a Windows administration feature that provides a uniform environment for local and remote access to Windows system components. It relies on the WMI service for local and remote access and the server message block (SMB) and Remote Procedure Call Service (RPCS) for remote access. RPCS operates over port 135.",
        "id": "1224",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Windows Management Instrumentation",
        "techniqueid": "T1047"
    },
    {
        "description": "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.",
        "id": "1225",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "Brute Force",
        "techniqueid": "T1110"
    },
    {
        "description": "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.",
        "id": "1226",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "Password Guessing",
        "techniqueid": "T1110.001"
    },
    {
        "description": "Adversaries may use password cracking to attempt to recover usable credentials, such as plaintext passwords, when credential material such as password hashes are obtained.?OS Credential Dumping?is used to obtain password hashes, this may only get an adversary so far when?Pass the Hash?is not an option. Techniques to systematically guess the passwords used to compute hashes are available, or the adversary may use a pre-computed rainbow table to crack hashes. Cracking hashes is usually done on adversary-controlled systems outside of the target network. The resulting plaintext password resulting from a successfully cracked hash may be used to log into systems, resources, and services in which the account has access.",
        "id": "1227",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "Password Cracking",
        "techniqueid": "T1110.002"
    },
    {
        "description": "Adversaries may use a single or small list of commonly used passwords against many different accounts to attempt to acquire valid account credentials. Password spraying uses one password (e.g. 'Password01'), or a small list of commonly used passwords, that may match the complexity policy of the domain. Logins are attempted with that password against many different accounts on a network to avoid account lockouts that would normally occur when brute forcing a single account with many passwords.",
        "id": "1228",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "Password Spraying",
        "techniqueid": "T1110.003"
    },
    {
        "description": "Adversaries may use credentials obtained from breach dumps of unrelated accounts to gain access to target accounts through credential overlap. Occasionally, large numbers of username and password pairs are dumped online when a website or service is compromised and the user account credentials accessed. The information may be useful to an adversary attempting to compromise accounts by taking advantage of the tendency for users to use the same passwords across personal and business accounts.",
        "id": "1229",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "Credential Stuffing",
        "techniqueid": "T1110.004"
    },
    {
        "description": "Adversaries may search for common password storage locations to obtain user credentials. Passwords are stored in several places on a system, depending on the operating system or application holding the credentials. There are also specific applications that store passwords to make it easier for users manage and maintain. Once credentials are obtained, they can be used to perform lateral movement and access restricted information.",
        "id": "1230",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "Credentials from Password Stores",
        "techniqueid": "T1555"
    },
    {
        "description": "Adversaries may collect the keychain storage data from a system to acquire credentials. Keychains are the built-in way for macOS to keep track of users' passwords and credentials for many services and features such as WiFi passwords, websites, secure notes, certificates, and Kerberos. Keychain files are located in?~/Library/Keychains/,/Library/Keychains/, and?/Network/Library/Keychains/. The?security?command-line utility, which is built into macOS by default, provides a useful way to manage these credentials.",
        "id": "1231",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "Keychain",
        "techniqueid": "T1555.001"
    },
    {
        "description": "Adversaries may gather credential material by invoking or forcing a user to automatically provide authentication information through a mechanism in which they can intercept.",
        "id": "1232",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "Forced Authentication",
        "techniqueid": "T1187"
    },
    {
        "description": "Adversaries may make changes to the operating system of embedded network devices to weaken defenses and provide new capabilities for themselves. On such devices, the operating systems are typically monolithic and most of the device functionality and capabilities are contained within a single file.",
        "id": "1233",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "Modify System Image",
        "techniqueid": "T1601"
    },
    {
        "description": "Adversaries may modify the operating system of a network device to introduce new capabilities or weaken existing defenses. Some network devices are built with a monolithic architecture, where the entire operating system and most of the functionality of the device is contained within a single file. Adversaries may change this file in storage, to be loaded in a future boot, or in memory during runtime.",
        "id": "1234",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "Patch System Image",
        "techniqueid": "T1601.001"
    },
    {
        "description": "Adversaries may install an older version of the operating system of a network device to weaken security. Older operating system versions on network devices often have weaker encryption ciphers and, in general, fewer/less updated defensive features.",
        "id": "1235",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "Downgrade System Image",
        "techniqueid": "T1601.002"
    },
    {
        "description": "Adversaries may bridge network boundaries by compromising perimeter network devices. Breaching these devices may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.",
        "id": "1236",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "Network Boundary Bridging",
        "techniqueid": "T1599"
    },
    {
        "description": "Adversaries may bridge network boundaries by modifying a network device��s Network Address Translation (NAT) configuration. Malicious modifications to NAT may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.",
        "id": "1237",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "Network Address Translation Traversal",
        "techniqueid": "T1599.001"
    },
    {
        "description": "Adversaries may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password, from the operating system and software. Credentials can then be used to perform?Lateral Movement?and access restricted information.",
        "id": "1238",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "OS Credential Dumping",
        "techniqueid": "T1003"
    },
    {
        "description": "Adversaries may attempt to access credentials and other sensitive information by abusing a Windows Domain Controller's application programming interface (API) to simulate the replication process from a remote domain controller using a technique called DCSync.",
        "id": "1239",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "DCSync",
        "techniqueid": "T1003.006"
    },
    {
        "description": "Adversaries may attempt to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS). After a user logs on, the system generates and stores a variety of credential materials in LSASS process memory. These credential materials can be harvested by an administrative user or SYSTEM and used to conduct?Lateral Movement?using?Use Alternate Authentication Material.",
        "id": "1240",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "LSASS Memory",
        "techniqueid": "T1003.001"
    },
    {
        "description": "Adversaries may attempt to extract credential material from the Security Account Manager (SAM) database either through in-memory techniques or through the Windows Registry where the SAM database is stored. The SAM is a database file that contains local accounts for the host, typically those found with the?net user?command. Enumerating the SAM database requires SYSTEM level access.",
        "id": "1241",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "Security Account Manager",
        "techniqueid": "T1003.002"
    },
    {
        "description": "Adversaries may gather credentials from information stored in the Proc filesystem or?/proc. The Proc filesystem on Linux contains a great deal of information regarding the state of the running operating system. Processes running with root privileges can use this facility to scrape live memory of other running programs. If any of these programs store passwords in clear text or password hashes in memory, these values can then be harvested for either usage or brute force attacks, respectively.",
        "id": "1242",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "Proc Filesystem",
        "techniqueid": "T1003.007"
    },
    {
        "description": "Adversaries may attempt to dump the contents of?/etc/passwd?and?/etc/shadow?to enable offline password cracking. Most modern Linux operating systems use a combination of?/etc/passwd?and?/etc/shadow?to store user account information including password hashes in?/etc/shadow. By default,?/etc/shadow?is only readable by the root user.",
        "id": "1243",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "/etc/passwd and /etc/shadow",
        "techniqueid": "T1003.008"
    },
    {
        "description": "Adversaries may attempt to access cached domain credentials used to allow authentication to occur in the event a domain controller is unavailable.",
        "id": "1244",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "Cached Domain Credentials",
        "techniqueid": "T1003.005"
    },
    {
        "description": "Adversaries with SYSTEM access to a host may attempt to access Local Security Authority (LSA) secrets, which can contain a variety of different credential materials, such as credentials for service accounts. LSA secrets are stored in the registry at?HKEY_LOCAL_MACHINE\\SECURITY\\Policy\\Secrets. LSA secrets can also be dumped from memory.",
        "id": "1245",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "LSA Secrets",
        "techniqueid": "T1003.004"
    },
    {
        "description": "Adversaries may attempt to access or create a copy of the Active Directory domain database in order to steal credential information, as well as obtain other information about domain members such as devices, users, and access rights. By default, the NTDS file (NTDS.dit) is located in?%SystemRoot%\\NTDS\\Ntds.dit?of a domain controller.",
        "id": "1246",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "NTDS",
        "techniqueid": "T1003.003"
    },
    {
        "description": "Adversaries may hijack a legitimate user's SSH session to move laterally within an environment. Secure Shell (SSH) is a standard means of remote access on Linux and macOS systems. It allows a user to connect to another system via an encrypted tunnel, commonly authenticating through a password, certificate or the use of an asymmetric encryption key pair.",
        "id": "1247",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "SSH Hijacking",
        "techniqueid": "T1563.001"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user.",
        "id": "1248",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "SMB/Windows Admin Shares",
        "techniqueid": "T1021.002"
    },
    {
        "description": "Adversaries may gain access to and use third-party software suites installed within an enterprise network, such as administration, monitoring, and deployment systems, to move laterally through the network. Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, VNC, HBSS, Altiris, etc.).",
        "id": "1249",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "Software Deployment Tools",
        "techniqueid": "T1072"
    },
    {
        "description": "Adversaries may attempt to subvert Kerberos authentication by stealing or forging Kerberos tickets to enable?Pass the Ticket.",
        "id": "1250",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "Steal or Forge Kerberos Tickets",
        "techniqueid": "T1558"
    },
    {
        "description": "Adversaries who have the password hash of a target service account (e.g. SharePoint, MSSQL) may forge Kerberos ticket granting service (TGS) tickets, also known as silver tickets. Kerberos TGS tickets are also known as service tickets.",
        "id": "1251",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "Silver Ticket",
        "techniqueid": "T1558.002"
    },
    {
        "description": "Adversaries may abuse a valid Kerberos ticket-granting ticket (TGT) or sniff network traffic to obtain a ticket-granting service (TGS) ticket that may be vulnerable to?Brute Force.",
        "id": "1252",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "Kerberoasting",
        "techniqueid": "T1558.003"
    },
    {
        "description": "Adversaries may reveal credentials of accounts that have disabled Kerberos preauthentication by?Password Cracking?Kerberos messages.",
        "id": "1253",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "AS-REP Roasting",
        "techniqueid": "T1558.004"
    },
    {
        "description": "Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g.?Bash History), operating system or application-specific repositories (e.g.?Credentials in Registry), or other specialized files/artifacts (e.g.?Private Keys).",
        "id": "1254",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "Unsecured Credentials",
        "techniqueid": "T1552"
    },
    {
        "description": "Adversaries may search for private key certificate files on compromised systems for insecurely stored credentials. Private cryptographic keys and certificates are used for authentication, encryption/decryption, and digital signatures. Common key and certificate file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, .pfx, .cer, .p7b, .asc.",
        "id": "1255",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "Private Keys",
        "techniqueid": "T1552.004"
    },
    {
        "description": "Adversaries may \"pass the ticket\" using stolen Kerberos tickets to move laterally within an environment, bypassing normal system access controls. Pass the ticket (PtT) is a method of authenticating to a system using Kerberos tickets without having access to an account's password. Kerberos authentication can be used as the first step to lateral movement to a remote system.",
        "id": "1256",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "Pass the Ticket",
        "techniqueid": "T1550.003"
    },
    {
        "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop. Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.",
        "id": "1257",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "Valid Accounts",
        "techniqueid": "T1078"
    },
    {
        "description": "Adversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.",
        "id": "1258",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "Local Accounts",
        "techniqueid": "T1078.003"
    },
    {
        "description": "Adversaries may obtain and abuse credentials of a cloud account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. In some cases, cloud accounts may be federated with traditional identity management system, such as Window Active Directory.",
        "id": "1259",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "Cloud Accounts",
        "techniqueid": "T1078.004"
    },
    {
        "description": "Adversaries may obtain and abuse credentials of a default account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Default accounts are those that are built-into an OS, such as the Guest or Administrator accounts on Windows systems or default factory/provider set accounts on other types of systems, software, or devices.",
        "id": "1260",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "Default Accounts",
        "techniqueid": "T1078.001"
    },
    {
        "description": "Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.",
        "id": "1261",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Access Token Manipulation",
        "techniqueid": "T1134"
    },
    {
        "description": "Adversaries may duplicate then impersonate another user's token to escalate privileges and bypass access controls. An adversary can create a new access token that duplicates an existing token using?DuplicateToken(Ex). The token can then be used with?ImpersonateLoggedOnUser?to allow the calling thread to impersonate a logged on user's security context, or with?SetThreadToken?to assign the impersonated token to a thread.",
        "id": "1262",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Token Impersonation/Theft",
        "techniqueid": "T1134.001"
    },
    {
        "description": "Adversaries may create a new process with a duplicated token to escalate privileges and bypass access controls. An adversary can duplicate a desired access token with?DuplicateToken(Ex)?and use it with?CreateProcessWithTokenW?to create a new process running under the security context of the impersonated user. This is useful for creating a new process under the security context of a different user.",
        "id": "1263",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Create Process with Token",
        "techniqueid": "T1134.002"
    },
    {
        "description": "Adversaries may make and impersonate tokens to escalate privileges and bypass access controls. If an adversary has a username and password but the user is not logged onto the system, the adversary can then create a logon session for the user using the?LogonUser?function. The function will return a copy of the new session's access token and the adversary can use?SetThreadToken?to assign the token to a thread.",
        "id": "1264",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Make and Impersonate Token",
        "techniqueid": "T1134.003"
    },
    {
        "description": "Adversaries may attempt to get a listing of cloud accounts. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application.",
        "id": "1265",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Cloud Account",
        "techniqueid": "T1087.004"
    },
    {
        "description": "Adversaries may abuse BITS jobs to persistently execute or clean up after malicious payloads. Windows Background Intelligent Transfer Service (BITS) is a low-bandwidth, asynchronous file transfer mechanism exposed through?Component Object Model?(COM). BITS is commonly used by updaters, messengers, and other applications preferred to operate in the background (using available idle bandwidth) without interrupting other networked applications. File transfer tasks are implemented as BITS jobs, which contain a queue of one or more file operations.",
        "id": "1266",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "BITS Jobs",
        "techniqueid": "T1197"
    },
    {
        "description": "Adversaries may abuse features of Winlogon to execute DLLs and/or executables when a user logs in. Winlogon.exe is a Windows component responsible for actions at logon/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete. Registry entries in?HKLM\\Software[\\Wow6432Node\\]\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\?and?HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\?are used to manage additional helper programs and functionalities that support Winlogon.",
        "id": "1267",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Winlogon Helper DLL",
        "techniqueid": "T1547.004"
    },
    {
        "description": "Adversaries may create or edit shortcuts to run a program during system boot or user login. Shortcuts or symbolic links are ways of referencing other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process.",
        "id": "1268",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Shortcut Modification",
        "techniqueid": "T1547.009"
    },
    {
        "description": "Adversaries may abuse print processors to run malicious DLLs during system boot for persistence and/or privilege escalation. Print processors are DLLs that are loaded by the print spooler service, spoolsv.exe, during boot.",
        "id": "1269",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Print Processors",
        "techniqueid": "T1547.012"
    },
    {
        "description": "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.",
        "id": "1270",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Brute Force",
        "techniqueid": "T1110"
    },
    {
        "description": "Adversaries may use credentials obtained from breach dumps of unrelated accounts to gain access to target accounts through credential overlap. Occasionally, large numbers of username and password pairs are dumped online when a website or service is compromised and the user account credentials accessed. The information may be useful to an adversary attempting to compromise accounts by taking advantage of the tendency for users to use the same passwords across personal and business accounts.",
        "id": "1271",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Credential Stuffing",
        "techniqueid": "T1110.004"
    },
    {
        "description": "An adversary may attempt to discover resources that are available within an infrastructure-as-a-service (IaaS) environment. This includes compute service resources such as instances, virtual machines, and snapshots as well as resources of other services including the storage and database services.",
        "id": "1272",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Cloud Infrastructure Discovery",
        "techniqueid": "T1580"
    },
    {
        "description": "An adversary may use a cloud service dashboard GUI with stolen credentials to gain useful information from an operational cloud environment, such as specific services, resources, and features. For example, the GCP Command Center can be used to view all assets, findings of potential security risks, and to run additional queries, such as finding public IP addresses and open ports.",
        "id": "1273",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Cloud Service Dashboard",
        "techniqueid": "T1538"
    },
    {
        "description": "Adversaries may abuse scripting or built-in command line interpreters (CLI) on network devices to execute malicious command and payloads. The CLI is the primary means through which users and administrators interact with the device in order to view system information, modify device operations, or perform diagnostic and administrative functions. CLIs typically contain various permission levels required for different commands.",
        "id": "1274",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Network Device CLI",
        "techniqueid": "T1059.008"
    },
    {
        "description": "Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services. On macOS, launchd processes known as?Launch Daemon?and?Launch Agent?are run to finish system initialization and load user specific parameters.",
        "id": "1275",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Create or Modify System Process",
        "techniqueid": "T1543"
    },
    {
        "description": "Adversaries may create or modify launch agents to repeatedly execute malicious payloads as part of persistence. Per Apple��s developer documentation, when a user logs in, a per-user launchd process is started which loads the parameters for each launch-on-demand user agent from the property list (plist) files found in?/System/Library/LaunchAgents,?/Library/LaunchAgents, and?$HOME/Library/LaunchAgents?. These launch agents have property list files which point to the executables that will be launched .",
        "id": "1276",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Launch Agent",
        "techniqueid": "T1543.001"
    },
    {
        "description": "Adversaries may create or modify systemd services to repeatedly execute malicious payloads as part of persistence. The systemd service manager is commonly used for managing background daemon processes (also known as services) and other system resources. Systemd is the default initialization (init) system on many Linux distributions starting with Debian 8, Ubuntu 15.04, CentOS 7, RHEL 7, Fedora 15, and replaces legacy init systems including SysVinit and Upstart while remaining backwards compatible with the aforementioned init systems.",
        "id": "1277",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Systemd Service",
        "techniqueid": "T1543.002"
    },
    {
        "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry. Service configurations can be modified using utilities such as sc.exe and?Reg.",
        "id": "1278",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Windows Service",
        "techniqueid": "T1543.003"
    },
    {
        "description": "Adversaries may create or modify launch daemons to repeatedly execute malicious payloads as part of persistence. Per Apple��s developer documentation, when macOS and OS X boot up, launchd is run to finish system initialization. This process loads the parameters for each launch-on-demand system-level daemon from the property list (plist) files found in?/System/Library/LaunchDaemons?and?/Library/LaunchDaemons?. These LaunchDaemons have property list files which point to the executables that will be launched .",
        "id": "1279",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Launch Daemon",
        "techniqueid": "T1543.004"
    },
    {
        "description": "Adversaries may access data objects from improperly secured cloud storage.",
        "id": "1280",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Data from Cloud Storage Object",
        "techniqueid": "T1530"
    },
    {
        "description": "Adversaries may leverage information repositories to mine valuable information. Information repositories are tools that allow for storage of information, typically to facilitate collaboration or information sharing between users, and can store a wide variety of data that may aid adversaries in further objectives, or direct access to the target information.",
        "id": "1281",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Data from Information Repositories",
        "techniqueid": "T1213"
    },
    {
        "description": "Adversaries may leverage Confluence repositories to mine valuable information. Often found in development environments alongside Atlassian JIRA, Confluence is generally used to store development-related documentation, however, in general may contain more diverse categories of useful information, such as:",
        "id": "1282",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Confluence",
        "techniqueid": "T1213.001"
    },
    {
        "description": "Adversaries may leverage the SharePoint repository as a source to mine valuable information. SharePoint will often contain useful information for an adversary to learn about the structure and functionality of the internal network and systems. For example, the following is a list of example information that may hold potential value to an adversary and may also be found on SharePoint:",
        "id": "1283",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Sharepoint",
        "techniqueid": "T1213.002"
    },
    {
        "description": "Adversaries may modify the configuration settings of a domain to evade defenses and/or escalate privileges in domain environments. Domains provide a centralized means of managing how computer resources (ex: computers, user accounts) can act, and interact with each other, on a network. The policy of the domain also includes configuration settings that may apply between domains in a multi-domain/forest environment. Modifications to domain settings may include altering domain Group Policy Objects (GPOs) or changing trust settings for domains, including federation trusts.",
        "id": "1284",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Domain Policy Modification",
        "techniqueid": "T1484"
    },
    {
        "description": "Adversaries may modify Group Policy Objects (GPOs) to subvert the intended discretionary access controls for a domain, usually with the intention of escalating privileges on the domain. Group policy allows for centralized management of user and computer settings in Active Directory (AD). GPOs are containers for group policy settings made up of files stored within a predicable network path?\\<DOMAIN>\\SYSVOL\\<DOMAIN>\\Policies\\.",
        "id": "1285",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Group Policy Modification",
        "techniqueid": "T1484.001"
    },
    {
        "description": "Adversaries may establish persistence and elevate privileges by executing malicious content triggered by a Windows Management Instrumentation (WMI) event subscription. WMI can be used to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Examples of events that may be subscribed to are the wall clock time, user loging, or the computer's uptime.",
        "id": "1286",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Windows Management Instrumentation Event Subscription",
        "techniqueid": "T1546.003"
    },
    {
        "description": "Adversaries may forge credential materials that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies, tokens, or other materials to authenticate and authorize user access.",
        "id": "1287",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Forge Web Credentials",
        "techniqueid": "T1606"
    },
    {
        "description": "An adversary may forge SAML tokens with any permissions claims and lifetimes if they possess a valid SAML token-signing certificate. The default lifetime of a SAML token is one hour, but the validity period can be specified in the?NotOnOrAfter?value of the?conditions ...?element in a token. This value can be changed using the?AccessTokenLifetime?in a?LifetimeTokenPolicy. Forged SAML tokens enable adversaries to authenticate across services that use SAML 2.0 as an SSO (single sign-on) mechanism.",
        "id": "1288",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "SAML Tokens",
        "techniqueid": "T1606.002"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.",
        "id": "1289",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Hijack Execution Flow",
        "techniqueid": "T1574"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the binaries used by services. Adversaries may use flaws in the permissions of Windows services to replace the binary that is executed upon service start. These service processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.",
        "id": "1290",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Services File Permissions Weakness",
        "techniqueid": "T1574.010"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the binaries used by an installer. These processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.",
        "id": "1291",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Executable Installer File Permissions Weakness",
        "techniqueid": "T1574.005"
    },
    {
        "description": "Adversaries may leverage the COR_PROFILER environment variable to hijack the execution flow of programs that load the .NET CLR. The COR_PROFILER is a .NET Framework feature which allows developers to specify an unmanaged (or external of .NET) profiling DLL to be loaded into each .NET process that loads the Common Language Runtime (CLR). These profiliers are designed to monitor, troubleshoot, and debug managed code executed by the .NET CLR.",
        "id": "1292",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "COR_PROFILER",
        "techniqueid": "T1574.012"
    },
    {
        "description": "Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators.",
        "id": "1293",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Impair Defenses",
        "techniqueid": "T1562"
    },
    {
        "description": "Adversaries may disable security tools to avoid possible detection of their tools and activities. This can take the form of killing security software or event logging processes, deleting Registry keys so that tools do not start at run time, or other methods to interfere with security tools scanning or reporting information.",
        "id": "1294",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Disable or Modify Tools",
        "techniqueid": "T1562.001"
    },
    {
        "description": "Adversaries may disable Windows event logging to limit data that can be leveraged for detections and audits. Windows event logs record user and system activity such as login attempts, process creation, and much more. This data is used by security tools and analysts to generate detections.",
        "id": "1295",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Disable Windows Event Logging",
        "techniqueid": "T1562.002"
    },
    {
        "description": "Adversaries may disable or modify system firewalls in order to bypass controls limiting network usage. Changes could be disabling the entire mechanism as well as adding, deleting, or modifying particular rules. This can be done numerous ways depending on the operating system, including via command-line, editing Windows Registry keys, and Windows Control Panel.",
        "id": "1296",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Disable or Modify System Firewall",
        "techniqueid": "T1562.004"
    },
    {
        "description": "An adversary may attempt to block indicators or events typically captured by sensors from being gathered and analyzed. This could include maliciously redirecting or even disabling host-based sensors, such as Event Tracing for Windows (ETW), by tampering settings that control the collection and flow of event telemetry. These settings may be stored on the system in configuration files and/or in the Registry as well as being accessible via administrative utilities such as?PowerShell?or?Windows Management Instrumentation.",
        "id": "1297",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Indicator Blocking",
        "techniqueid": "T1562.006"
    },
    {
        "description": "Adversaries may disable or modify a firewall within a cloud environment to bypass controls that limit access to cloud resources. Cloud firewalls are separate from system firewalls that are described in?Disable or Modify System Firewall.",
        "id": "1298",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Disable or Modify Cloud Firewall",
        "techniqueid": "T1562.007"
    },
    {
        "description": "An adversary may disable cloud logging capabilities and integrations to limit what data is collected on their activities and avoid detection.",
        "id": "1299",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Disable Cloud Logs",
        "techniqueid": "T1562.008"
    },
    {
        "description": "Adversaries can take advantage of security vulnerabilities and inherent functionality in browser software to change content, modify behavior, and intercept information as part of various man in the browser techniques.",
        "id": "1300",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Man in the Browser",
        "techniqueid": "T1185"
    },
    {
        "description": "An adversary may attempt to modify a cloud account's compute service infrastructure to evade defenses. A modification to the compute service infrastructure can include the creation, deletion, or modification of one or more components such as compute instances, virtual machines, and snapshots.",
        "id": "1301",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Modify Cloud Compute Infrastructure",
        "techniqueid": "T1578"
    },
    {
        "description": "An adversary may create a new instance or virtual machine (VM) within the compute service of a cloud account to evade defenses. Creating a new instance may allow an adversary to bypass firewall rules and permissions that exist on instances currently residing within an account. An adversary may?Create Snapshot?of one or more volumes in an account, create a new instance, mount the snapshots, and then apply a less restrictive security policy to collect?Data from Local System?or for?Remote Data Staging.",
        "id": "1302",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Create Cloud Instance",
        "techniqueid": "T1578.002"
    },
    {
        "description": "An adversary may create a snapshot or data backup within a cloud account to evade defenses. A snapshot is a point-in-time copy of an existing cloud compute component such as a virtual machine (VM), virtual hard drive, or volume. An adversary may leverage permissions to create a snapshot in order to bypass restrictions that prevent access to existing compute service infrastructure, unlike in?Revert Cloud Instance?where an adversary may revert to a snapshot to evade detection and remove evidence of their presence.",
        "id": "1303",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Create Snapshot",
        "techniqueid": "T1578.001"
    },
    {
        "description": "An adversary may delete a cloud instance after they have performed malicious activities in an attempt to evade detection and remove evidence of their presence. Deleting an instance or virtual machine can remove valuable forensic artifacts and other evidence of suspicious behavior if the instance is not recoverable.",
        "id": "1304",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Delete Cloud Instance",
        "techniqueid": "T1578.003"
    },
    {
        "description": "Adversaries may take control of preexisting sessions with remote services to move laterally in an environment. Users may use valid credentials to log into a service specifically designed to accept remote connections, such as telnet, SSH, and RDP. When a user logs into a service, a session will be established that will allow them to maintain a continuous interaction with that service.",
        "id": "1305",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Remote Service Session Hijacking",
        "techniqueid": "T1563"
    },
    {
        "description": "Adversaries may hijack a legitimate user��s remote desktop session to move laterally within an environment. Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).",
        "id": "1306",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "RDP Hijacking",
        "techniqueid": "T1563.002"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into a service specifically designed to accept remote connections, such as telnet, SSH, and VNC. The adversary may then perform actions as the logged-on user.",
        "id": "1307",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Remote Services",
        "techniqueid": "T1021"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.",
        "id": "1308",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Remote Desktop Protocol",
        "techniqueid": "T1021.001"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into remote machines using Secure Shell (SSH). The adversary may then perform actions as the logged-on user.",
        "id": "1309",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "SSH",
        "techniqueid": "T1021.004"
    },
    {
        "description": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically requires being a member of an admin or otherwise privileged group on the remote system.",
        "id": "1310",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Scheduled Task/Job",
        "techniqueid": "T1053"
    },
    {
        "description": "Adversaries may abuse the?at.exe?utility to perform task scheduling for initial or recurring execution of malicious code. The?at?utility exists as an executable within Windows for scheduling tasks at a specified time and date. Using?at?requires that the Task Scheduler service be running, and the user to be logged on as a member of the local Administrators group.",
        "id": "1311",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "At (Windows)",
        "techniqueid": "T1053.002"
    },
    {
        "description": "Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The?schtasks?can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task.",
        "id": "1312",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Scheduled Task",
        "techniqueid": "T1053.005"
    },
    {
        "description": "Adversaries may abuse the?at?utility to perform task scheduling for initial or recurring execution of malicious code. The?at?command within Linux operating systems enables administrators to schedule tasks.",
        "id": "1313",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "At (Linux)",
        "techniqueid": "T1053.001"
    },
    {
        "description": "Adversaries may abuse the?Launchd?daemon to perform task scheduling for initial or recurring execution of malicious code. The?launchd?daemon, native to macOS, is responsible for loading and maintaining services within the operating system. This process loads the parameters for each launch-on-demand system-level daemon from the property list (plist) files found in?/System/Library/LaunchDaemons?and?/Library/LaunchDaemons?. These LaunchDaemons have property list files which point to the executables that will be launched .",
        "id": "1314",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Launchd",
        "techniqueid": "T1053.004"
    },
    {
        "description": "Adversaries may abuse the?cron?utility to perform task scheduling for initial or recurring execution of malicious code. The?cron?utility is a time-based job scheduler for Unix-like operating systems. The?crontab?file contains the schedule of cron entries to be run and the specified times for execution. Any?crontab?files are stored in operating system-specific file paths.",
        "id": "1315",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Cron",
        "techniqueid": "T1053.003"
    },
    {
        "description": "Adversaries may abuse systemd timers to perform task scheduling for initial or recurring execution of malicious code. Systemd timers are unit files with file extension?.timer?that control services. Timers can be set to run on a calendar event or after a time span relative to a starting point. They can be used as an alternative to?Cron?in Linux environments.",
        "id": "1316",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Systemd Timers",
        "techniqueid": "T1053.006"
    },
    {
        "description": "Adversaries may stop or disable services on a system to render those services unavailable to legitimate users. Stopping critical services can inhibit or stop response to an incident or aid in the adversary's overall objectives to cause damage to the environment.",
        "id": "1317",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Service Stop",
        "techniqueid": "T1489"
    },
    {
        "description": "Adversaries may gain access to and use third-party software suites installed within an enterprise network, such as administration, monitoring, and deployment systems, to move laterally through the network. Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, VNC, HBSS, Altiris, etc.).",
        "id": "1318",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Software Deployment Tools",
        "techniqueid": "T1072"
    },
    {
        "description": "Adversaries can steal user application access tokens as a means of acquiring credentials to access remote systems and resources. This can occur through social engineering and typically requires user action to grant access.",
        "id": "1319",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Steal Application Access Token",
        "techniqueid": "T1528"
    },
    {
        "description": "Adversaries may abuse system services or daemons to execute commands or programs. Adversaries can execute malicious content by interacting with or creating services. Many services are set to run at boot, which can aid in achieving persistence (Create or Modify System Process), but adversaries can also abuse services for one-time or temporary execution.",
        "id": "1320",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "System Services",
        "techniqueid": "T1569"
    },
    {
        "description": "Adversaries may abuse launchctl to execute commands or programs. Launchctl controls the macOS launchd process, which handles things like?Launch Agents and?Launch Daemons, but can execute other commands or programs itself. Launchctl supports taking subcommands on the command-line, interactively, or even redirected from standard input.",
        "id": "1321",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Launchctl",
        "techniqueid": "T1569.001"
    },
    {
        "description": "Adversaries may exfiltrate data by transferring the data, including backups of cloud environments, to another cloud account they control on the same service to avoid typical file transfers/downloads and network-based exfiltration detection.",
        "id": "1322",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Transfer Data to Cloud Account",
        "techniqueid": "T1537"
    },
    {
        "description": "Adversaries may use alternate authentication material, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls.",
        "id": "1323",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Use Alternate Authentication Material",
        "techniqueid": "T1550"
    },
    {
        "description": "Adversaries may \"pass the hash\" using stolen password hashes to move laterally within an environment, bypassing normal system access controls. Pass the hash (PtH) is a method of authenticating as a user without having access to the user's cleartext password. This method bypasses standard authentication steps that require a cleartext password, moving directly into the portion of the authentication that uses the password hash. In this technique, valid password hashes for the account being used are captured using a Credential Access technique. Captured hashes are used with PtH to authenticate as that user. Once authenticated, PtH may be used to perform actions on local or remote systems.",
        "id": "1324",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Pass the Hash",
        "techniqueid": "T1550.002"
    },
    {
        "description": "Adversaries may \"pass the ticket\" using stolen Kerberos tickets to move laterally within an environment, bypassing normal system access controls. Pass the ticket (PtT) is a method of authenticating to a system using Kerberos tickets without having access to an account's password. Kerberos authentication can be used as the first step to lateral movement to a remote system.",
        "id": "1325",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Pass the Ticket",
        "techniqueid": "T1550.003"
    },
    {
        "description": "Adversaries may obtain and abuse credentials of a cloud account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. In some cases, cloud accounts may be federated with traditional identity management system, such as Window Active Directory.",
        "id": "1326",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Cloud Accounts",
        "techniqueid": "T1078.004"
    },
    {
        "description": "Adversaries may abuse Windows Management Instrumentation (WMI) to achieve execution. WMI is a Windows administration feature that provides a uniform environment for local and remote access to Windows system components. It relies on the WMI service for local and remote access and the server message block (SMB) and Remote Procedure Call Service (RPCS) for remote access. RPCS operates over port 135.",
        "id": "1327",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Windows Management Instrumentation",
        "techniqueid": "T1047"
    },
    {
        "description": "Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk. An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.",
        "id": "1328",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Abuse Elevation Control Mechanism",
        "techniqueid": "T1548"
    },
    {
        "description": "Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.",
        "id": "1329",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Bypass User Account Control",
        "techniqueid": "T1548.002"
    },
    {
        "description": "Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.",
        "id": "1330",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Access Token Manipulation",
        "techniqueid": "T1134"
    },
    {
        "description": "Adversaries may duplicate then impersonate another user's token to escalate privileges and bypass access controls. An adversary can create a new access token that duplicates an existing token using?DuplicateToken(Ex). The token can then be used with?ImpersonateLoggedOnUser?to allow the calling thread to impersonate a logged on user's security context, or with?SetThreadToken?to assign the impersonated token to a thread.",
        "id": "1331",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Token Impersonation/Theft",
        "techniqueid": "T1134.001"
    },
    {
        "description": "Adversaries may create a new process with a duplicated token to escalate privileges and bypass access controls. An adversary can duplicate a desired access token with?DuplicateToken(Ex)?and use it with?CreateProcessWithTokenW?to create a new process running under the security context of the impersonated user. This is useful for creating a new process under the security context of a different user.",
        "id": "1332",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Create Process with Token",
        "techniqueid": "T1134.002"
    },
    {
        "description": "Adversaries may make and impersonate tokens to escalate privileges and bypass access controls. If an adversary has a username and password but the user is not logged onto the system, the adversary can then create a logon session for the user using the?LogonUser?function. The function will return a copy of the new session's access token and the adversary can use?SetThreadToken?to assign the token to a thread.",
        "id": "1333",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Make and Impersonate Token",
        "techniqueid": "T1134.003"
    },
    {
        "description": "Adversaries may manipulate accounts to maintain access to victim systems. Account manipulation may consist of any action that preserves adversary access to a compromised account, such as modifying credentials or permission groups. These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials. In order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain.",
        "id": "1334",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Account Manipulation",
        "techniqueid": "T1098"
    },
    {
        "description": "Adversaries may grant additional permission levels, such as ReadPermission or FullAccess, to maintain persistent access to an adversary-controlled email account. The?Add-MailboxPermission?PowerShell?cmdlet, available in on-premises Exchange and in the cloud-based service Office 365, adds permissions to a mailbox.",
        "id": "1335",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Exchange Email Delegate Permissions",
        "techniqueid": "T1098.002"
    },
    {
        "description": "An adversary may add the Global Administrator role to an adversary-controlled account to maintain persistent access to an Office 365 tenant. With sufficient permissions, a compromised account can gain almost unlimited access to data and settings (including the ability to reset the passwords of other admins) via the global admin role.",
        "id": "1336",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Add Office 365 Global Administrator Role",
        "techniqueid": "T1098.003"
    },
    {
        "description": "Adversaries may add adversary-controlled credentials to a cloud account to maintain persistent access to victim accounts and instances within the environment.",
        "id": "1337",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Additional Cloud Credentials",
        "techniqueid": "T1098.001"
    },
    {
        "description": "Adversaries may modify the kernel to automatically execute programs on system boot. Loadable Kernel Modules (LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. ?",
        "id": "1338",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Kernel Modules and Extensions",
        "techniqueid": "T1547.006"
    },
    {
        "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of?Unix Shell?while Windows installations include the?Windows Command Shell?and?PowerShell.",
        "id": "1339",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Command and Scripting Interpreter",
        "techniqueid": "T1059"
    },
    {
        "description": "Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the?Start-Process?cmdlet which can be used to run an executable and the?Invoke-Command?cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).",
        "id": "1340",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "PowerShell",
        "techniqueid": "T1059.001"
    },
    {
        "description": "Adversaries may abuse scripting or built-in command line interpreters (CLI) on network devices to execute malicious command and payloads. The CLI is the primary means through which users and administrators interact with the device in order to view system information, modify device operations, or perform diagnostic and administrative functions. CLIs typically contain various permission levels required for different commands.",
        "id": "1341",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Network Device CLI",
        "techniqueid": "T1059.008"
    },
    {
        "description": "Adversaries may create an account to maintain access to victim systems. With a sufficient level of access, creating such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.",
        "id": "1342",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Create Account",
        "techniqueid": "T1136"
    },
    {
        "description": "Adversaries may create a local account to maintain access to victim systems. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service. With a sufficient level of access, the?net user /add?command can be used to create a local account.",
        "id": "1343",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Local Account",
        "techniqueid": "T1136.001"
    },
    {
        "description": "Adversaries may create a domain account to maintain access to victim systems. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover user, administrator, and service accounts. With a sufficient level of access, the?net user /add /domain?command can be used to create a domain account.",
        "id": "1344",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Domain Account",
        "techniqueid": "T1136.002"
    },
    {
        "description": "Adversaries may create a cloud account to maintain access to victim systems. With a sufficient level of access, such accounts may be used to establish secondary credentialed access that does not require persistent remote access tools to be deployed on the system.",
        "id": "1345",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Cloud Account",
        "techniqueid": "T1136.003"
    },
    {
        "description": "Adversaries may create or modify systemd services to repeatedly execute malicious payloads as part of persistence. The systemd service manager is commonly used for managing background daemon processes (also known as services) and other system resources. Systemd is the default initialization (init) system on many Linux distributions starting with Debian 8, Ubuntu 15.04, CentOS 7, RHEL 7, Fedora 15, and replaces legacy init systems including SysVinit and Upstart while remaining backwards compatible with the aforementioned init systems.",
        "id": "1346",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Systemd Service",
        "techniqueid": "T1543.002"
    },
    {
        "description": "Adversaries may modify the configuration settings of a domain to evade defenses and/or escalate privileges in domain environments. Domains provide a centralized means of managing how computer resources (ex: computers, user accounts) can act, and interact with each other, on a network. The policy of the domain also includes configuration settings that may apply between domains in a multi-domain/forest environment. Modifications to domain settings may include altering domain Group Policy Objects (GPOs) or changing trust settings for domains, including federation trusts.",
        "id": "1347",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Domain Policy Modification",
        "techniqueid": "T1484"
    },
    {
        "description": "Adversaries may add new domain trusts or modify the properties of existing domain trusts to evade defenses and/or elevate privileges. Domain trust details, such as whether or not a domain is federated, allow authentication and authorization properties to apply between domains for the purpose of accessing shared resources. These trust objects may include accounts, credentials, and other authentication material applied to servers, tokens, and domains.",
        "id": "1348",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Domain Trust Modification",
        "techniqueid": "T1484.002"
    },
    {
        "description": "Adversaries may establish persistence and elevate privileges by executing malicious content triggered by a Windows Management Instrumentation (WMI) event subscription. WMI can be used to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Examples of events that may be subscribed to are the wall clock time, user loging, or the computer's uptime.",
        "id": "1349",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Windows Management Instrumentation Event Subscription",
        "techniqueid": "T1546.003"
    },
    {
        "description": "Adversaries may attempt to take advantage of a weakness in an Internet-facing computer or program using software, data, or commands in order to cause unintended or unanticipated behavior. The weakness in the system can be a bug, a glitch, or a design vulnerability. These applications are often websites, but can include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other applications with Internet accessible open sockets, such as web servers and related services. Depending on the flaw being exploited this may include?Exploitation for Defense Evasion.",
        "id": "1350",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Exploit Public-Facing Application",
        "techniqueid": "T1190"
    },
    {
        "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.?A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.",
        "id": "1351",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Exploitation of Remote Services",
        "techniqueid": "T1210"
    },
    {
        "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).",
        "id": "1352",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "File and Directory Permissions Modification",
        "techniqueid": "T1222"
    },
    {
        "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).",
        "id": "1353",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Windows File and Directory Permissions Modification",
        "techniqueid": "T1222.001"
    },
    {
        "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).",
        "id": "1354",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Linux and Mac File and Directory Permissions Modification",
        "techniqueid": "T1222.002"
    },
    {
        "description": "Adversaries may overwrite or corrupt the flash memory contents of system BIOS or other firmware in devices attached to a system in order to render them inoperable or unable to boot. Firmware is software that is loaded and executed from non-volatile memory on hardware devices in order to initialize and manage device functionality. These devices could include the motherboard, hard drive, or video cards.",
        "id": "1355",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Firmware Corruption",
        "techniqueid": "T1495"
    },
    {
        "description": "Adversaries may forge credential materials that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies, tokens, or other materials to authenticate and authorize user access.",
        "id": "1356",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Forge Web Credentials",
        "techniqueid": "T1606"
    },
    {
        "description": "An adversary may forge SAML tokens with any permissions claims and lifetimes if they possess a valid SAML token-signing certificate. The default lifetime of a SAML token is one hour, but the validity period can be specified in the?NotOnOrAfter?value of the?conditions ...?element in a token. This value can be changed using the?AccessTokenLifetime?in a?LifetimeTokenPolicy. Forged SAML tokens enable adversaries to authenticate across services that use SAML 2.0 as an SSO (single sign-on) mechanism.",
        "id": "1357",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "SAML Tokens",
        "techniqueid": "T1606.002"
    },
    {
        "description": "Adversaries may implant cloud container images with malicious code to establish persistence. Amazon Web Service (AWS) Amazon Machine Images (AMI), Google Cloud Platform (GCP) Images, and Azure Images as well as popular container runtimes such as Docker can be implanted or backdoored. Depending on how the infrastructure is provisioned, this could provide persistent access if the infrastructure provisioning tool is instructed to always use the latest image.",
        "id": "1358",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Implant Container Image",
        "techniqueid": "T1525"
    },
    {
        "description": "Adversaries may install code on externally facing portals, such as a VPN login page, to capture and transmit credentials of users who attempt to log into the service. For example, a compromised login page may log provided user credentials before logging the user in to the service.",
        "id": "1359",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Web Portal Capture",
        "techniqueid": "T1056.003"
    },
    {
        "description": "Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows or pluggable authentication modules (PAM) on Unix-based systems, responsible for gathering, storing, and validating credentials.",
        "id": "1360",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Modify Authentication Process",
        "techniqueid": "T1556"
    },
    {
        "description": "Adversaries may patch the authentication process on a domain controller to bypass the typical authentication mechanisms and enable access to accounts.",
        "id": "1361",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Domain Controller Authentication",
        "techniqueid": "T1556.001"
    },
    {
        "description": "Adversaries may modify pluggable authentication modules (PAM) to access user credentials or enable otherwise unwarranted access to accounts. PAM is a modular system of configuration files, libraries, and executable files which guide authentication for many services. The most common authentication module is?pam_unix.so, which retrieves, sets, and verifies account authentication information in?/etc/passwd?and?/etc/shadow.",
        "id": "1362",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Pluggable Authentication Modules",
        "techniqueid": "T1556.003"
    },
    {
        "description": "Adversaries may use?Patch System Image?to hard code a password in the operating system, thus bypassing of native authentication mechanisms for local accounts on network devices.",
        "id": "1363",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Network Device Authentication",
        "techniqueid": "T1556.004"
    },
    {
        "description": "Adversaries may make changes to the operating system of embedded network devices to weaken defenses and provide new capabilities for themselves. On such devices, the operating systems are typically monolithic and most of the device functionality and capabilities are contained within a single file.",
        "id": "1364",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Modify System Image",
        "techniqueid": "T1601"
    },
    {
        "description": "Adversaries may modify the operating system of a network device to introduce new capabilities or weaken existing defenses. Some network devices are built with a monolithic architecture, where the entire operating system and most of the functionality of the device is contained within a single file. Adversaries may change this file in storage, to be loaded in a future boot, or in memory during runtime.",
        "id": "1365",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Patch System Image",
        "techniqueid": "T1601.001"
    },
    {
        "description": "Adversaries may install an older version of the operating system of a network device to weaken security. Older operating system versions on network devices often have weaker encryption ciphers and, in general, fewer/less updated defensive features.",
        "id": "1366",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Downgrade System Image",
        "techniqueid": "T1601.002"
    },
    {
        "description": "Adversaries may bridge network boundaries by compromising perimeter network devices. Breaching these devices may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.",
        "id": "1367",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Network Boundary Bridging",
        "techniqueid": "T1599"
    },
    {
        "description": "Adversaries may bridge network boundaries by modifying a network device��s Network Address Translation (NAT) configuration. Malicious modifications to NAT may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.",
        "id": "1368",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Network Address Translation Traversal",
        "techniqueid": "T1599.001"
    },
    {
        "description": "Adversaries may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password, from the operating system and software. Credentials can then be used to perform?Lateral Movement?and access restricted information.",
        "id": "1369",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "OS Credential Dumping",
        "techniqueid": "T1003"
    },
    {
        "description": "Adversaries may attempt to access credentials and other sensitive information by abusing a Windows Domain Controller's application programming interface (API) to simulate the replication process from a remote domain controller using a technique called DCSync.",
        "id": "1370",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "DCSync",
        "techniqueid": "T1003.006"
    },
    {
        "description": "Adversaries may attempt to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS). After a user logs on, the system generates and stores a variety of credential materials in LSASS process memory. These credential materials can be harvested by an administrative user or SYSTEM and used to conduct?Lateral Movement?using?Use Alternate Authentication Material.",
        "id": "1371",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "LSASS Memory",
        "techniqueid": "T1003.001"
    },
    {
        "description": "Adversaries may attempt to extract credential material from the Security Account Manager (SAM) database either through in-memory techniques or through the Windows Registry where the SAM database is stored. The SAM is a database file that contains local accounts for the host, typically those found with the?net user?command. Enumerating the SAM database requires SYSTEM level access.",
        "id": "1372",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Security Account Manager",
        "techniqueid": "T1003.002"
    },
    {
        "description": "Adversaries may gather credentials from information stored in the Proc filesystem or?/proc. The Proc filesystem on Linux contains a great deal of information regarding the state of the running operating system. Processes running with root privileges can use this facility to scrape live memory of other running programs. If any of these programs store passwords in clear text or password hashes in memory, these values can then be harvested for either usage or brute force attacks, respectively.",
        "id": "1373",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Proc Filesystem",
        "techniqueid": "T1003.007"
    },
    {
        "description": "Adversaries may attempt to dump the contents of?/etc/passwd?and?/etc/shadow?to enable offline password cracking. Most modern Linux operating systems use a combination of?/etc/passwd?and?/etc/shadow?to store user account information including password hashes in?/etc/shadow. By default,?/etc/shadow?is only readable by the root user.",
        "id": "1374",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "/etc/passwd and /etc/shadow",
        "techniqueid": "T1003.008"
    },
    {
        "description": "Adversaries may attempt to access cached domain credentials used to allow authentication to occur in the event a domain controller is unavailable.",
        "id": "1375",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Cached Domain Credentials",
        "techniqueid": "T1003.005"
    },
    {
        "description": "Adversaries with SYSTEM access to a host may attempt to access Local Security Authority (LSA) secrets, which can contain a variety of different credential materials, such as credentials for service accounts. LSA secrets are stored in the registry at?HKEY_LOCAL_MACHINE\\SECURITY\\Policy\\Secrets. LSA secrets can also be dumped from memory.",
        "id": "1376",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "LSA Secrets",
        "techniqueid": "T1003.004"
    },
    {
        "description": "Adversaries may attempt to access or create a copy of the Active Directory domain database in order to steal credential information, as well as obtain other information about domain members such as devices, users, and access rights. By default, the NTDS file (NTDS.dit) is located in?%SystemRoot%\\NTDS\\Ntds.dit?of a domain controller.",
        "id": "1377",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "NTDS",
        "techniqueid": "T1003.003"
    },
    {
        "description": "Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control.",
        "id": "1378",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Pre-OS Boot",
        "techniqueid": "T1542"
    },
    {
        "description": "Adversaries may modify system firmware to persist on systems.The BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer.",
        "id": "1379",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "System Firmware",
        "techniqueid": "T1542.001"
    },
    {
        "description": "Adversaries may use bootkits to persist on systems. Bootkits reside at a layer below the operating system and may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.",
        "id": "1380",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Bootkit",
        "techniqueid": "T1542.003"
    },
    {
        "description": "Adversaries may abuse netbooting to load an unauthorized network device operating system from a Trivial File Transfer Protocol (TFTP) server. TFTP boot (netbooting) is commonly used by network administrators to load configuration-controlled network device images from a centralized management server. Netbooting is one option in the boot sequence and can be used to centralize, manage, and control device images.",
        "id": "1381",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "TFTP Boot",
        "techniqueid": "T1542.005"
    },
    {
        "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process.",
        "id": "1382",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Process Injection",
        "techniqueid": "T1055"
    },
    {
        "description": "Adversaries may inject malicious code into processes via ptrace (process trace) system calls in order to evade process-based defenses as well as possibly elevate privileges. Ptrace system call injection is a method of executing arbitrary code in the address space of a separate live process.",
        "id": "1383",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Ptrace System Calls",
        "techniqueid": "T1055.008"
    },
    {
        "description": "Adversaries may take control of preexisting sessions with remote services to move laterally in an environment. Users may use valid credentials to log into a service specifically designed to accept remote connections, such as telnet, SSH, and RDP. When a user logs into a service, a session will be established that will allow them to maintain a continuous interaction with that service.",
        "id": "1384",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Remote Service Session Hijacking",
        "techniqueid": "T1563"
    },
    {
        "description": "Adversaries may hijack a legitimate user's SSH session to move laterally within an environment. Secure Shell (SSH) is a standard means of remote access on Linux and macOS systems. It allows a user to connect to another system via an encrypted tunnel, commonly authenticating through a password, certificate or the use of an asymmetric encryption key pair.",
        "id": "1385",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "SSH Hijacking",
        "techniqueid": "T1563.001"
    },
    {
        "description": "Adversaries may hijack a legitimate user��s remote desktop session to move laterally within an environment. Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).",
        "id": "1386",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "RDP Hijacking",
        "techniqueid": "T1563.002"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.",
        "id": "1387",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Remote Desktop Protocol",
        "techniqueid": "T1021.001"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user.",
        "id": "1388",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "SMB/Windows Admin Shares",
        "techniqueid": "T1021.002"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to interact with remote systems using Windows Remote Management (WinRM). The adversary may then perform actions as the logged-on user.",
        "id": "1389",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Windows Remote Management",
        "techniqueid": "T1021.006"
    },
    {
        "description": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically requires being a member of an admin or otherwise privileged group on the remote system.",
        "id": "1390",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Scheduled Task/Job",
        "techniqueid": "T1053"
    },
    {
        "description": "Adversaries may abuse the?at.exe?utility to perform task scheduling for initial or recurring execution of malicious code. The?at?utility exists as an executable within Windows for scheduling tasks at a specified time and date. Using?at?requires that the Task Scheduler service be running, and the user to be logged on as a member of the local Administrators group.",
        "id": "1391",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "At (Windows)",
        "techniqueid": "T1053.002"
    },
    {
        "description": "Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The?schtasks?can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task.",
        "id": "1392",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Scheduled Task",
        "techniqueid": "T1053.005"
    },
    {
        "description": "Adversaries may abuse systemd timers to perform task scheduling for initial or recurring execution of malicious code. Systemd timers are unit files with file extension?.timer?that control services. Timers can be set to run on a calendar event or after a time span relative to a starting point. They can be used as an alternative to?Cron?in Linux environments.",
        "id": "1393",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Systemd Timers",
        "techniqueid": "T1053.006"
    },
    {
        "description": "Adversaries may abuse legitimate extensible development features of servers to establish persistent access to systems. Enterprise server applications may include features that allow developers to write and install software or scripts to extend the functionality of the main application. Adversaries may install malicious components to extend and abuse server applications.",
        "id": "1394",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Server Software Component",
        "techniqueid": "T1505"
    },
    {
        "description": "Adversaries may abuse Microsoft transport agents to establish persistent access to systems. Microsoft Exchange transport agents can operate on email messages passing through the transport pipeline to perform various tasks such as filtering spam, filtering malicious attachments, journaling, or adding a corporate signature to the end of all outgoing emails. Transport agents can be written by application developers and then compiled to .NET assemblies that are subsequently registered with the Exchange server. Transport agents will be invoked during a specified stage of email processing and carry out developer defined tasks.",
        "id": "1395",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Transport Agent",
        "techniqueid": "T1505.002"
    },
    {
        "description": "Adversaries may abuse SQL stored procedures to establish persistent access to systems. SQL Stored Procedures are code that can be saved and reused so that database users do not waste time rewriting frequently used SQL queries. Stored procedures can be invoked via SQL statements to the database using the procedure name or via defined events (e.g. when a SQL server application is started/restarted).",
        "id": "1396",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "SQL Stored Procedures",
        "techniqueid": "T1505.001"
    },
    {
        "description": "Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed binaries. Binaries signed with trusted digital certificates can execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files.",
        "id": "1397",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Signed Binary Proxy Execution",
        "techniqueid": "T1218"
    },
    {
        "description": "Adversaries may abuse msiexec.exe to proxy execution of malicious payloads. Msiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi). Msiexec.exe is digitally signed by Microsoft.",
        "id": "1398",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Msiexec",
        "techniqueid": "T1218.007"
    },
    {
        "description": "Adversaries may gain access to and use third-party software suites installed within an enterprise network, such as administration, monitoring, and deployment systems, to move laterally through the network. Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, VNC, HBSS, Altiris, etc.).",
        "id": "1399",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Software Deployment Tools",
        "techniqueid": "T1072"
    },
    {
        "description": "Adversaries may attempt to subvert Kerberos authentication by stealing or forging Kerberos tickets to enable?Pass the Ticket.",
        "id": "1400",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Steal or Forge Kerberos Tickets",
        "techniqueid": "T1558"
    },
    {
        "description": "Adversaries who have the KRBTGT account password hash may forge Kerberos ticket-granting tickets (TGT), also known as a golden ticket. Golden tickets enable adversaries to generate authentication material for any account in Active Directory.",
        "id": "1401",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Golden Ticket",
        "techniqueid": "T1558.001"
    },
    {
        "description": "Adversaries who have the password hash of a target service account (e.g. SharePoint, MSSQL) may forge Kerberos ticket granting service (TGS) tickets, also known as silver tickets. Kerberos TGS tickets are also known as service tickets.",
        "id": "1402",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Silver Ticket",
        "techniqueid": "T1558.002"
    },
    {
        "description": "Adversaries may abuse a valid Kerberos ticket-granting ticket (TGT) or sniff network traffic to obtain a ticket-granting service (TGS) ticket that may be vulnerable to?Brute Force.",
        "id": "1403",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Kerberoasting",
        "techniqueid": "T1558.003"
    },
    {
        "description": "Adversaries may abuse system services or daemons to execute commands or programs. Adversaries can execute malicious content by interacting with or creating services. Many services are set to run at boot, which can aid in achieving persistence (Create or Modify System Process), but adversaries can also abuse services for one-time or temporary execution.",
        "id": "1404",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "System Services",
        "techniqueid": "T1569"
    },
    {
        "description": "Adversaries may abuse the Windows service control manager to execute malicious commands or payloads. The Windows service control manager (services.exe) is an interface to manage and manipulate services. The service control manager is accessible to users via GUI components as well as system utilities such as?sc.exe?and?Net.",
        "id": "1405",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Service Execution",
        "techniqueid": "T1569.002"
    },
    {
        "description": "Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g.?Bash History), operating system or application-specific repositories (e.g.?Credentials in Registry), or other specialized files/artifacts (e.g.?Private Keys).",
        "id": "1406",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Unsecured Credentials",
        "techniqueid": "T1552"
    },
    {
        "description": "Adversaries may search the Registry on compromised systems for insecurely stored credentials. The Windows Registry stores configuration information that can be used by the system or other programs. Adversaries may query the Registry looking for credentials and passwords that have been stored for use by other programs or services. Sometimes these credentials are used for automatic logons.",
        "id": "1407",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Credentials in Registry",
        "techniqueid": "T1552.002"
    },
    {
        "description": "Adversaries may use alternate authentication material, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls.",
        "id": "1408",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Use Alternate Authentication Material",
        "techniqueid": "T1550"
    },
    {
        "description": "Adversaries may \"pass the hash\" using stolen password hashes to move laterally within an environment, bypassing normal system access controls. Pass the hash (PtH) is a method of authenticating as a user without having access to the user's cleartext password. This method bypasses standard authentication steps that require a cleartext password, moving directly into the portion of the authentication that uses the password hash. In this technique, valid password hashes for the account being used are captured using a Credential Access technique. Captured hashes are used with PtH to authenticate as that user. Once authenticated, PtH may be used to perform actions on local or remote systems.",
        "id": "1409",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Pass the Hash",
        "techniqueid": "T1550.002"
    },
    {
        "description": "Adversaries may \"pass the ticket\" using stolen Kerberos tickets to move laterally within an environment, bypassing normal system access controls. Pass the ticket (PtT) is a method of authenticating to a system using Kerberos tickets without having access to an account's password. Kerberos authentication can be used as the first step to lateral movement to a remote system.",
        "id": "1410",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Pass the Ticket",
        "techniqueid": "T1550.003"
    },
    {
        "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop. Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.",
        "id": "1411",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Valid Accounts",
        "techniqueid": "T1078"
    },
    {
        "description": "Adversaries may obtain and abuse credentials of a domain account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover users, administrators, and services.",
        "id": "1412",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Domain Accounts",
        "techniqueid": "T1078.002"
    },
    {
        "description": "Adversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.",
        "id": "1413",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Local Accounts",
        "techniqueid": "T1078.003"
    },
    {
        "description": "Adversaries may obtain and abuse credentials of a cloud account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. In some cases, cloud accounts may be federated with traditional identity management system, such as Window Active Directory.",
        "id": "1414",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Cloud Accounts",
        "techniqueid": "T1078.004"
    },
    {
        "description": "Adversaries may abuse Windows Management Instrumentation (WMI) to achieve execution. WMI is a Windows administration feature that provides a uniform environment for local and remote access to Windows system components. It relies on the WMI service for local and remote access and the server message block (SMB) and Remote Procedure Call Service (RPCS) for remote access. RPCS operates over port 135.",
        "id": "1415",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Windows Management Instrumentation",
        "techniqueid": "T1047"
    },
    {
        "description": "Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.",
        "id": "1416",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Access Token Manipulation",
        "techniqueid": "T1134"
    },
    {
        "description": "Adversaries may duplicate then impersonate another user's token to escalate privileges and bypass access controls. An adversary can create a new access token that duplicates an existing token using?DuplicateToken(Ex). The token can then be used with?ImpersonateLoggedOnUser?to allow the calling thread to impersonate a logged on user's security context, or with?SetThreadToken?to assign the impersonated token to a thread.",
        "id": "1417",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Token Impersonation/Theft",
        "techniqueid": "T1134.001"
    },
    {
        "description": "Adversaries may create a new process with a duplicated token to escalate privileges and bypass access controls. An adversary can duplicate a desired access token with?DuplicateToken(Ex)?and use it with?CreateProcessWithTokenW?to create a new process running under the security context of the impersonated user. This is useful for creating a new process under the security context of a different user.",
        "id": "1418",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Create Process with Token",
        "techniqueid": "T1134.002"
    },
    {
        "description": "Adversaries may make and impersonate tokens to escalate privileges and bypass access controls. If an adversary has a username and password but the user is not logged onto the system, the adversary can then create a logon session for the user using the?LogonUser?function. The function will return a copy of the new session's access token and the adversary can use?SetThreadToken?to assign the token to a thread.",
        "id": "1419",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Make and Impersonate Token",
        "techniqueid": "T1134.003"
    },
    {
        "description": "Adversaries may attempt to get a listing of cloud accounts. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application.",
        "id": "1420",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Cloud Account",
        "techniqueid": "T1087.004"
    },
    {
        "description": "Adversaries may abuse BITS jobs to persistently execute or clean up after malicious payloads. Windows Background Intelligent Transfer Service (BITS) is a low-bandwidth, asynchronous file transfer mechanism exposed through?Component Object Model?(COM). BITS is commonly used by updaters, messengers, and other applications preferred to operate in the background (using available idle bandwidth) without interrupting other networked applications. File transfer tasks are implemented as BITS jobs, which contain a queue of one or more file operations.",
        "id": "1421",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "BITS Jobs",
        "techniqueid": "T1197"
    },
    {
        "description": "Adversaries may abuse features of Winlogon to execute DLLs and/or executables when a user logs in. Winlogon.exe is a Windows component responsible for actions at logon/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete. Registry entries in?HKLM\\Software[\\Wow6432Node\\]\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\?and?HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\?are used to manage additional helper programs and functionalities that support Winlogon.",
        "id": "1422",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Winlogon Helper DLL",
        "techniqueid": "T1547.004"
    },
    {
        "description": "Adversaries may create or edit shortcuts to run a program during system boot or user login. Shortcuts or symbolic links are ways of referencing other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process.",
        "id": "1423",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Shortcut Modification",
        "techniqueid": "T1547.009"
    },
    {
        "description": "Adversaries may abuse print processors to run malicious DLLs during system boot for persistence and/or privilege escalation. Print processors are DLLs that are loaded by the print spooler service, spoolsv.exe, during boot.",
        "id": "1424",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Print Processors",
        "techniqueid": "T1547.012"
    },
    {
        "description": "An adversary may attempt to discover resources that are available within an infrastructure-as-a-service (IaaS) environment. This includes compute service resources such as instances, virtual machines, and snapshots as well as resources of other services including the storage and database services.",
        "id": "1425",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Cloud Infrastructure Discovery",
        "techniqueid": "T1580"
    },
    {
        "description": "An adversary may use a cloud service dashboard GUI with stolen credentials to gain useful information from an operational cloud environment, such as specific services, resources, and features. For example, the GCP Command Center can be used to view all assets, findings of potential security risks, and to run additional queries, such as finding public IP addresses and open ports.",
        "id": "1426",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Cloud Service Dashboard",
        "techniqueid": "T1538"
    },
    {
        "description": "Adversaries may abuse scripting or built-in command line interpreters (CLI) on network devices to execute malicious command and payloads. The CLI is the primary means through which users and administrators interact with the device in order to view system information, modify device operations, or perform diagnostic and administrative functions. CLIs typically contain various permission levels required for different commands.",
        "id": "1427",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Network Device CLI",
        "techniqueid": "T1059.008"
    },
    {
        "description": "Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services. On macOS, launchd processes known as?Launch Daemon?and?Launch Agent?are run to finish system initialization and load user specific parameters.",
        "id": "1428",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Create or Modify System Process",
        "techniqueid": "T1543"
    },
    {
        "description": "Adversaries may create or modify launch agents to repeatedly execute malicious payloads as part of persistence. Per Apple��s developer documentation, when a user logs in, a per-user launchd process is started which loads the parameters for each launch-on-demand user agent from the property list (plist) files found in?/System/Library/LaunchAgents,?/Library/LaunchAgents, and?$HOME/Library/LaunchAgents?. These launch agents have property list files which point to the executables that will be launched .",
        "id": "1429",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Launch Agent",
        "techniqueid": "T1543.001"
    },
    {
        "description": "Adversaries may create or modify systemd services to repeatedly execute malicious payloads as part of persistence. The systemd service manager is commonly used for managing background daemon processes (also known as services) and other system resources. Systemd is the default initialization (init) system on many Linux distributions starting with Debian 8, Ubuntu 15.04, CentOS 7, RHEL 7, Fedora 15, and replaces legacy init systems including SysVinit and Upstart while remaining backwards compatible with the aforementioned init systems.",
        "id": "1430",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Systemd Service",
        "techniqueid": "T1543.002"
    },
    {
        "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry. Service configurations can be modified using utilities such as sc.exe and?Reg.",
        "id": "1431",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Windows Service",
        "techniqueid": "T1543.003"
    },
    {
        "description": "Adversaries may create or modify launch daemons to repeatedly execute malicious payloads as part of persistence. Per Apple��s developer documentation, when macOS and OS X boot up, launchd is run to finish system initialization. This process loads the parameters for each launch-on-demand system-level daemon from the property list (plist) files found in?/System/Library/LaunchDaemons?and?/Library/LaunchDaemons?. These LaunchDaemons have property list files which point to the executables that will be launched .",
        "id": "1432",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Launch Daemon",
        "techniqueid": "T1543.004"
    },
    {
        "description": "Adversaries may access data objects from improperly secured cloud storage.",
        "id": "1433",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Data from Cloud Storage Object",
        "techniqueid": "T1530"
    },
    {
        "description": "Adversaries may modify the configuration settings of a domain to evade defenses and/or escalate privileges in domain environments. Domains provide a centralized means of managing how computer resources (ex: computers, user accounts) can act, and interact with each other, on a network. The policy of the domain also includes configuration settings that may apply between domains in a multi-domain/forest environment. Modifications to domain settings may include altering domain Group Policy Objects (GPOs) or changing trust settings for domains, including federation trusts.",
        "id": "1434",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Domain Policy Modification",
        "techniqueid": "T1484"
    },
    {
        "description": "Adversaries may modify Group Policy Objects (GPOs) to subvert the intended discretionary access controls for a domain, usually with the intention of escalating privileges on the domain. Group policy allows for centralized management of user and computer settings in Active Directory (AD). GPOs are containers for group policy settings made up of files stored within a predicable network path?\\<DOMAIN>\\SYSVOL\\<DOMAIN>\\Policies\\.",
        "id": "1435",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Group Policy Modification",
        "techniqueid": "T1484.001"
    },
    {
        "description": "Adversaries may establish persistence and elevate privileges by executing malicious content triggered by a Windows Management Instrumentation (WMI) event subscription. WMI can be used to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Examples of events that may be subscribed to are the wall clock time, user loging, or the computer's uptime.",
        "id": "1436",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Windows Management Instrumentation Event Subscription",
        "techniqueid": "T1546.003"
    },
    {
        "description": "Adversaries may forge credential materials that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies, tokens, or other materials to authenticate and authorize user access.",
        "id": "1437",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Forge Web Credentials",
        "techniqueid": "T1606"
    },
    {
        "description": "An adversary may forge SAML tokens with any permissions claims and lifetimes if they possess a valid SAML token-signing certificate. The default lifetime of a SAML token is one hour, but the validity period can be specified in the?NotOnOrAfter?value of the?conditions ...?element in a token. This value can be changed using the?AccessTokenLifetime?in a?LifetimeTokenPolicy. Forged SAML tokens enable adversaries to authenticate across services that use SAML 2.0 as an SSO (single sign-on) mechanism.",
        "id": "1438",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "SAML Tokens",
        "techniqueid": "T1606.002"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.",
        "id": "1439",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Hijack Execution Flow",
        "techniqueid": "T1574"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the binaries used by services. Adversaries may use flaws in the permissions of Windows services to replace the binary that is executed upon service start. These service processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.",
        "id": "1440",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Services File Permissions Weakness",
        "techniqueid": "T1574.010"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the binaries used by an installer. These processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.",
        "id": "1441",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Executable Installer File Permissions Weakness",
        "techniqueid": "T1574.005"
    },
    {
        "description": "Adversaries may leverage the COR_PROFILER environment variable to hijack the execution flow of programs that load the .NET CLR. The COR_PROFILER is a .NET Framework feature which allows developers to specify an unmanaged (or external of .NET) profiling DLL to be loaded into each .NET process that loads the Common Language Runtime (CLR). These profiliers are designed to monitor, troubleshoot, and debug managed code executed by the .NET CLR.",
        "id": "1442",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "COR_PROFILER",
        "techniqueid": "T1574.012"
    },
    {
        "description": "Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators.",
        "id": "1443",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Impair Defenses",
        "techniqueid": "T1562"
    },
    {
        "description": "Adversaries may disable security tools to avoid possible detection of their tools and activities. This can take the form of killing security software or event logging processes, deleting Registry keys so that tools do not start at run time, or other methods to interfere with security tools scanning or reporting information.",
        "id": "1444",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Disable or Modify Tools",
        "techniqueid": "T1562.001"
    },
    {
        "description": "Adversaries may disable Windows event logging to limit data that can be leveraged for detections and audits. Windows event logs record user and system activity such as login attempts, process creation, and much more. This data is used by security tools and analysts to generate detections.",
        "id": "1445",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Disable Windows Event Logging",
        "techniqueid": "T1562.002"
    },
    {
        "description": "Adversaries may disable or modify system firewalls in order to bypass controls limiting network usage. Changes could be disabling the entire mechanism as well as adding, deleting, or modifying particular rules. This can be done numerous ways depending on the operating system, including via command-line, editing Windows Registry keys, and Windows Control Panel.",
        "id": "1446",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Disable or Modify System Firewall",
        "techniqueid": "T1562.004"
    },
    {
        "description": "An adversary may attempt to block indicators or events typically captured by sensors from being gathered and analyzed. This could include maliciously redirecting or even disabling host-based sensors, such as Event Tracing for Windows (ETW), by tampering settings that control the collection and flow of event telemetry. These settings may be stored on the system in configuration files and/or in the Registry as well as being accessible via administrative utilities such as?PowerShell?or?Windows Management Instrumentation.",
        "id": "1447",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Indicator Blocking",
        "techniqueid": "T1562.006"
    },
    {
        "description": "Adversaries may disable or modify a firewall within a cloud environment to bypass controls that limit access to cloud resources. Cloud firewalls are separate from system firewalls that are described in?Disable or Modify System Firewall.",
        "id": "1448",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Disable or Modify Cloud Firewall",
        "techniqueid": "T1562.007"
    },
    {
        "description": "An adversary may disable cloud logging capabilities and integrations to limit what data is collected on their activities and avoid detection.",
        "id": "1449",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Disable Cloud Logs",
        "techniqueid": "T1562.008"
    },
    {
        "description": "An adversary may attempt to modify a cloud account's compute service infrastructure to evade defenses. A modification to the compute service infrastructure can include the creation, deletion, or modification of one or more components such as compute instances, virtual machines, and snapshots.",
        "id": "1450",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Modify Cloud Compute Infrastructure",
        "techniqueid": "T1578"
    },
    {
        "description": "An adversary may create a new instance or virtual machine (VM) within the compute service of a cloud account to evade defenses. Creating a new instance may allow an adversary to bypass firewall rules and permissions that exist on instances currently residing within an account. An adversary may?Create Snapshot?of one or more volumes in an account, create a new instance, mount the snapshots, and then apply a less restrictive security policy to collect?Data from Local System?or for?Remote Data Staging.",
        "id": "1451",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Create Cloud Instance",
        "techniqueid": "T1578.002"
    },
    {
        "description": "An adversary may create a snapshot or data backup within a cloud account to evade defenses. A snapshot is a point-in-time copy of an existing cloud compute component such as a virtual machine (VM), virtual hard drive, or volume. An adversary may leverage permissions to create a snapshot in order to bypass restrictions that prevent access to existing compute service infrastructure, unlike in?Revert Cloud Instance?where an adversary may revert to a snapshot to evade detection and remove evidence of their presence.",
        "id": "1452",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Create Snapshot",
        "techniqueid": "T1578.001"
    },
    {
        "description": "An adversary may delete a cloud instance after they have performed malicious activities in an attempt to evade detection and remove evidence of their presence. Deleting an instance or virtual machine can remove valuable forensic artifacts and other evidence of suspicious behavior if the instance is not recoverable.",
        "id": "1453",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Delete Cloud Instance",
        "techniqueid": "T1578.003"
    },
    {
        "description": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically requires being a member of an admin or otherwise privileged group on the remote system.",
        "id": "1454",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Scheduled Task/Job",
        "techniqueid": "T1053"
    },
    {
        "description": "Adversaries may abuse the?at.exe?utility to perform task scheduling for initial or recurring execution of malicious code. The?at?utility exists as an executable within Windows for scheduling tasks at a specified time and date. Using?at?requires that the Task Scheduler service be running, and the user to be logged on as a member of the local Administrators group.",
        "id": "1455",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "At (Windows)",
        "techniqueid": "T1053.002"
    },
    {
        "description": "Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The?schtasks?can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task.",
        "id": "1456",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Scheduled Task",
        "techniqueid": "T1053.005"
    },
    {
        "description": "Adversaries may abuse the?at?utility to perform task scheduling for initial or recurring execution of malicious code. The?at?command within Linux operating systems enables administrators to schedule tasks.",
        "id": "1457",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "At (Linux)",
        "techniqueid": "T1053.001"
    },
    {
        "description": "Adversaries may abuse the?Launchd?daemon to perform task scheduling for initial or recurring execution of malicious code. The?launchd?daemon, native to macOS, is responsible for loading and maintaining services within the operating system. This process loads the parameters for each launch-on-demand system-level daemon from the property list (plist) files found in?/System/Library/LaunchDaemons?and?/Library/LaunchDaemons?. These LaunchDaemons have property list files which point to the executables that will be launched .",
        "id": "1458",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Launchd",
        "techniqueid": "T1053.004"
    },
    {
        "description": "Adversaries may abuse the?cron?utility to perform task scheduling for initial or recurring execution of malicious code. The?cron?utility is a time-based job scheduler for Unix-like operating systems. The?crontab?file contains the schedule of cron entries to be run and the specified times for execution. Any?crontab?files are stored in operating system-specific file paths.",
        "id": "1459",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Cron",
        "techniqueid": "T1053.003"
    },
    {
        "description": "Adversaries may abuse systemd timers to perform task scheduling for initial or recurring execution of malicious code. Systemd timers are unit files with file extension?.timer?that control services. Timers can be set to run on a calendar event or after a time span relative to a starting point. They can be used as an alternative to?Cron?in Linux environments.",
        "id": "1460",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Systemd Timers",
        "techniqueid": "T1053.006"
    },
    {
        "description": "Adversaries may stop or disable services on a system to render those services unavailable to legitimate users. Stopping critical services can inhibit or stop response to an incident or aid in the adversary's overall objectives to cause damage to the environment.",
        "id": "1461",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Service Stop",
        "techniqueid": "T1489"
    },
    {
        "description": "Adversaries can steal user application access tokens as a means of acquiring credentials to access remote systems and resources. This can occur through social engineering and typically requires user action to grant access.",
        "id": "1462",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Steal Application Access Token",
        "techniqueid": "T1528"
    },
    {
        "description": "Adversaries may abuse system services or daemons to execute commands or programs. Adversaries can execute malicious content by interacting with or creating services. Many services are set to run at boot, which can aid in achieving persistence (Create or Modify System Process), but adversaries can also abuse services for one-time or temporary execution.",
        "id": "1463",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "System Services",
        "techniqueid": "T1569"
    },
    {
        "description": "Adversaries may abuse launchctl to execute commands or programs. Launchctl controls the macOS launchd process, which handles things like?Launch Agents and?Launch Daemons, but can execute other commands or programs itself. Launchctl supports taking subcommands on the command-line, interactively, or even redirected from standard input.",
        "id": "1464",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Launchctl",
        "techniqueid": "T1569.001"
    },
    {
        "description": "Adversaries may abuse Windows Management Instrumentation (WMI) to achieve execution. WMI is a Windows administration feature that provides a uniform environment for local and remote access to Windows system components. It relies on the WMI service for local and remote access and the server message block (SMB) and Remote Procedure Call Service (RPCS) for remote access. RPCS operates over port 135.",
        "id": "1465",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Windows Management Instrumentation",
        "techniqueid": "T1047"
    },
    {
        "description": "Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk. An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.",
        "id": "1466",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Abuse Elevation Control Mechanism",
        "techniqueid": "T1548"
    },
    {
        "description": "Adversaries may perform sudo caching and/or use the suoders file to elevate privileges. Adversaries may do this to execute commands as other users or spawn processes with higher privileges.",
        "id": "1467",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Sudo and Sudo Caching",
        "techniqueid": "T1548.003"
    },
    {
        "description": "Adversaries may modify the SSH?authorized_keys?file to maintain persistence on a victim host. Linux distributions and macOS commonly use key-based authentication to secure the authentication process of SSH sessions for remote management. The?authorized_keys?file in SSH specifies the SSH keys that can be used for logging into the user account for which the file is configured. This file is usually found in the user's home directory under?<user-home>/.ssh/authorized_keys. Users may edit the system��s SSH config file to modify the directives PubkeyAuthentication and RSAAuthentication to the value \"yes\" to ensure public key and RSA authentication are enabled. The SSH config file is usually located under?/etc/ssh/sshd_config.",
        "id": "1468",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "SSH Authorized Keys",
        "techniqueid": "T1098.004"
    },
    {
        "description": "Adversaries may abuse time providers to execute DLLs when the system boots. The Windows Time service (W32Time) enables time synchronization across and within domains. W32Time time providers are responsible for retrieving time stamps from hardware/network resources and outputting these values to other network clients.",
        "id": "1469",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Time Providers",
        "techniqueid": "T1547.003"
    },
    {
        "description": "Adversaries may modify plist files to run a program during system boot or user login. Property list (plist) files contain all of the information that macOS and OS X uses to configure applications and services. These files are UTF-8 encoded and formatted like XML documents via a series of keys surrounded by < >. They detail when programs should execute, file paths to the executables, program arguments, required OS permissions, and many others. plists are located in certain locations depending on their purpose such as?/Library/Preferences?(which execute with elevated privileges) and?~/Library/Preferences?(which execute with a user's privileges).",
        "id": "1470",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Plist Modification",
        "techniqueid": "T1547.011"
    },
    {
        "description": "Adversaries may use scripts automatically executed at boot or logon initialization to establish persistence. Initialization scripts can be used to perform administrative functions, which may often execute other programs or send information to an internal logging server. These scripts can vary based on operating system and whether applied locally or remotely.",
        "id": "1471",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Boot or Logon Initialization Scripts",
        "techniqueid": "T1037"
    },
    {
        "description": "Adversaries may use macOS logon scripts automatically executed at logon initialization to establish persistence. macOS allows logon scripts (known as login hooks) to be executed whenever a specific user logs into a system. A login hook tells Mac OS X to execute a certain script when a user logs in, but unlike?Startup Items, a login hook executes as the elevated root user.",
        "id": "1472",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Logon Script (Mac)",
        "techniqueid": "T1037.002"
    },
    {
        "description": "Adversaries may use network logon scripts automatically executed at logon initialization to establish persistence. Network logon scripts can be assigned using Active Directory or Group Policy Objects. These logon scripts run with the privileges of the user they are assigned to. Depending on the systems within the network, initializing one of these scripts could apply to more than one or potentially all systems.",
        "id": "1473",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Network Logon Script",
        "techniqueid": "T1037.003"
    },
    {
        "description": "Adversaries may use rc.common automatically executed at boot initialization to establish persistence. During the boot process, macOS executes?source /etc/rc.common, which is a shell script containing various utility functions. This file also defines routines for processing command-line arguments and for gathering system settings and is thus recommended to include in the start of Startup Item Scripts . In macOS and OS X, this is now a deprecated mechanism in favor of?Launch Agent?and?Launch Daemon?but is currently still used.",
        "id": "1474",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Rc.common",
        "techniqueid": "T1037.004"
    },
    {
        "description": "Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services. On macOS, launchd processes known as?Launch Daemon?and?Launch Agent?are run to finish system initialization and load user specific parameters.",
        "id": "1475",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Create or Modify System Process",
        "techniqueid": "T1543"
    },
    {
        "description": "Adversaries may create or modify systemd services to repeatedly execute malicious payloads as part of persistence. The systemd service manager is commonly used for managing background daemon processes (also known as services) and other system resources. Systemd is the default initialization (init) system on many Linux distributions starting with Debian 8, Ubuntu 15.04, CentOS 7, RHEL 7, Fedora 15, and replaces legacy init systems including SysVinit and Upstart while remaining backwards compatible with the aforementioned init systems.",
        "id": "1476",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Systemd Service",
        "techniqueid": "T1543.002"
    },
    {
        "description": "Adversaries may modify systems in order to manipulate the data as it is accessed and displayed to an end user. By manipulating runtime data, adversaries may attempt to affect a business process, organizational understanding, and decision making.",
        "id": "1477",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Runtime Data Manipulation",
        "techniqueid": "T1565.003"
    },
    {
        "description": "Adversaries may establish persistence by executing malicious content triggered by a user��s shell.?~/.bash_profile?and?~/.bashrc?are shell scripts that contain shell commands. These files are executed in a user's context when a new shell opens or when a user logs in so that their environment is set correctly.",
        "id": "1478",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": ".bash_profile and .bashrc",
        "techniqueid": "T1546.004"
    },
    {
        "description": "Adversaries may gain persistence and elevate privileges by executing malicious content triggered by PowerShell profiles. A PowerShell profile (profile.ps1) is a script that runs when?PowerShell?starts and can be used as a logon script to customize user environments.",
        "id": "1479",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "PowerShell Profile",
        "techniqueid": "T1546.013"
    },
    {
        "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).",
        "id": "1480",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "File and Directory Permissions Modification",
        "techniqueid": "T1222"
    },
    {
        "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).",
        "id": "1481",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Windows File and Directory Permissions Modification",
        "techniqueid": "T1222.001"
    },
    {
        "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).",
        "id": "1482",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Linux and Mac File and Directory Permissions Modification",
        "techniqueid": "T1222.002"
    },
    {
        "description": "Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators.",
        "id": "1483",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Impair Defenses",
        "techniqueid": "T1562"
    },
    {
        "description": "Adversaries may disable security tools to avoid possible detection of their tools and activities. This can take the form of killing security software or event logging processes, deleting Registry keys so that tools do not start at run time, or other methods to interfere with security tools scanning or reporting information.",
        "id": "1484",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Disable or Modify Tools",
        "techniqueid": "T1562.001"
    },
    {
        "description": "Adversaries may disable Windows event logging to limit data that can be leveraged for detections and audits. Windows event logs record user and system activity such as login attempts, process creation, and much more. This data is used by security tools and analysts to generate detections.",
        "id": "1485",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Disable Windows Event Logging",
        "techniqueid": "T1562.002"
    },
    {
        "description": "Adversaries may disable or modify system firewalls in order to bypass controls limiting network usage. Changes could be disabling the entire mechanism as well as adding, deleting, or modifying particular rules. This can be done numerous ways depending on the operating system, including via command-line, editing Windows Registry keys, and Windows Control Panel.",
        "id": "1486",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Disable or Modify System Firewall",
        "techniqueid": "T1562.004"
    },
    {
        "description": "An adversary may attempt to block indicators or events typically captured by sensors from being gathered and analyzed. This could include maliciously redirecting or even disabling host-based sensors, such as Event Tracing for Windows (ETW), by tampering settings that control the collection and flow of event telemetry. These settings may be stored on the system in configuration files and/or in the Registry as well as being accessible via administrative utilities such as?PowerShell?or?Windows Management Instrumentation.",
        "id": "1487",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Indicator Blocking",
        "techniqueid": "T1562.006"
    },
    {
        "description": "Adversaries may delete or alter generated artifacts on a host system, including logs or captured files such as quarantined malware. Locations and format of logs are platform or product-specific, however standard operating system logs are captured as Windows events or Linux/macOS files such as?Bash History?and /var/log/*.",
        "id": "1488",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Indicator Removal on Host",
        "techniqueid": "T1070"
    },
    {
        "description": "Adversaries may clear Windows Event Logs to hide the activity of an intrusion. Windows Event Logs are a record of a computer's alerts and notifications. There are three system-defined sources of events: System, Application, and Security, with five event types: Error, Warning, Information, Success Audit, and Failure Audit.",
        "id": "1489",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Clear Windows Event Logs",
        "techniqueid": "T1070.001"
    },
    {
        "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the?/var/log/?directory. Subfolders in this directory categorize logs by their related functions, such as:",
        "id": "1490",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Clear Linux or Mac System Logs",
        "techniqueid": "T1070.002"
    },
    {
        "description": "In addition to clearing system logs, an adversary may clear the command history of a compromised account to conceal the actions undertaken during an intrusion. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done.",
        "id": "1491",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Clear Command History",
        "techniqueid": "T1070.003"
    },
    {
        "description": "Adversaries may abuse systemd timers to perform task scheduling for initial or recurring execution of malicious code. Systemd timers are unit files with file extension?.timer?that control services. Timers can be set to run on a calendar event or after a time span relative to a starting point. They can be used as an alternative to?Cron?in Linux environments.",
        "id": "1492",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Systemd Timers",
        "techniqueid": "T1053.006"
    },
    {
        "description": "Adversaries may stop or disable services on a system to render those services unavailable to legitimate users. Stopping critical services can inhibit or stop response to an incident or aid in the adversary's overall objectives to cause damage to the environment.",
        "id": "1493",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Service Stop",
        "techniqueid": "T1489"
    },
    {
        "description": "Adversaries may abuse system services or daemons to execute commands or programs. Adversaries can execute malicious content by interacting with or creating services. Many services are set to run at boot, which can aid in achieving persistence (Create or Modify System Process), but adversaries can also abuse services for one-time or temporary execution.",
        "id": "1494",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "System Services",
        "techniqueid": "T1569"
    },
    {
        "description": "Adversaries may abuse the Windows service control manager to execute malicious commands or payloads. The Windows service control manager (services.exe) is an interface to manage and manipulate services. The service control manager is accessible to users via GUI components as well as system utilities such as?sc.exe?and?Net.",
        "id": "1495",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Service Execution",
        "techniqueid": "T1569.002"
    },
    {
        "description": "Adversaries may search local file systems and remote file shares for files containing insecurely stored credentials. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.",
        "id": "1496",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Credentials In Files",
        "techniqueid": "T1552.001"
    },
    {
        "description": "Adversaries may search for private key certificate files on compromised systems for insecurely stored credentials. Private cryptographic keys and certificates are used for authentication, encryption/decryption, and digital signatures. Common key and certificate file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, .pfx, .cer, .p7b, .asc.",
        "id": "1497",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Private Keys",
        "techniqueid": "T1552.004"
    },
    {
        "description": "Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk. An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.",
        "id": "1498",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Abuse Elevation Control Mechanism",
        "techniqueid": "T1548"
    },
    {
        "description": "Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.",
        "id": "1499",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Bypass User Account Control",
        "techniqueid": "T1548.002"
    },
    {
        "description": "Adversaries may perform sudo caching and/or use the suoders file to elevate privileges. Adversaries may do this to execute commands as other users or spawn processes with higher privileges.",
        "id": "1500",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Sudo and Sudo Caching",
        "techniqueid": "T1548.003"
    },
    {
        "description": "Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.",
        "id": "1501",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Access Token Manipulation",
        "techniqueid": "T1134"
    },
    {
        "description": "Adversaries may duplicate then impersonate another user's token to escalate privileges and bypass access controls. An adversary can create a new access token that duplicates an existing token using?DuplicateToken(Ex). The token can then be used with?ImpersonateLoggedOnUser?to allow the calling thread to impersonate a logged on user's security context, or with?SetThreadToken?to assign the impersonated token to a thread.",
        "id": "1502",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Token Impersonation/Theft",
        "techniqueid": "T1134.001"
    },
    {
        "description": "Adversaries may create a new process with a duplicated token to escalate privileges and bypass access controls. An adversary can duplicate a desired access token with?DuplicateToken(Ex)?and use it with?CreateProcessWithTokenW?to create a new process running under the security context of the impersonated user. This is useful for creating a new process under the security context of a different user.",
        "id": "1503",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Create Process with Token",
        "techniqueid": "T1134.002"
    },
    {
        "description": "Adversaries may make and impersonate tokens to escalate privileges and bypass access controls. If an adversary has a username and password but the user is not logged onto the system, the adversary can then create a logon session for the user using the?LogonUser?function. The function will return a copy of the new session's access token and the adversary can use?SetThreadToken?to assign the token to a thread.",
        "id": "1504",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Make and Impersonate Token",
        "techniqueid": "T1134.003"
    },
    {
        "description": "Adversaries may manipulate accounts to maintain access to victim systems. Account manipulation may consist of any action that preserves adversary access to a compromised account, such as modifying credentials or permission groups. These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials. In order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain.",
        "id": "1505",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Account Manipulation",
        "techniqueid": "T1098"
    },
    {
        "description": "Adversaries may grant additional permission levels, such as ReadPermission or FullAccess, to maintain persistent access to an adversary-controlled email account. The?Add-MailboxPermission?PowerShell?cmdlet, available in on-premises Exchange and in the cloud-based service Office 365, adds permissions to a mailbox.",
        "id": "1506",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Exchange Email Delegate Permissions",
        "techniqueid": "T1098.002"
    },
    {
        "description": "An adversary may add the Global Administrator role to an adversary-controlled account to maintain persistent access to an Office 365 tenant. With sufficient permissions, a compromised account can gain almost unlimited access to data and settings (including the ability to reset the passwords of other admins) via the global admin role.",
        "id": "1507",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Add Office 365 Global Administrator Role",
        "techniqueid": "T1098.003"
    },
    {
        "description": "Adversaries may add adversary-controlled credentials to a cloud account to maintain persistent access to victim accounts and instances within the environment.",
        "id": "1508",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Additional Cloud Credentials",
        "techniqueid": "T1098.001"
    },
    {
        "description": "Adversaries may modify the kernel to automatically execute programs on system boot. Loadable Kernel Modules (LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. ?",
        "id": "1509",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Kernel Modules and Extensions",
        "techniqueid": "T1547.006"
    },
    {
        "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of?Unix Shell?while Windows installations include the?Windows Command Shell?and?PowerShell.",
        "id": "1510",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Command and Scripting Interpreter",
        "techniqueid": "T1059"
    },
    {
        "description": "Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the?Start-Process?cmdlet which can be used to run an executable and the?Invoke-Command?cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).",
        "id": "1511",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "PowerShell",
        "techniqueid": "T1059.001"
    },
    {
        "description": "Adversaries may abuse scripting or built-in command line interpreters (CLI) on network devices to execute malicious command and payloads. The CLI is the primary means through which users and administrators interact with the device in order to view system information, modify device operations, or perform diagnostic and administrative functions. CLIs typically contain various permission levels required for different commands.",
        "id": "1512",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Network Device CLI",
        "techniqueid": "T1059.008"
    },
    {
        "description": "Adversaries may create an account to maintain access to victim systems. With a sufficient level of access, creating such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.",
        "id": "1513",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Create Account",
        "techniqueid": "T1136"
    },
    {
        "description": "Adversaries may create a local account to maintain access to victim systems. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service. With a sufficient level of access, the?net user /add?command can be used to create a local account.",
        "id": "1514",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Local Account",
        "techniqueid": "T1136.001"
    },
    {
        "description": "Adversaries may create a domain account to maintain access to victim systems. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover user, administrator, and service accounts. With a sufficient level of access, the?net user /add /domain?command can be used to create a domain account.",
        "id": "1515",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Domain Account",
        "techniqueid": "T1136.002"
    },
    {
        "description": "Adversaries may create a cloud account to maintain access to victim systems. With a sufficient level of access, such accounts may be used to establish secondary credentialed access that does not require persistent remote access tools to be deployed on the system.",
        "id": "1516",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Cloud Account",
        "techniqueid": "T1136.003"
    },
    {
        "description": "Adversaries may create or modify systemd services to repeatedly execute malicious payloads as part of persistence. The systemd service manager is commonly used for managing background daemon processes (also known as services) and other system resources. Systemd is the default initialization (init) system on many Linux distributions starting with Debian 8, Ubuntu 15.04, CentOS 7, RHEL 7, Fedora 15, and replaces legacy init systems including SysVinit and Upstart while remaining backwards compatible with the aforementioned init systems.",
        "id": "1517",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Systemd Service",
        "techniqueid": "T1543.002"
    },
    {
        "description": "Adversaries may modify the configuration settings of a domain to evade defenses and/or escalate privileges in domain environments. Domains provide a centralized means of managing how computer resources (ex: computers, user accounts) can act, and interact with each other, on a network. The policy of the domain also includes configuration settings that may apply between domains in a multi-domain/forest environment. Modifications to domain settings may include altering domain Group Policy Objects (GPOs) or changing trust settings for domains, including federation trusts.",
        "id": "1518",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Domain Policy Modification",
        "techniqueid": "T1484"
    },
    {
        "description": "Adversaries may add new domain trusts or modify the properties of existing domain trusts to evade defenses and/or elevate privileges. Domain trust details, such as whether or not a domain is federated, allow authentication and authorization properties to apply between domains for the purpose of accessing shared resources. These trust objects may include accounts, credentials, and other authentication material applied to servers, tokens, and domains.",
        "id": "1519",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Domain Trust Modification",
        "techniqueid": "T1484.002"
    },
    {
        "description": "Adversaries may establish persistence and elevate privileges by executing malicious content triggered by a Windows Management Instrumentation (WMI) event subscription. WMI can be used to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Examples of events that may be subscribed to are the wall clock time, user loging, or the computer's uptime.",
        "id": "1520",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Windows Management Instrumentation Event Subscription",
        "techniqueid": "T1546.003"
    },
    {
        "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).",
        "id": "1521",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "File and Directory Permissions Modification",
        "techniqueid": "T1222"
    },
    {
        "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).",
        "id": "1522",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Windows File and Directory Permissions Modification",
        "techniqueid": "T1222.001"
    },
    {
        "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).",
        "id": "1523",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Linux and Mac File and Directory Permissions Modification",
        "techniqueid": "T1222.002"
    },
    {
        "description": "Adversaries may overwrite or corrupt the flash memory contents of system BIOS or other firmware in devices attached to a system in order to render them inoperable or unable to boot. Firmware is software that is loaded and executed from non-volatile memory on hardware devices in order to initialize and manage device functionality. These devices could include the motherboard, hard drive, or video cards.",
        "id": "1524",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Firmware Corruption",
        "techniqueid": "T1495"
    },
    {
        "description": "Adversaries may forge credential materials that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies, tokens, or other materials to authenticate and authorize user access.",
        "id": "1525",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Forge Web Credentials",
        "techniqueid": "T1606"
    },
    {
        "description": "An adversary may forge SAML tokens with any permissions claims and lifetimes if they possess a valid SAML token-signing certificate. The default lifetime of a SAML token is one hour, but the validity period can be specified in the?NotOnOrAfter?value of the?conditions ...?element in a token. This value can be changed using the?AccessTokenLifetime?in a?LifetimeTokenPolicy. Forged SAML tokens enable adversaries to authenticate across services that use SAML 2.0 as an SSO (single sign-on) mechanism.",
        "id": "1526",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "SAML Tokens",
        "techniqueid": "T1606.002"
    },
    {
        "description": "Adversaries may implant cloud container images with malicious code to establish persistence. Amazon Web Service (AWS) Amazon Machine Images (AMI), Google Cloud Platform (GCP) Images, and Azure Images as well as popular container runtimes such as Docker can be implanted or backdoored. Depending on how the infrastructure is provisioned, this could provide persistent access if the infrastructure provisioning tool is instructed to always use the latest image.",
        "id": "1527",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Implant Container Image",
        "techniqueid": "T1525"
    },
    {
        "description": "Adversaries may install code on externally facing portals, such as a VPN login page, to capture and transmit credentials of users who attempt to log into the service. For example, a compromised login page may log provided user credentials before logging the user in to the service.",
        "id": "1528",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Web Portal Capture",
        "techniqueid": "T1056.003"
    },
    {
        "description": "Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows or pluggable authentication modules (PAM) on Unix-based systems, responsible for gathering, storing, and validating credentials.",
        "id": "1529",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Modify Authentication Process",
        "techniqueid": "T1556"
    },
    {
        "description": "Adversaries may patch the authentication process on a domain controller to bypass the typical authentication mechanisms and enable access to accounts.",
        "id": "1530",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Domain Controller Authentication",
        "techniqueid": "T1556.001"
    },
    {
        "description": "Adversaries may modify pluggable authentication modules (PAM) to access user credentials or enable otherwise unwarranted access to accounts. PAM is a modular system of configuration files, libraries, and executable files which guide authentication for many services. The most common authentication module is?pam_unix.so, which retrieves, sets, and verifies account authentication information in?/etc/passwd?and?/etc/shadow.",
        "id": "1531",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Pluggable Authentication Modules",
        "techniqueid": "T1556.003"
    },
    {
        "description": "Adversaries may use?Patch System Image?to hard code a password in the operating system, thus bypassing of native authentication mechanisms for local accounts on network devices.",
        "id": "1532",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Network Device Authentication",
        "techniqueid": "T1556.004"
    },
    {
        "description": "Adversaries may make changes to the operating system of embedded network devices to weaken defenses and provide new capabilities for themselves. On such devices, the operating systems are typically monolithic and most of the device functionality and capabilities are contained within a single file.",
        "id": "1533",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Modify System Image",
        "techniqueid": "T1601"
    },
    {
        "description": "Adversaries may modify the operating system of a network device to introduce new capabilities or weaken existing defenses. Some network devices are built with a monolithic architecture, where the entire operating system and most of the functionality of the device is contained within a single file. Adversaries may change this file in storage, to be loaded in a future boot, or in memory during runtime.",
        "id": "1534",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Patch System Image",
        "techniqueid": "T1601.001"
    },
    {
        "description": "Adversaries may install an older version of the operating system of a network device to weaken security. Older operating system versions on network devices often have weaker encryption ciphers and, in general, fewer/less updated defensive features.",
        "id": "1535",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Downgrade System Image",
        "techniqueid": "T1601.002"
    },
    {
        "description": "Adversaries may bridge network boundaries by compromising perimeter network devices. Breaching these devices may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.",
        "id": "1536",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Network Boundary Bridging",
        "techniqueid": "T1599"
    },
    {
        "description": "Adversaries may bridge network boundaries by modifying a network device��s Network Address Translation (NAT) configuration. Malicious modifications to NAT may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.",
        "id": "1537",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Network Address Translation Traversal",
        "techniqueid": "T1599.001"
    },
    {
        "description": "Adversaries may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password, from the operating system and software. Credentials can then be used to perform?Lateral Movement?and access restricted information.",
        "id": "1538",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "OS Credential Dumping",
        "techniqueid": "T1003"
    },
    {
        "description": "Adversaries may attempt to access credentials and other sensitive information by abusing a Windows Domain Controller's application programming interface (API) to simulate the replication process from a remote domain controller using a technique called DCSync.",
        "id": "1539",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "DCSync",
        "techniqueid": "T1003.006"
    },
    {
        "description": "Adversaries may attempt to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS). After a user logs on, the system generates and stores a variety of credential materials in LSASS process memory. These credential materials can be harvested by an administrative user or SYSTEM and used to conduct?Lateral Movement?using?Use Alternate Authentication Material.",
        "id": "1540",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "LSASS Memory",
        "techniqueid": "T1003.001"
    },
    {
        "description": "Adversaries may attempt to extract credential material from the Security Account Manager (SAM) database either through in-memory techniques or through the Windows Registry where the SAM database is stored. The SAM is a database file that contains local accounts for the host, typically those found with the?net user?command. Enumerating the SAM database requires SYSTEM level access.",
        "id": "1541",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Security Account Manager",
        "techniqueid": "T1003.002"
    },
    {
        "description": "Adversaries may gather credentials from information stored in the Proc filesystem or?/proc. The Proc filesystem on Linux contains a great deal of information regarding the state of the running operating system. Processes running with root privileges can use this facility to scrape live memory of other running programs. If any of these programs store passwords in clear text or password hashes in memory, these values can then be harvested for either usage or brute force attacks, respectively.",
        "id": "1542",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Proc Filesystem",
        "techniqueid": "T1003.007"
    },
    {
        "description": "Adversaries may attempt to dump the contents of?/etc/passwd?and?/etc/shadow?to enable offline password cracking. Most modern Linux operating systems use a combination of?/etc/passwd?and?/etc/shadow?to store user account information including password hashes in?/etc/shadow. By default,?/etc/shadow?is only readable by the root user.",
        "id": "1543",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "/etc/passwd and /etc/shadow",
        "techniqueid": "T1003.008"
    },
    {
        "description": "Adversaries may attempt to access cached domain credentials used to allow authentication to occur in the event a domain controller is unavailable.",
        "id": "1544",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Cached Domain Credentials",
        "techniqueid": "T1003.005"
    },
    {
        "description": "Adversaries with SYSTEM access to a host may attempt to access Local Security Authority (LSA) secrets, which can contain a variety of different credential materials, such as credentials for service accounts. LSA secrets are stored in the registry at?HKEY_LOCAL_MACHINE\\SECURITY\\Policy\\Secrets. LSA secrets can also be dumped from memory.",
        "id": "1545",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "LSA Secrets",
        "techniqueid": "T1003.004"
    },
    {
        "description": "Adversaries may attempt to access or create a copy of the Active Directory domain database in order to steal credential information, as well as obtain other information about domain members such as devices, users, and access rights. By default, the NTDS file (NTDS.dit) is located in?%SystemRoot%\\NTDS\\Ntds.dit?of a domain controller.",
        "id": "1546",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "NTDS",
        "techniqueid": "T1003.003"
    },
    {
        "description": "Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control.",
        "id": "1547",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Pre-OS Boot",
        "techniqueid": "T1542"
    },
    {
        "description": "Adversaries may modify system firmware to persist on systems.The BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer.",
        "id": "1548",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "System Firmware",
        "techniqueid": "T1542.001"
    },
    {
        "description": "Adversaries may use bootkits to persist on systems. Bootkits reside at a layer below the operating system and may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.",
        "id": "1549",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Bootkit",
        "techniqueid": "T1542.003"
    },
    {
        "description": "Adversaries may abuse netbooting to load an unauthorized network device operating system from a Trivial File Transfer Protocol (TFTP) server. TFTP boot (netbooting) is commonly used by network administrators to load configuration-controlled network device images from a centralized management server. Netbooting is one option in the boot sequence and can be used to centralize, manage, and control device images.",
        "id": "1550",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "TFTP Boot",
        "techniqueid": "T1542.005"
    },
    {
        "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process.",
        "id": "1551",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Process Injection",
        "techniqueid": "T1055"
    },
    {
        "description": "Adversaries may inject malicious code into processes via ptrace (process trace) system calls in order to evade process-based defenses as well as possibly elevate privileges. Ptrace system call injection is a method of executing arbitrary code in the address space of a separate live process.",
        "id": "1552",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Ptrace System Calls",
        "techniqueid": "T1055.008"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to interact with remote systems using Windows Remote Management (WinRM). The adversary may then perform actions as the logged-on user.",
        "id": "1553",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Windows Remote Management",
        "techniqueid": "T1021.006"
    },
    {
        "description": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically requires being a member of an admin or otherwise privileged group on the remote system.",
        "id": "1554",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Scheduled Task/Job",
        "techniqueid": "T1053"
    },
    {
        "description": "Adversaries may abuse the?at.exe?utility to perform task scheduling for initial or recurring execution of malicious code. The?at?utility exists as an executable within Windows for scheduling tasks at a specified time and date. Using?at?requires that the Task Scheduler service be running, and the user to be logged on as a member of the local Administrators group.",
        "id": "1555",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "At (Windows)",
        "techniqueid": "T1053.002"
    },
    {
        "description": "Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The?schtasks?can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task.",
        "id": "1556",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Scheduled Task",
        "techniqueid": "T1053.005"
    },
    {
        "description": "Adversaries may abuse systemd timers to perform task scheduling for initial or recurring execution of malicious code. Systemd timers are unit files with file extension?.timer?that control services. Timers can be set to run on a calendar event or after a time span relative to a starting point. They can be used as an alternative to?Cron?in Linux environments.",
        "id": "1557",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Systemd Timers",
        "techniqueid": "T1053.006"
    },
    {
        "description": "Adversaries may abuse legitimate extensible development features of servers to establish persistent access to systems. Enterprise server applications may include features that allow developers to write and install software or scripts to extend the functionality of the main application. Adversaries may install malicious components to extend and abuse server applications.",
        "id": "1558",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Server Software Component",
        "techniqueid": "T1505"
    },
    {
        "description": "Adversaries may abuse Microsoft transport agents to establish persistent access to systems. Microsoft Exchange transport agents can operate on email messages passing through the transport pipeline to perform various tasks such as filtering spam, filtering malicious attachments, journaling, or adding a corporate signature to the end of all outgoing emails. Transport agents can be written by application developers and then compiled to .NET assemblies that are subsequently registered with the Exchange server. Transport agents will be invoked during a specified stage of email processing and carry out developer defined tasks.",
        "id": "1559",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Transport Agent",
        "techniqueid": "T1505.002"
    },
    {
        "description": "Adversaries may abuse SQL stored procedures to establish persistent access to systems. SQL Stored Procedures are code that can be saved and reused so that database users do not waste time rewriting frequently used SQL queries. Stored procedures can be invoked via SQL statements to the database using the procedure name or via defined events (e.g. when a SQL server application is started/restarted).",
        "id": "1560",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "SQL Stored Procedures",
        "techniqueid": "T1505.001"
    },
    {
        "description": "Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed binaries. Binaries signed with trusted digital certificates can execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files.",
        "id": "1561",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Signed Binary Proxy Execution",
        "techniqueid": "T1218"
    },
    {
        "description": "Adversaries may abuse msiexec.exe to proxy execution of malicious payloads. Msiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi). Msiexec.exe is digitally signed by Microsoft.",
        "id": "1562",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Msiexec",
        "techniqueid": "T1218.007"
    },
    {
        "description": "Adversaries may gain access to and use third-party software suites installed within an enterprise network, such as administration, monitoring, and deployment systems, to move laterally through the network. Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, VNC, HBSS, Altiris, etc.).",
        "id": "1563",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Software Deployment Tools",
        "techniqueid": "T1072"
    },
    {
        "description": "Adversaries may attempt to subvert Kerberos authentication by stealing or forging Kerberos tickets to enable?Pass the Ticket.",
        "id": "1564",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Steal or Forge Kerberos Tickets",
        "techniqueid": "T1558"
    },
    {
        "description": "Adversaries who have the KRBTGT account password hash may forge Kerberos ticket-granting tickets (TGT), also known as a golden ticket. Golden tickets enable adversaries to generate authentication material for any account in Active Directory.",
        "id": "1565",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Golden Ticket",
        "techniqueid": "T1558.001"
    },
    {
        "description": "Adversaries who have the password hash of a target service account (e.g. SharePoint, MSSQL) may forge Kerberos ticket granting service (TGS) tickets, also known as silver tickets. Kerberos TGS tickets are also known as service tickets.",
        "id": "1566",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Silver Ticket",
        "techniqueid": "T1558.002"
    },
    {
        "description": "Adversaries may abuse a valid Kerberos ticket-granting ticket (TGT) or sniff network traffic to obtain a ticket-granting service (TGS) ticket that may be vulnerable to?Brute Force.",
        "id": "1567",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Kerberoasting",
        "techniqueid": "T1558.003"
    },
    {
        "description": "Adversaries may abuse system services or daemons to execute commands or programs. Adversaries can execute malicious content by interacting with or creating services. Many services are set to run at boot, which can aid in achieving persistence (Create or Modify System Process), but adversaries can also abuse services for one-time or temporary execution.",
        "id": "1568",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "System Services",
        "techniqueid": "T1569"
    },
    {
        "description": "Adversaries may abuse the Windows service control manager to execute malicious commands or payloads. The Windows service control manager (services.exe) is an interface to manage and manipulate services. The service control manager is accessible to users via GUI components as well as system utilities such as?sc.exe?and?Net.",
        "id": "1569",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Service Execution",
        "techniqueid": "T1569.002"
    },
    {
        "description": "Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g.?Bash History), operating system or application-specific repositories (e.g.?Credentials in Registry), or other specialized files/artifacts (e.g.?Private Keys).",
        "id": "1570",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Unsecured Credentials",
        "techniqueid": "T1552"
    },
    {
        "description": "Adversaries may search the Registry on compromised systems for insecurely stored credentials. The Windows Registry stores configuration information that can be used by the system or other programs. Adversaries may query the Registry looking for credentials and passwords that have been stored for use by other programs or services. Sometimes these credentials are used for automatic logons.",
        "id": "1571",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Credentials in Registry",
        "techniqueid": "T1552.002"
    },
    {
        "description": "Adversaries may use alternate authentication material, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls.",
        "id": "1572",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Use Alternate Authentication Material",
        "techniqueid": "T1550"
    },
    {
        "description": "Adversaries may \"pass the hash\" using stolen password hashes to move laterally within an environment, bypassing normal system access controls. Pass the hash (PtH) is a method of authenticating as a user without having access to the user's cleartext password. This method bypasses standard authentication steps that require a cleartext password, moving directly into the portion of the authentication that uses the password hash. In this technique, valid password hashes for the account being used are captured using a Credential Access technique. Captured hashes are used with PtH to authenticate as that user. Once authenticated, PtH may be used to perform actions on local or remote systems.",
        "id": "1573",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Pass the Hash",
        "techniqueid": "T1550.002"
    },
    {
        "description": "Adversaries may \"pass the ticket\" using stolen Kerberos tickets to move laterally within an environment, bypassing normal system access controls. Pass the ticket (PtT) is a method of authenticating to a system using Kerberos tickets without having access to an account's password. Kerberos authentication can be used as the first step to lateral movement to a remote system.",
        "id": "1574",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Pass the Ticket",
        "techniqueid": "T1550.003"
    },
    {
        "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop. Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.",
        "id": "1575",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Valid Accounts",
        "techniqueid": "T1078"
    },
    {
        "description": "Adversaries may obtain and abuse credentials of a domain account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover users, administrators, and services.",
        "id": "1576",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Domain Accounts",
        "techniqueid": "T1078.002"
    },
    {
        "description": "Adversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.",
        "id": "1577",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Local Accounts",
        "techniqueid": "T1078.003"
    },
    {
        "description": "Adversaries may obtain and abuse credentials of a cloud account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. In some cases, cloud accounts may be federated with traditional identity management system, such as Window Active Directory.",
        "id": "1578",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Cloud Accounts",
        "techniqueid": "T1078.004"
    },
    {
        "description": "Adversaries may abuse Windows Management Instrumentation (WMI) to achieve execution. WMI is a Windows administration feature that provides a uniform environment for local and remote access to Windows system components. It relies on the WMI service for local and remote access and the server message block (SMB) and Remote Procedure Call Service (RPCS) for remote access. RPCS operates over port 135.",
        "id": "1579",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Windows Management Instrumentation",
        "techniqueid": "T1047"
    },
    {
        "description": "Adversaries may gain access to and use third-party software suites installed within an enterprise network, such as administration, monitoring, and deployment systems, to move laterally through the network. Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, VNC, HBSS, Altiris, etc.).",
        "id": "1580",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Software Deployment Tools",
        "techniqueid": "T1072"
    },
    {
        "description": "Adversaries may obtain and abuse credentials of a cloud account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. In some cases, cloud accounts may be federated with traditional identity management system, such as Window Active Directory.",
        "id": "1581",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Cloud Accounts",
        "techniqueid": "T1078.004"
    },
    {
        "description": "Adversaries may modify the configuration settings of a domain to evade defenses and/or escalate privileges in domain environments. Domains provide a centralized means of managing how computer resources (ex: computers, user accounts) can act, and interact with each other, on a network. The policy of the domain also includes configuration settings that may apply between domains in a multi-domain/forest environment. Modifications to domain settings may include altering domain Group Policy Objects (GPOs) or changing trust settings for domains, including federation trusts.",
        "id": "1582",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Domain Policy Modification",
        "techniqueid": "T1484"
    },
    {
        "description": "Adversaries may attempt to take advantage of a weakness in an Internet-facing computer or program using software, data, or commands in order to cause unintended or unanticipated behavior. The weakness in the system can be a bug, a glitch, or a design vulnerability. These applications are often websites, but can include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other applications with Internet accessible open sockets, such as web servers and related services. Depending on the flaw being exploited this may include?Exploitation for Defense Evasion.",
        "id": "1583",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Exploit Public-Facing Application",
        "techniqueid": "T1190"
    },
    {
        "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.?A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.",
        "id": "1584",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Exploitation of Remote Services",
        "techniqueid": "T1210"
    },
    {
        "description": "Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows or pluggable authentication modules (PAM) on Unix-based systems, responsible for gathering, storing, and validating credentials.",
        "id": "1585",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Modify Authentication Process",
        "techniqueid": "T1556"
    },
    {
        "description": "Adversaries may patch the authentication process on a domain controller to bypass the typical authentication mechanisms and enable access to accounts.",
        "id": "1586",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Domain Controller Authentication",
        "techniqueid": "T1556.001"
    },
    {
        "description": "Adversaries may attempt to subvert Kerberos authentication by stealing or forging Kerberos tickets to enable?Pass the Ticket.",
        "id": "1587",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Steal or Forge Kerberos Tickets",
        "techniqueid": "T1558"
    },
    {
        "description": "Adversaries who have the password hash of a target service account (e.g. SharePoint, MSSQL) may forge Kerberos ticket granting service (TGS) tickets, also known as silver tickets. Kerberos TGS tickets are also known as service tickets.",
        "id": "1588",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Silver Ticket",
        "techniqueid": "T1558.002"
    },
    {
        "description": "Adversaries may abuse a valid Kerberos ticket-granting ticket (TGT) or sniff network traffic to obtain a ticket-granting service (TGS) ticket that may be vulnerable to?Brute Force.",
        "id": "1589",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Kerberoasting",
        "techniqueid": "T1558.003"
    },
    {
        "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop. Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.",
        "id": "1590",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Valid Accounts",
        "techniqueid": "T1078"
    },
    {
        "description": "Adversaries may obtain and abuse credentials of a domain account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover users, administrators, and services.",
        "id": "1591",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Domain Accounts",
        "techniqueid": "T1078.002"
    },
    {
        "description": "Adversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.",
        "id": "1592",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Local Accounts",
        "techniqueid": "T1078.003"
    },
    {
        "description": "Adversaries may obtain and abuse credentials of a cloud account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. In some cases, cloud accounts may be federated with traditional identity management system, such as Window Active Directory.",
        "id": "1593",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Cloud Accounts",
        "techniqueid": "T1078.004"
    },
    {
        "description": "Adversaries may hijack a legitimate user��s remote desktop session to move laterally within an environment. Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).",
        "id": "1594",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "RDP Hijacking",
        "techniqueid": "T1563.002"
    },
    {
        "description": "Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.",
        "id": "1595",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Access Token Manipulation",
        "techniqueid": "T1134"
    },
    {
        "description": "Adversaries may duplicate then impersonate another user's token to escalate privileges and bypass access controls. An adversary can create a new access token that duplicates an existing token using?DuplicateToken(Ex). The token can then be used with?ImpersonateLoggedOnUser?to allow the calling thread to impersonate a logged on user's security context, or with?SetThreadToken?to assign the impersonated token to a thread.",
        "id": "1596",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Token Impersonation/Theft",
        "techniqueid": "T1134.001"
    },
    {
        "description": "Adversaries may create a new process with a duplicated token to escalate privileges and bypass access controls. An adversary can duplicate a desired access token with?DuplicateToken(Ex)?and use it with?CreateProcessWithTokenW?to create a new process running under the security context of the impersonated user. This is useful for creating a new process under the security context of a different user.",
        "id": "1597",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Create Process with Token",
        "techniqueid": "T1134.002"
    },
    {
        "description": "Adversaries may make and impersonate tokens to escalate privileges and bypass access controls. If an adversary has a username and password but the user is not logged onto the system, the adversary can then create a logon session for the user using the?LogonUser?function. The function will return a copy of the new session's access token and the adversary can use?SetThreadToken?to assign the token to a thread.",
        "id": "1598",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Make and Impersonate Token",
        "techniqueid": "T1134.003"
    },
    {
        "description": "Adversaries may attempt to get a listing of cloud accounts. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application.",
        "id": "1599",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Cloud Account",
        "techniqueid": "T1087.004"
    },
    {
        "description": "Adversaries may abuse BITS jobs to persistently execute or clean up after malicious payloads. Windows Background Intelligent Transfer Service (BITS) is a low-bandwidth, asynchronous file transfer mechanism exposed through?Component Object Model?(COM). BITS is commonly used by updaters, messengers, and other applications preferred to operate in the background (using available idle bandwidth) without interrupting other networked applications. File transfer tasks are implemented as BITS jobs, which contain a queue of one or more file operations.",
        "id": "1600",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "BITS Jobs",
        "techniqueid": "T1197"
    },
    {
        "description": "Adversaries may abuse features of Winlogon to execute DLLs and/or executables when a user logs in. Winlogon.exe is a Windows component responsible for actions at logon/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete. Registry entries in?HKLM\\Software[\\Wow6432Node\\]\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\?and?HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\?are used to manage additional helper programs and functionalities that support Winlogon.",
        "id": "1601",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Winlogon Helper DLL",
        "techniqueid": "T1547.004"
    },
    {
        "description": "Adversaries may create or edit shortcuts to run a program during system boot or user login. Shortcuts or symbolic links are ways of referencing other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process.",
        "id": "1602",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Shortcut Modification",
        "techniqueid": "T1547.009"
    },
    {
        "description": "An adversary may attempt to discover resources that are available within an infrastructure-as-a-service (IaaS) environment. This includes compute service resources such as instances, virtual machines, and snapshots as well as resources of other services including the storage and database services.",
        "id": "1603",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Cloud Infrastructure Discovery",
        "techniqueid": "T1580"
    },
    {
        "description": "An adversary may use a cloud service dashboard GUI with stolen credentials to gain useful information from an operational cloud environment, such as specific services, resources, and features. For example, the GCP Command Center can be used to view all assets, findings of potential security risks, and to run additional queries, such as finding public IP addresses and open ports.",
        "id": "1604",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Cloud Service Dashboard",
        "techniqueid": "T1538"
    },
    {
        "description": "Adversaries may abuse scripting or built-in command line interpreters (CLI) on network devices to execute malicious command and payloads. The CLI is the primary means through which users and administrators interact with the device in order to view system information, modify device operations, or perform diagnostic and administrative functions. CLIs typically contain various permission levels required for different commands.",
        "id": "1605",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Network Device CLI",
        "techniqueid": "T1059.008"
    },
    {
        "description": "Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services. On macOS, launchd processes known as?Launch Daemon?and?Launch Agent?are run to finish system initialization and load user specific parameters.",
        "id": "1606",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Create or Modify System Process",
        "techniqueid": "T1543"
    },
    {
        "description": "Adversaries may create or modify launch agents to repeatedly execute malicious payloads as part of persistence. Per Apple��s developer documentation, when a user logs in, a per-user launchd process is started which loads the parameters for each launch-on-demand user agent from the property list (plist) files found in?/System/Library/LaunchAgents,?/Library/LaunchAgents, and?$HOME/Library/LaunchAgents?. These launch agents have property list files which point to the executables that will be launched .",
        "id": "1607",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Launch Agent",
        "techniqueid": "T1543.001"
    },
    {
        "description": "Adversaries may create or modify systemd services to repeatedly execute malicious payloads as part of persistence. The systemd service manager is commonly used for managing background daemon processes (also known as services) and other system resources. Systemd is the default initialization (init) system on many Linux distributions starting with Debian 8, Ubuntu 15.04, CentOS 7, RHEL 7, Fedora 15, and replaces legacy init systems including SysVinit and Upstart while remaining backwards compatible with the aforementioned init systems.",
        "id": "1608",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Systemd Service",
        "techniqueid": "T1543.002"
    },
    {
        "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry. Service configurations can be modified using utilities such as sc.exe and?Reg.",
        "id": "1609",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Windows Service",
        "techniqueid": "T1543.003"
    },
    {
        "description": "Adversaries may create or modify launch daemons to repeatedly execute malicious payloads as part of persistence. Per Apple��s developer documentation, when macOS and OS X boot up, launchd is run to finish system initialization. This process loads the parameters for each launch-on-demand system-level daemon from the property list (plist) files found in?/System/Library/LaunchDaemons?and?/Library/LaunchDaemons?. These LaunchDaemons have property list files which point to the executables that will be launched .",
        "id": "1610",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Launch Daemon",
        "techniqueid": "T1543.004"
    },
    {
        "description": "Adversaries may access data objects from improperly secured cloud storage.",
        "id": "1611",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Data from Cloud Storage Object",
        "techniqueid": "T1530"
    },
    {
        "description": "Adversaries may leverage information repositories to mine valuable information. Information repositories are tools that allow for storage of information, typically to facilitate collaboration or information sharing between users, and can store a wide variety of data that may aid adversaries in further objectives, or direct access to the target information.",
        "id": "1612",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Data from Information Repositories",
        "techniqueid": "T1213"
    },
    {
        "description": "Adversaries may leverage Confluence repositories to mine valuable information. Often found in development environments alongside Atlassian JIRA, Confluence is generally used to store development-related documentation, however, in general may contain more diverse categories of useful information, such as:",
        "id": "1613",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Confluence",
        "techniqueid": "T1213.001"
    },
    {
        "description": "Adversaries may leverage the SharePoint repository as a source to mine valuable information. SharePoint will often contain useful information for an adversary to learn about the structure and functionality of the internal network and systems. For example, the following is a list of example information that may hold potential value to an adversary and may also be found on SharePoint:",
        "id": "1614",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Sharepoint",
        "techniqueid": "T1213.002"
    },
    {
        "description": "Adversaries may modify the configuration settings of a domain to evade defenses and/or escalate privileges in domain environments. Domains provide a centralized means of managing how computer resources (ex: computers, user accounts) can act, and interact with each other, on a network. The policy of the domain also includes configuration settings that may apply between domains in a multi-domain/forest environment. Modifications to domain settings may include altering domain Group Policy Objects (GPOs) or changing trust settings for domains, including federation trusts.",
        "id": "1615",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Domain Policy Modification",
        "techniqueid": "T1484"
    },
    {
        "description": "Adversaries may modify Group Policy Objects (GPOs) to subvert the intended discretionary access controls for a domain, usually with the intention of escalating privileges on the domain. Group policy allows for centralized management of user and computer settings in Active Directory (AD). GPOs are containers for group policy settings made up of files stored within a predicable network path?\\<DOMAIN>\\SYSVOL\\<DOMAIN>\\Policies\\.",
        "id": "1616",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Group Policy Modification",
        "techniqueid": "T1484.001"
    },
    {
        "description": "Adversaries may establish persistence and elevate privileges by executing malicious content triggered by a Windows Management Instrumentation (WMI) event subscription. WMI can be used to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Examples of events that may be subscribed to are the wall clock time, user loging, or the computer's uptime.",
        "id": "1617",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Windows Management Instrumentation Event Subscription",
        "techniqueid": "T1546.003"
    },
    {
        "description": "Adversaries may forge credential materials that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies, tokens, or other materials to authenticate and authorize user access.",
        "id": "1618",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Forge Web Credentials",
        "techniqueid": "T1606"
    },
    {
        "description": "An adversary may forge SAML tokens with any permissions claims and lifetimes if they possess a valid SAML token-signing certificate. The default lifetime of a SAML token is one hour, but the validity period can be specified in the?NotOnOrAfter?value of the?conditions ...?element in a token. This value can be changed using the?AccessTokenLifetime?in a?LifetimeTokenPolicy. Forged SAML tokens enable adversaries to authenticate across services that use SAML 2.0 as an SSO (single sign-on) mechanism.",
        "id": "1619",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "SAML Tokens",
        "techniqueid": "T1606.002"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.",
        "id": "1620",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Hijack Execution Flow",
        "techniqueid": "T1574"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the binaries used by services. Adversaries may use flaws in the permissions of Windows services to replace the binary that is executed upon service start. These service processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.",
        "id": "1621",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Services File Permissions Weakness",
        "techniqueid": "T1574.010"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the binaries used by an installer. These processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.",
        "id": "1622",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Executable Installer File Permissions Weakness",
        "techniqueid": "T1574.005"
    },
    {
        "description": "Adversaries may leverage the COR_PROFILER environment variable to hijack the execution flow of programs that load the .NET CLR. The COR_PROFILER is a .NET Framework feature which allows developers to specify an unmanaged (or external of .NET) profiling DLL to be loaded into each .NET process that loads the Common Language Runtime (CLR). These profiliers are designed to monitor, troubleshoot, and debug managed code executed by the .NET CLR.",
        "id": "1623",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "COR_PROFILER",
        "techniqueid": "T1574.012"
    },
    {
        "description": "Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators.",
        "id": "1624",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Impair Defenses",
        "techniqueid": "T1562"
    },
    {
        "description": "Adversaries may disable security tools to avoid possible detection of their tools and activities. This can take the form of killing security software or event logging processes, deleting Registry keys so that tools do not start at run time, or other methods to interfere with security tools scanning or reporting information.",
        "id": "1625",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Disable or Modify Tools",
        "techniqueid": "T1562.001"
    },
    {
        "description": "Adversaries may disable Windows event logging to limit data that can be leveraged for detections and audits. Windows event logs record user and system activity such as login attempts, process creation, and much more. This data is used by security tools and analysts to generate detections.",
        "id": "1626",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Disable Windows Event Logging",
        "techniqueid": "T1562.002"
    },
    {
        "description": "Adversaries may disable or modify system firewalls in order to bypass controls limiting network usage. Changes could be disabling the entire mechanism as well as adding, deleting, or modifying particular rules. This can be done numerous ways depending on the operating system, including via command-line, editing Windows Registry keys, and Windows Control Panel.",
        "id": "1627",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Disable or Modify System Firewall",
        "techniqueid": "T1562.004"
    },
    {
        "description": "An adversary may attempt to block indicators or events typically captured by sensors from being gathered and analyzed. This could include maliciously redirecting or even disabling host-based sensors, such as Event Tracing for Windows (ETW), by tampering settings that control the collection and flow of event telemetry. These settings may be stored on the system in configuration files and/or in the Registry as well as being accessible via administrative utilities such as?PowerShell?or?Windows Management Instrumentation.",
        "id": "1628",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Indicator Blocking",
        "techniqueid": "T1562.006"
    },
    {
        "description": "Adversaries may disable or modify a firewall within a cloud environment to bypass controls that limit access to cloud resources. Cloud firewalls are separate from system firewalls that are described in?Disable or Modify System Firewall.",
        "id": "1629",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Disable or Modify Cloud Firewall",
        "techniqueid": "T1562.007"
    },
    {
        "description": "An adversary may disable cloud logging capabilities and integrations to limit what data is collected on their activities and avoid detection.",
        "id": "1630",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Disable Cloud Logs",
        "techniqueid": "T1562.008"
    },
    {
        "description": "Adversaries can take advantage of security vulnerabilities and inherent functionality in browser software to change content, modify behavior, and intercept information as part of various man in the browser techniques.",
        "id": "1631",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Man in the Browser",
        "techniqueid": "T1185"
    },
    {
        "description": "An adversary may attempt to modify a cloud account's compute service infrastructure to evade defenses. A modification to the compute service infrastructure can include the creation, deletion, or modification of one or more components such as compute instances, virtual machines, and snapshots.",
        "id": "1632",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Modify Cloud Compute Infrastructure",
        "techniqueid": "T1578"
    },
    {
        "description": "An adversary may create a new instance or virtual machine (VM) within the compute service of a cloud account to evade defenses. Creating a new instance may allow an adversary to bypass firewall rules and permissions that exist on instances currently residing within an account. An adversary may?Create Snapshot?of one or more volumes in an account, create a new instance, mount the snapshots, and then apply a less restrictive security policy to collect?Data from Local System?or for?Remote Data Staging.",
        "id": "1633",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Create Cloud Instance",
        "techniqueid": "T1578.002"
    },
    {
        "description": "An adversary may create a snapshot or data backup within a cloud account to evade defenses. A snapshot is a point-in-time copy of an existing cloud compute component such as a virtual machine (VM), virtual hard drive, or volume. An adversary may leverage permissions to create a snapshot in order to bypass restrictions that prevent access to existing compute service infrastructure, unlike in?Revert Cloud Instance?where an adversary may revert to a snapshot to evade detection and remove evidence of their presence.",
        "id": "1634",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Create Snapshot",
        "techniqueid": "T1578.001"
    },
    {
        "description": "An adversary may delete a cloud instance after they have performed malicious activities in an attempt to evade detection and remove evidence of their presence. Deleting an instance or virtual machine can remove valuable forensic artifacts and other evidence of suspicious behavior if the instance is not recoverable.",
        "id": "1635",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Delete Cloud Instance",
        "techniqueid": "T1578.003"
    },
    {
        "description": "Adversaries may take control of preexisting sessions with remote services to move laterally in an environment. Users may use valid credentials to log into a service specifically designed to accept remote connections, such as telnet, SSH, and RDP. When a user logs into a service, a session will be established that will allow them to maintain a continuous interaction with that service.",
        "id": "1636",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Remote Service Session Hijacking",
        "techniqueid": "T1563"
    },
    {
        "description": "Adversaries may hijack a legitimate user��s remote desktop session to move laterally within an environment. Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).",
        "id": "1637",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "RDP Hijacking",
        "techniqueid": "T1563.002"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into a service specifically designed to accept remote connections, such as telnet, SSH, and VNC. The adversary may then perform actions as the logged-on user.",
        "id": "1638",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Remote Services",
        "techniqueid": "T1021"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.",
        "id": "1639",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Remote Desktop Protocol",
        "techniqueid": "T1021.001"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into remote machines using Secure Shell (SSH). The adversary may then perform actions as the logged-on user.",
        "id": "1640",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "SSH",
        "techniqueid": "T1021.004"
    },
    {
        "description": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically requires being a member of an admin or otherwise privileged group on the remote system.",
        "id": "1641",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Scheduled Task/Job",
        "techniqueid": "T1053"
    },
    {
        "description": "Adversaries may abuse the?at.exe?utility to perform task scheduling for initial or recurring execution of malicious code. The?at?utility exists as an executable within Windows for scheduling tasks at a specified time and date. Using?at?requires that the Task Scheduler service be running, and the user to be logged on as a member of the local Administrators group.",
        "id": "1642",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "At (Windows)",
        "techniqueid": "T1053.002"
    },
    {
        "description": "Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The?schtasks?can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task.",
        "id": "1643",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Scheduled Task",
        "techniqueid": "T1053.005"
    },
    {
        "description": "Adversaries may abuse the?at?utility to perform task scheduling for initial or recurring execution of malicious code. The?at?command within Linux operating systems enables administrators to schedule tasks.",
        "id": "1644",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "At (Linux)",
        "techniqueid": "T1053.001"
    },
    {
        "description": "Adversaries may abuse the?Launchd?daemon to perform task scheduling for initial or recurring execution of malicious code. The?launchd?daemon, native to macOS, is responsible for loading and maintaining services within the operating system. This process loads the parameters for each launch-on-demand system-level daemon from the property list (plist) files found in?/System/Library/LaunchDaemons?and?/Library/LaunchDaemons?. These LaunchDaemons have property list files which point to the executables that will be launched .",
        "id": "1645",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Launchd",
        "techniqueid": "T1053.004"
    },
    {
        "description": "Adversaries may abuse the?cron?utility to perform task scheduling for initial or recurring execution of malicious code. The?cron?utility is a time-based job scheduler for Unix-like operating systems. The?crontab?file contains the schedule of cron entries to be run and the specified times for execution. Any?crontab?files are stored in operating system-specific file paths.",
        "id": "1646",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Cron",
        "techniqueid": "T1053.003"
    },
    {
        "description": "Adversaries may abuse systemd timers to perform task scheduling for initial or recurring execution of malicious code. Systemd timers are unit files with file extension?.timer?that control services. Timers can be set to run on a calendar event or after a time span relative to a starting point. They can be used as an alternative to?Cron?in Linux environments.",
        "id": "1647",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Systemd Timers",
        "techniqueid": "T1053.006"
    },
    {
        "description": "Adversaries may stop or disable services on a system to render those services unavailable to legitimate users. Stopping critical services can inhibit or stop response to an incident or aid in the adversary's overall objectives to cause damage to the environment.",
        "id": "1648",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Service Stop",
        "techniqueid": "T1489"
    },
    {
        "description": "Adversaries may gain access to and use third-party software suites installed within an enterprise network, such as administration, monitoring, and deployment systems, to move laterally through the network. Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, VNC, HBSS, Altiris, etc.).",
        "id": "1649",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Software Deployment Tools",
        "techniqueid": "T1072"
    },
    {
        "description": "Adversaries may abuse system services or daemons to execute commands or programs. Adversaries can execute malicious content by interacting with or creating services. Many services are set to run at boot, which can aid in achieving persistence (Create or Modify System Process), but adversaries can also abuse services for one-time or temporary execution.",
        "id": "1650",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "System Services",
        "techniqueid": "T1569"
    },
    {
        "description": "Adversaries may abuse launchctl to execute commands or programs. Launchctl controls the macOS launchd process, which handles things like?Launch Agents and?Launch Daemons, but can execute other commands or programs itself. Launchctl supports taking subcommands on the command-line, interactively, or even redirected from standard input.",
        "id": "1651",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Launchctl",
        "techniqueid": "T1569.001"
    },
    {
        "description": "Adversaries may exfiltrate data by transferring the data, including backups of cloud environments, to another cloud account they control on the same service to avoid typical file transfers/downloads and network-based exfiltration detection.",
        "id": "1652",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Transfer Data to Cloud Account",
        "techniqueid": "T1537"
    },
    {
        "description": "Adversaries may use alternate authentication material, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls.",
        "id": "1653",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Use Alternate Authentication Material",
        "techniqueid": "T1550"
    },
    {
        "description": "Adversaries may \"pass the hash\" using stolen password hashes to move laterally within an environment, bypassing normal system access controls. Pass the hash (PtH) is a method of authenticating as a user without having access to the user's cleartext password. This method bypasses standard authentication steps that require a cleartext password, moving directly into the portion of the authentication that uses the password hash. In this technique, valid password hashes for the account being used are captured using a Credential Access technique. Captured hashes are used with PtH to authenticate as that user. Once authenticated, PtH may be used to perform actions on local or remote systems.",
        "id": "1654",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Pass the Hash",
        "techniqueid": "T1550.002"
    },
    {
        "description": "Adversaries may \"pass the ticket\" using stolen Kerberos tickets to move laterally within an environment, bypassing normal system access controls. Pass the ticket (PtT) is a method of authenticating to a system using Kerberos tickets without having access to an account's password. Kerberos authentication can be used as the first step to lateral movement to a remote system.",
        "id": "1655",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Pass the Ticket",
        "techniqueid": "T1550.003"
    },
    {
        "description": "Adversaries may obtain and abuse credentials of a cloud account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. In some cases, cloud accounts may be federated with traditional identity management system, such as Window Active Directory.",
        "id": "1656",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Cloud Accounts",
        "techniqueid": "T1078.004"
    },
    {
        "description": "Adversaries may abuse Windows Management Instrumentation (WMI) to achieve execution. WMI is a Windows administration feature that provides a uniform environment for local and remote access to Windows system components. It relies on the WMI service for local and remote access and the server message block (SMB) and Remote Procedure Call Service (RPCS) for remote access. RPCS operates over port 135.",
        "id": "1657",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Windows Management Instrumentation",
        "techniqueid": "T1047"
    },
    {
        "description": "Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk. An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.",
        "id": "1658",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Abuse Elevation Control Mechanism",
        "techniqueid": "T1548"
    },
    {
        "description": "Adversaries may perform sudo caching and/or use the suoders file to elevate privileges. Adversaries may do this to execute commands as other users or spawn processes with higher privileges.",
        "id": "1659",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Sudo and Sudo Caching",
        "techniqueid": "T1548.003"
    },
    {
        "description": "Adversaries may modify the SSH?authorized_keys?file to maintain persistence on a victim host. Linux distributions and macOS commonly use key-based authentication to secure the authentication process of SSH sessions for remote management. The?authorized_keys?file in SSH specifies the SSH keys that can be used for logging into the user account for which the file is configured. This file is usually found in the user's home directory under?<user-home>/.ssh/authorized_keys. Users may edit the system��s SSH config file to modify the directives PubkeyAuthentication and RSAAuthentication to the value \"yes\" to ensure public key and RSA authentication are enabled. The SSH config file is usually located under?/etc/ssh/sshd_config.",
        "id": "1660",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "SSH Authorized Keys",
        "techniqueid": "T1098.004"
    },
    {
        "description": "Adversaries may abuse time providers to execute DLLs when the system boots. The Windows Time service (W32Time) enables time synchronization across and within domains. W32Time time providers are responsible for retrieving time stamps from hardware/network resources and outputting these values to other network clients.",
        "id": "1661",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Time Providers",
        "techniqueid": "T1547.003"
    },
    {
        "description": "Adversaries may modify plist files to run a program during system boot or user login. Property list (plist) files contain all of the information that macOS and OS X uses to configure applications and services. These files are UTF-8 encoded and formatted like XML documents via a series of keys surrounded by < >. They detail when programs should execute, file paths to the executables, program arguments, required OS permissions, and many others. plists are located in certain locations depending on their purpose such as?/Library/Preferences?(which execute with elevated privileges) and?~/Library/Preferences?(which execute with a user's privileges).",
        "id": "1662",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Plist Modification",
        "techniqueid": "T1547.011"
    },
    {
        "description": "Adversaries may use scripts automatically executed at boot or logon initialization to establish persistence. Initialization scripts can be used to perform administrative functions, which may often execute other programs or send information to an internal logging server. These scripts can vary based on operating system and whether applied locally or remotely.",
        "id": "1663",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Boot or Logon Initialization Scripts",
        "techniqueid": "T1037"
    },
    {
        "description": "Adversaries may use macOS logon scripts automatically executed at logon initialization to establish persistence. macOS allows logon scripts (known as login hooks) to be executed whenever a specific user logs into a system. A login hook tells Mac OS X to execute a certain script when a user logs in, but unlike?Startup Items, a login hook executes as the elevated root user.",
        "id": "1664",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Logon Script (Mac)",
        "techniqueid": "T1037.002"
    },
    {
        "description": "Adversaries may use network logon scripts automatically executed at logon initialization to establish persistence. Network logon scripts can be assigned using Active Directory or Group Policy Objects. These logon scripts run with the privileges of the user they are assigned to. Depending on the systems within the network, initializing one of these scripts could apply to more than one or potentially all systems.",
        "id": "1665",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Network Logon Script",
        "techniqueid": "T1037.003"
    },
    {
        "description": "Adversaries may use startup items automatically executed at boot initialization to establish persistence. Startup items execute during the final phase of the boot process and contain shell scripts or other executable files along with configuration information used by the system to determine the execution order for all startup items.",
        "id": "1666",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Startup Items",
        "techniqueid": "T1037.005"
    },
    {
        "description": "Adversaries may use rc.common automatically executed at boot initialization to establish persistence. During the boot process, macOS executes?source /etc/rc.common, which is a shell script containing various utility functions. This file also defines routines for processing command-line arguments and for gathering system settings and is thus recommended to include in the start of Startup Item Scripts . In macOS and OS X, this is now a deprecated mechanism in favor of?Launch Agent?and?Launch Daemon?but is currently still used.",
        "id": "1667",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Rc.common",
        "techniqueid": "T1037.004"
    },
    {
        "description": "Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services. On macOS, launchd processes known as?Launch Daemon?and?Launch Agent?are run to finish system initialization and load user specific parameters.",
        "id": "1668",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Create or Modify System Process",
        "techniqueid": "T1543"
    },
    {
        "description": "Adversaries may create or modify systemd services to repeatedly execute malicious payloads as part of persistence. The systemd service manager is commonly used for managing background daemon processes (also known as services) and other system resources. Systemd is the default initialization (init) system on many Linux distributions starting with Debian 8, Ubuntu 15.04, CentOS 7, RHEL 7, Fedora 15, and replaces legacy init systems including SysVinit and Upstart while remaining backwards compatible with the aforementioned init systems.",
        "id": "1669",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Systemd Service",
        "techniqueid": "T1543.002"
    },
    {
        "description": "Adversaries may access data objects from improperly secured cloud storage.",
        "id": "1670",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Data from Cloud Storage Object",
        "techniqueid": "T1530"
    },
    {
        "description": "Adversaries may insert, delete, or manipulate data in order to manipulate external outcomes or hide activity. By manipulating data, adversaries may attempt to affect a business process, organizational understanding, or decision making.",
        "id": "1671",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Data Manipulation",
        "techniqueid": "T1565"
    },
    {
        "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity. By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making.",
        "id": "1672",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Stored Data Manipulation",
        "techniqueid": "T1565.001"
    },
    {
        "description": "Adversaries may modify systems in order to manipulate the data as it is accessed and displayed to an end user. By manipulating runtime data, adversaries may attempt to affect a business process, organizational understanding, and decision making.",
        "id": "1673",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Runtime Data Manipulation",
        "techniqueid": "T1565.003"
    },
    {
        "description": "Adversaries may establish persistence by executing malicious content triggered by a user��s shell.?~/.bash_profile?and?~/.bashrc?are shell scripts that contain shell commands. These files are executed in a user's context when a new shell opens or when a user logs in so that their environment is set correctly.",
        "id": "1674",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": ".bash_profile and .bashrc",
        "techniqueid": "T1546.004"
    },
    {
        "description": "Adversaries may gain persistence and elevate privileges by executing malicious content triggered by PowerShell profiles. A PowerShell profile (profile.ps1) is a script that runs when?PowerShell?starts and can be used as a logon script to customize user environments.",
        "id": "1675",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "PowerShell Profile",
        "techniqueid": "T1546.013"
    },
    {
        "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).",
        "id": "1676",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "File and Directory Permissions Modification",
        "techniqueid": "T1222"
    },
    {
        "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).",
        "id": "1677",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Windows File and Directory Permissions Modification",
        "techniqueid": "T1222.001"
    },
    {
        "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).",
        "id": "1678",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Linux and Mac File and Directory Permissions Modification",
        "techniqueid": "T1222.002"
    },
    {
        "description": "Adversaries may use NTFS file attributes to hide their malicious data in order to evade detection. Every New Technology File System (NTFS) formatted partition contains a Master File Table (MFT) that maintains a record for every file/directory on the partition. Within MFT entries are file attributes, such as Extended Attributes (EA) and Data [known as Alternate Data Streams (ADSs) when more than one Data attribute is present], that can be used to store arbitrary data (and even complete files).",
        "id": "1679",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "NTFS File Attributes",
        "techniqueid": "T1564.004"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.",
        "id": "1680",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Hijack Execution Flow",
        "techniqueid": "T1574"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking vulnerable file path references. Adversaries can take advantage of paths that lack surrounding quotations by placing an executable in a higher level directory within the path, so that Windows will choose the adversary's executable to launch.",
        "id": "1681",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Path Interception by Unquoted Path",
        "techniqueid": "T1574.009"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking environment variables used to load libraries. Adversaries may place a program in an earlier entry in the list of directories stored in the PATH environment variable, which Windows will then execute when it searches sequentially through that PATH listing in search of the binary that was called from a script or the command line.",
        "id": "1682",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Path Interception by PATH Environment Variable",
        "techniqueid": "T1574.007"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the search order used to load other programs. Because some programs do not call other programs using the full path, adversaries may place their own file in the directory where the calling program is located, causing the operating system to launch their malicious software at the request of the calling program.",
        "id": "1683",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Path Interception by Search Order Hijacking",
        "techniqueid": "T1574.008"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the library manifest used to load DLLs. Adversaries may take advantage of vague references in the library manifest of a program by replacing a legitimate library with a malicious one, causing the operating system to load their malicious library when it is called for by the victim program.",
        "id": "1684",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "DLL Side-Loading",
        "techniqueid": "T1574.002"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking ambiguous paths used to load libraries. Adversaries may plant trojan dynamic libraries, in a directory that will be searched by the operating system before the legitimate library specified by the victim program, so that their malicious library will be loaded into the victim program instead. MacOS and OS X use a common method to look for required dynamic libraries (dylib) to load into a program based on search paths.",
        "id": "1685",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Dylib Hijacking",
        "techniqueid": "T1574.004"
    },
    {
        "description": "Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators.",
        "id": "1686",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Impair Defenses",
        "techniqueid": "T1562"
    },
    {
        "description": "Adversaries may disable security tools to avoid possible detection of their tools and activities. This can take the form of killing security software or event logging processes, deleting Registry keys so that tools do not start at run time, or other methods to interfere with security tools scanning or reporting information.",
        "id": "1687",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Disable or Modify Tools",
        "techniqueid": "T1562.001"
    },
    {
        "description": "Adversaries may disable Windows event logging to limit data that can be leveraged for detections and audits. Windows event logs record user and system activity such as login attempts, process creation, and much more. This data is used by security tools and analysts to generate detections.",
        "id": "1688",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Disable Windows Event Logging",
        "techniqueid": "T1562.002"
    },
    {
        "description": "Adversaries may disable or modify system firewalls in order to bypass controls limiting network usage. Changes could be disabling the entire mechanism as well as adding, deleting, or modifying particular rules. This can be done numerous ways depending on the operating system, including via command-line, editing Windows Registry keys, and Windows Control Panel.",
        "id": "1689",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Disable or Modify System Firewall",
        "techniqueid": "T1562.004"
    },
    {
        "description": "An adversary may attempt to block indicators or events typically captured by sensors from being gathered and analyzed. This could include maliciously redirecting or even disabling host-based sensors, such as Event Tracing for Windows (ETW), by tampering settings that control the collection and flow of event telemetry. These settings may be stored on the system in configuration files and/or in the Registry as well as being accessible via administrative utilities such as?PowerShell?or?Windows Management Instrumentation.",
        "id": "1690",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Indicator Blocking",
        "techniqueid": "T1562.006"
    },
    {
        "description": "Adversaries may delete or alter generated artifacts on a host system, including logs or captured files such as quarantined malware. Locations and format of logs are platform or product-specific, however standard operating system logs are captured as Windows events or Linux/macOS files such as?Bash History?and /var/log/*.",
        "id": "1691",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Indicator Removal on Host",
        "techniqueid": "T1070"
    },
    {
        "description": "Adversaries may clear Windows Event Logs to hide the activity of an intrusion. Windows Event Logs are a record of a computer's alerts and notifications. There are three system-defined sources of events: System, Application, and Security, with five event types: Error, Warning, Information, Success Audit, and Failure Audit.",
        "id": "1692",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Clear Windows Event Logs",
        "techniqueid": "T1070.001"
    },
    {
        "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the?/var/log/?directory. Subfolders in this directory categorize logs by their related functions, such as:",
        "id": "1693",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Clear Linux or Mac System Logs",
        "techniqueid": "T1070.002"
    },
    {
        "description": "In addition to clearing system logs, an adversary may clear the command history of a compromised account to conceal the actions undertaken during an intrusion. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done.",
        "id": "1694",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Clear Command History",
        "techniqueid": "T1070.003"
    },
    {
        "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.",
        "id": "1695",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Masquerading",
        "techniqueid": "T1036"
    },
    {
        "description": "Adversaries may rename legitimate system utilities to try to evade security mechanisms concerning the usage of those utilities. Security monitoring and control mechanisms may be in place for system utilities adversaries are capable of abusing. It may be possible to bypass those security mechanisms by renaming the utility prior to utilization (ex: rename?rundll32.exe). An alternative case occurs when a legitimate utility is copied or moved to a different directory and renamed to avoid detections based on system utilities executing from non-standard paths.",
        "id": "1696",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Rename System Utilities",
        "techniqueid": "T1036.003"
    },
    {
        "description": "Adversaries may match or approximate the name or location of legitimate files when naming/placing their files. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). Alternatively, the filename given may be a close approximation of legitimate programs or something innocuous.",
        "id": "1697",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Match Legitimate Name or Location",
        "techniqueid": "T1036.005"
    },
    {
        "description": "Adversaries may inject malicious code into processes via the /proc filesystem in order to evade process-based defenses as well as possibly elevate privileges. Proc memory injection is a method of executing arbitrary code in the address space of a separate live process.",
        "id": "1698",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Proc Memory",
        "techniqueid": "T1055.009"
    },
    {
        "description": "Adversaries may hijack a legitimate user's SSH session to move laterally within an environment. Secure Shell (SSH) is a standard means of remote access on Linux and macOS systems. It allows a user to connect to another system via an encrypted tunnel, commonly authenticating through a password, certificate or the use of an asymmetric encryption key pair.",
        "id": "1699",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "SSH Hijacking",
        "techniqueid": "T1563.001"
    },
    {
        "description": "Adversaries may abuse systemd timers to perform task scheduling for initial or recurring execution of malicious code. Systemd timers are unit files with file extension?.timer?that control services. Timers can be set to run on a calendar event or after a time span relative to a starting point. They can be used as an alternative to?Cron?in Linux environments.",
        "id": "1700",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Systemd Timers",
        "techniqueid": "T1053.006"
    },
    {
        "description": "Adversaries may stop or disable services on a system to render those services unavailable to legitimate users. Stopping critical services can inhibit or stop response to an incident or aid in the adversary's overall objectives to cause damage to the environment.",
        "id": "1701",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Service Stop",
        "techniqueid": "T1489"
    },
    {
        "description": "Adversaries may abuse control.exe to proxy execution of malicious payloads. The Windows Control Panel process binary (control.exe) handles execution of Control Panel items, which are utilities that allow users to view and adjust computer settings.",
        "id": "1702",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Control Panel",
        "techniqueid": "T1218.002"
    },
    {
        "description": "Adversaries may tamper with SIP and trust provider components to mislead the operating system and application control tools when conducting signature validation checks. In user mode, Windows Authenticode digital signatures are used to verify a file's origin and integrity, variables that may be used to establish trust in signed code (ex: a driver with a valid Microsoft signature may be handled as safe). The signature validation process is handled via the WinVerifyTrust application programming interface (API) function, which accepts an inquiry and coordinates with the appropriate trust provider, which is responsible for validating parameters of a signature.",
        "id": "1703",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "SIP and Trust Provider Hijacking",
        "techniqueid": "T1553.003"
    },
    {
        "description": "Adversaries may abuse system services or daemons to execute commands or programs. Adversaries can execute malicious content by interacting with or creating services. Many services are set to run at boot, which can aid in achieving persistence (Create or Modify System Process), but adversaries can also abuse services for one-time or temporary execution.",
        "id": "1704",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "System Services",
        "techniqueid": "T1569"
    },
    {
        "description": "Adversaries may abuse the Windows service control manager to execute malicious commands or payloads. The Windows service control manager (services.exe) is an interface to manage and manipulate services. The service control manager is accessible to users via GUI components as well as system utilities such as?sc.exe?and?Net.",
        "id": "1705",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Service Execution",
        "techniqueid": "T1569.002"
    },
    {
        "description": "Adversaries may deliver payloads to remote systems by adding content to shared storage locations, such as network drives or internal code repositories. Content stored on network drives or in other shared locations may be tainted by adding malicious programs, scripts, or exploit code to otherwise valid files. Once a user opens the shared tainted content, the malicious portion can be executed to run the adversary's code on a remote system. Adversaries may use tainted shared content to move laterally.",
        "id": "1706",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Taint Shared Content",
        "techniqueid": "T1080"
    },
    {
        "description": "Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g.?Bash History), operating system or application-specific repositories (e.g.?Credentials in Registry), or other specialized files/artifacts (e.g.?Private Keys).",
        "id": "1707",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Unsecured Credentials",
        "techniqueid": "T1552"
    },
    {
        "description": "Adversaries may search local file systems and remote file shares for files containing insecurely stored credentials. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.",
        "id": "1708",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Credentials In Files",
        "techniqueid": "T1552.001"
    },
    {
        "description": "Adversaries may search for private key certificate files on compromised systems for insecurely stored credentials. Private cryptographic keys and certificates are used for authentication, encryption/decryption, and digital signatures. Common key and certificate file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, .pfx, .cer, .p7b, .asc.",
        "id": "1709",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Private Keys",
        "techniqueid": "T1552.004"
    },
    {
        "description": "Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk. An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.",
        "id": "1710",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Abuse Elevation Control Mechanism",
        "techniqueid": "T1548"
    },
    {
        "description": "Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.",
        "id": "1711",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Bypass User Account Control",
        "techniqueid": "T1548.002"
    },
    {
        "description": "Adversaries may perform sudo caching and/or use the suoders file to elevate privileges. Adversaries may do this to execute commands as other users or spawn processes with higher privileges.",
        "id": "1712",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Sudo and Sudo Caching",
        "techniqueid": "T1548.003"
    },
    {
        "description": "Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.",
        "id": "1713",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Access Token Manipulation",
        "techniqueid": "T1134"
    },
    {
        "description": "Adversaries may duplicate then impersonate another user's token to escalate privileges and bypass access controls. An adversary can create a new access token that duplicates an existing token using?DuplicateToken(Ex). The token can then be used with?ImpersonateLoggedOnUser?to allow the calling thread to impersonate a logged on user's security context, or with?SetThreadToken?to assign the impersonated token to a thread.",
        "id": "1714",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Token Impersonation/Theft",
        "techniqueid": "T1134.001"
    },
    {
        "description": "Adversaries may create a new process with a duplicated token to escalate privileges and bypass access controls. An adversary can duplicate a desired access token with?DuplicateToken(Ex)?and use it with?CreateProcessWithTokenW?to create a new process running under the security context of the impersonated user. This is useful for creating a new process under the security context of a different user.",
        "id": "1715",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Create Process with Token",
        "techniqueid": "T1134.002"
    },
    {
        "description": "Adversaries may make and impersonate tokens to escalate privileges and bypass access controls. If an adversary has a username and password but the user is not logged onto the system, the adversary can then create a logon session for the user using the?LogonUser?function. The function will return a copy of the new session's access token and the adversary can use?SetThreadToken?to assign the token to a thread.",
        "id": "1716",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Make and Impersonate Token",
        "techniqueid": "T1134.003"
    },
    {
        "description": "Adversaries may manipulate accounts to maintain access to victim systems. Account manipulation may consist of any action that preserves adversary access to a compromised account, such as modifying credentials or permission groups. These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials. In order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain.",
        "id": "1717",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Account Manipulation",
        "techniqueid": "T1098"
    },
    {
        "description": "Adversaries may grant additional permission levels, such as ReadPermission or FullAccess, to maintain persistent access to an adversary-controlled email account. The?Add-MailboxPermission?PowerShell?cmdlet, available in on-premises Exchange and in the cloud-based service Office 365, adds permissions to a mailbox.",
        "id": "1718",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Exchange Email Delegate Permissions",
        "techniqueid": "T1098.002"
    },
    {
        "description": "An adversary may add the Global Administrator role to an adversary-controlled account to maintain persistent access to an Office 365 tenant. With sufficient permissions, a compromised account can gain almost unlimited access to data and settings (including the ability to reset the passwords of other admins) via the global admin role.",
        "id": "1719",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Add Office 365 Global Administrator Role",
        "techniqueid": "T1098.003"
    },
    {
        "description": "Adversaries may add adversary-controlled credentials to a cloud account to maintain persistent access to victim accounts and instances within the environment.",
        "id": "1720",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Additional Cloud Credentials",
        "techniqueid": "T1098.001"
    },
    {
        "description": "Adversaries may modify the kernel to automatically execute programs on system boot. Loadable Kernel Modules (LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. ?",
        "id": "1721",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Kernel Modules and Extensions",
        "techniqueid": "T1547.006"
    },
    {
        "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of?Unix Shell?while Windows installations include the?Windows Command Shell?and?PowerShell.",
        "id": "1722",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Command and Scripting Interpreter",
        "techniqueid": "T1059"
    },
    {
        "description": "Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the?Start-Process?cmdlet which can be used to run an executable and the?Invoke-Command?cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).",
        "id": "1723",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "PowerShell",
        "techniqueid": "T1059.001"
    },
    {
        "description": "Adversaries may abuse scripting or built-in command line interpreters (CLI) on network devices to execute malicious command and payloads. The CLI is the primary means through which users and administrators interact with the device in order to view system information, modify device operations, or perform diagnostic and administrative functions. CLIs typically contain various permission levels required for different commands.",
        "id": "1724",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Network Device CLI",
        "techniqueid": "T1059.008"
    },
    {
        "description": "Adversaries may create an account to maintain access to victim systems. With a sufficient level of access, creating such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.",
        "id": "1725",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Create Account",
        "techniqueid": "T1136"
    },
    {
        "description": "Adversaries may create a local account to maintain access to victim systems. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service. With a sufficient level of access, the?net user /add?command can be used to create a local account.",
        "id": "1726",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Local Account",
        "techniqueid": "T1136.001"
    },
    {
        "description": "Adversaries may create a domain account to maintain access to victim systems. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover user, administrator, and service accounts. With a sufficient level of access, the?net user /add /domain?command can be used to create a domain account.",
        "id": "1727",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Domain Account",
        "techniqueid": "T1136.002"
    },
    {
        "description": "Adversaries may create a cloud account to maintain access to victim systems. With a sufficient level of access, such accounts may be used to establish secondary credentialed access that does not require persistent remote access tools to be deployed on the system.",
        "id": "1728",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Cloud Account",
        "techniqueid": "T1136.003"
    },
    {
        "description": "Adversaries may create or modify systemd services to repeatedly execute malicious payloads as part of persistence. The systemd service manager is commonly used for managing background daemon processes (also known as services) and other system resources. Systemd is the default initialization (init) system on many Linux distributions starting with Debian 8, Ubuntu 15.04, CentOS 7, RHEL 7, Fedora 15, and replaces legacy init systems including SysVinit and Upstart while remaining backwards compatible with the aforementioned init systems.",
        "id": "1729",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Systemd Service",
        "techniqueid": "T1543.002"
    },
    {
        "description": "Adversaries may modify the configuration settings of a domain to evade defenses and/or escalate privileges in domain environments. Domains provide a centralized means of managing how computer resources (ex: computers, user accounts) can act, and interact with each other, on a network. The policy of the domain also includes configuration settings that may apply between domains in a multi-domain/forest environment. Modifications to domain settings may include altering domain Group Policy Objects (GPOs) or changing trust settings for domains, including federation trusts.",
        "id": "1730",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Domain Policy Modification",
        "techniqueid": "T1484"
    },
    {
        "description": "Adversaries may add new domain trusts or modify the properties of existing domain trusts to evade defenses and/or elevate privileges. Domain trust details, such as whether or not a domain is federated, allow authentication and authorization properties to apply between domains for the purpose of accessing shared resources. These trust objects may include accounts, credentials, and other authentication material applied to servers, tokens, and domains.",
        "id": "1731",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Domain Trust Modification",
        "techniqueid": "T1484.002"
    },
    {
        "description": "Adversaries may attempt to take advantage of a weakness in an Internet-facing computer or program using software, data, or commands in order to cause unintended or unanticipated behavior. The weakness in the system can be a bug, a glitch, or a design vulnerability. These applications are often websites, but can include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other applications with Internet accessible open sockets, such as web servers and related services. Depending on the flaw being exploited this may include?Exploitation for Defense Evasion.",
        "id": "1732",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Exploit Public-Facing Application",
        "techniqueid": "T1190"
    },
    {
        "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.?A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.",
        "id": "1733",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Exploitation of Remote Services",
        "techniqueid": "T1210"
    },
    {
        "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).",
        "id": "1734",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "File and Directory Permissions Modification",
        "techniqueid": "T1222"
    },
    {
        "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).",
        "id": "1735",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Windows File and Directory Permissions Modification",
        "techniqueid": "T1222.001"
    },
    {
        "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).",
        "id": "1736",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Linux and Mac File and Directory Permissions Modification",
        "techniqueid": "T1222.002"
    },
    {
        "description": "Adversaries may forge credential materials that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies, tokens, or other materials to authenticate and authorize user access.",
        "id": "1737",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Forge Web Credentials",
        "techniqueid": "T1606"
    },
    {
        "description": "An adversary may forge SAML tokens with any permissions claims and lifetimes if they possess a valid SAML token-signing certificate. The default lifetime of a SAML token is one hour, but the validity period can be specified in the?NotOnOrAfter?value of the?conditions ...?element in a token. This value can be changed using the?AccessTokenLifetime?in a?LifetimeTokenPolicy. Forged SAML tokens enable adversaries to authenticate across services that use SAML 2.0 as an SSO (single sign-on) mechanism.",
        "id": "1738",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "SAML Tokens",
        "techniqueid": "T1606.002"
    },
    {
        "description": "Adversaries may implant cloud container images with malicious code to establish persistence. Amazon Web Service (AWS) Amazon Machine Images (AMI), Google Cloud Platform (GCP) Images, and Azure Images as well as popular container runtimes such as Docker can be implanted or backdoored. Depending on how the infrastructure is provisioned, this could provide persistent access if the infrastructure provisioning tool is instructed to always use the latest image.",
        "id": "1739",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Implant Container Image",
        "techniqueid": "T1525"
    },
    {
        "description": "Adversaries may install code on externally facing portals, such as a VPN login page, to capture and transmit credentials of users who attempt to log into the service. For example, a compromised login page may log provided user credentials before logging the user in to the service.",
        "id": "1740",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Web Portal Capture",
        "techniqueid": "T1056.003"
    },
    {
        "description": "Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows or pluggable authentication modules (PAM) on Unix-based systems, responsible for gathering, storing, and validating credentials.",
        "id": "1741",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Modify Authentication Process",
        "techniqueid": "T1556"
    },
    {
        "description": "Adversaries may patch the authentication process on a domain controller to bypass the typical authentication mechanisms and enable access to accounts.",
        "id": "1742",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Domain Controller Authentication",
        "techniqueid": "T1556.001"
    },
    {
        "description": "Adversaries may modify pluggable authentication modules (PAM) to access user credentials or enable otherwise unwarranted access to accounts. PAM is a modular system of configuration files, libraries, and executable files which guide authentication for many services. The most common authentication module is?pam_unix.so, which retrieves, sets, and verifies account authentication information in?/etc/passwd?and?/etc/shadow.",
        "id": "1743",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Pluggable Authentication Modules",
        "techniqueid": "T1556.003"
    },
    {
        "description": "Adversaries may use?Patch System Image?to hard code a password in the operating system, thus bypassing of native authentication mechanisms for local accounts on network devices.",
        "id": "1744",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Network Device Authentication",
        "techniqueid": "T1556.004"
    },
    {
        "description": "Adversaries may make changes to the operating system of embedded network devices to weaken defenses and provide new capabilities for themselves. On such devices, the operating systems are typically monolithic and most of the device functionality and capabilities are contained within a single file.",
        "id": "1745",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Modify System Image",
        "techniqueid": "T1601"
    },
    {
        "description": "Adversaries may modify the operating system of a network device to introduce new capabilities or weaken existing defenses. Some network devices are built with a monolithic architecture, where the entire operating system and most of the functionality of the device is contained within a single file. Adversaries may change this file in storage, to be loaded in a future boot, or in memory during runtime.",
        "id": "1746",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Patch System Image",
        "techniqueid": "T1601.001"
    },
    {
        "description": "Adversaries may install an older version of the operating system of a network device to weaken security. Older operating system versions on network devices often have weaker encryption ciphers and, in general, fewer/less updated defensive features.",
        "id": "1747",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Downgrade System Image",
        "techniqueid": "T1601.002"
    },
    {
        "description": "Adversaries may bridge network boundaries by compromising perimeter network devices. Breaching these devices may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.",
        "id": "1748",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Network Boundary Bridging",
        "techniqueid": "T1599"
    },
    {
        "description": "Adversaries may bridge network boundaries by modifying a network device��s Network Address Translation (NAT) configuration. Malicious modifications to NAT may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.",
        "id": "1749",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Network Address Translation Traversal",
        "techniqueid": "T1599.001"
    },
    {
        "description": "Adversaries may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password, from the operating system and software. Credentials can then be used to perform?Lateral Movement?and access restricted information.",
        "id": "1750",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "OS Credential Dumping",
        "techniqueid": "T1003"
    },
    {
        "description": "Adversaries may attempt to access credentials and other sensitive information by abusing a Windows Domain Controller's application programming interface (API) to simulate the replication process from a remote domain controller using a technique called DCSync.",
        "id": "1751",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "DCSync",
        "techniqueid": "T1003.006"
    },
    {
        "description": "Adversaries may attempt to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS). After a user logs on, the system generates and stores a variety of credential materials in LSASS process memory. These credential materials can be harvested by an administrative user or SYSTEM and used to conduct?Lateral Movement?using?Use Alternate Authentication Material.",
        "id": "1752",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "LSASS Memory",
        "techniqueid": "T1003.001"
    },
    {
        "description": "Adversaries may attempt to extract credential material from the Security Account Manager (SAM) database either through in-memory techniques or through the Windows Registry where the SAM database is stored. The SAM is a database file that contains local accounts for the host, typically those found with the?net user?command. Enumerating the SAM database requires SYSTEM level access.",
        "id": "1753",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Security Account Manager",
        "techniqueid": "T1003.002"
    },
    {
        "description": "Adversaries may gather credentials from information stored in the Proc filesystem or?/proc. The Proc filesystem on Linux contains a great deal of information regarding the state of the running operating system. Processes running with root privileges can use this facility to scrape live memory of other running programs. If any of these programs store passwords in clear text or password hashes in memory, these values can then be harvested for either usage or brute force attacks, respectively.",
        "id": "1754",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Proc Filesystem",
        "techniqueid": "T1003.007"
    },
    {
        "description": "Adversaries may attempt to dump the contents of?/etc/passwd?and?/etc/shadow?to enable offline password cracking. Most modern Linux operating systems use a combination of?/etc/passwd?and?/etc/shadow?to store user account information including password hashes in?/etc/shadow. By default,?/etc/shadow?is only readable by the root user.",
        "id": "1755",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "/etc/passwd and /etc/shadow",
        "techniqueid": "T1003.008"
    },
    {
        "description": "Adversaries may attempt to access cached domain credentials used to allow authentication to occur in the event a domain controller is unavailable.",
        "id": "1756",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Cached Domain Credentials",
        "techniqueid": "T1003.005"
    },
    {
        "description": "Adversaries with SYSTEM access to a host may attempt to access Local Security Authority (LSA) secrets, which can contain a variety of different credential materials, such as credentials for service accounts. LSA secrets are stored in the registry at?HKEY_LOCAL_MACHINE\\SECURITY\\Policy\\Secrets. LSA secrets can also be dumped from memory.",
        "id": "1757",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "LSA Secrets",
        "techniqueid": "T1003.004"
    },
    {
        "description": "Adversaries may attempt to access or create a copy of the Active Directory domain database in order to steal credential information, as well as obtain other information about domain members such as devices, users, and access rights. By default, the NTDS file (NTDS.dit) is located in?%SystemRoot%\\NTDS\\Ntds.dit?of a domain controller.",
        "id": "1758",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "NTDS",
        "techniqueid": "T1003.003"
    },
    {
        "description": "Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control.",
        "id": "1759",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Pre-OS Boot",
        "techniqueid": "T1542"
    },
    {
        "description": "Adversaries may modify system firmware to persist on systems.The BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer.",
        "id": "1760",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "System Firmware",
        "techniqueid": "T1542.001"
    },
    {
        "description": "Adversaries may use bootkits to persist on systems. Bootkits reside at a layer below the operating system and may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.",
        "id": "1761",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Bootkit",
        "techniqueid": "T1542.003"
    },
    {
        "description": "Adversaries may abuse netbooting to load an unauthorized network device operating system from a Trivial File Transfer Protocol (TFTP) server. TFTP boot (netbooting) is commonly used by network administrators to load configuration-controlled network device images from a centralized management server. Netbooting is one option in the boot sequence and can be used to centralize, manage, and control device images.",
        "id": "1762",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "TFTP Boot",
        "techniqueid": "T1542.005"
    },
    {
        "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process.",
        "id": "1763",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Process Injection",
        "techniqueid": "T1055"
    },
    {
        "description": "Adversaries may inject malicious code into processes via ptrace (process trace) system calls in order to evade process-based defenses as well as possibly elevate privileges. Ptrace system call injection is a method of executing arbitrary code in the address space of a separate live process.",
        "id": "1764",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Ptrace System Calls",
        "techniqueid": "T1055.008"
    },
    {
        "description": "Adversaries may take control of preexisting sessions with remote services to move laterally in an environment. Users may use valid credentials to log into a service specifically designed to accept remote connections, such as telnet, SSH, and RDP. When a user logs into a service, a session will be established that will allow them to maintain a continuous interaction with that service.",
        "id": "1765",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Remote Service Session Hijacking",
        "techniqueid": "T1563"
    },
    {
        "description": "Adversaries may hijack a legitimate user's SSH session to move laterally within an environment. Secure Shell (SSH) is a standard means of remote access on Linux and macOS systems. It allows a user to connect to another system via an encrypted tunnel, commonly authenticating through a password, certificate or the use of an asymmetric encryption key pair.",
        "id": "1766",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "SSH Hijacking",
        "techniqueid": "T1563.001"
    },
    {
        "description": "Adversaries may hijack a legitimate user��s remote desktop session to move laterally within an environment. Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).",
        "id": "1767",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "RDP Hijacking",
        "techniqueid": "T1563.002"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.",
        "id": "1768",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Remote Desktop Protocol",
        "techniqueid": "T1021.001"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user.",
        "id": "1769",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "SMB/Windows Admin Shares",
        "techniqueid": "T1021.002"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to interact with remote systems using Windows Remote Management (WinRM). The adversary may then perform actions as the logged-on user.",
        "id": "1770",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Windows Remote Management",
        "techniqueid": "T1021.006"
    },
    {
        "description": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically requires being a member of an admin or otherwise privileged group on the remote system.",
        "id": "1771",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Scheduled Task/Job",
        "techniqueid": "T1053"
    },
    {
        "description": "Adversaries may abuse the?at.exe?utility to perform task scheduling for initial or recurring execution of malicious code. The?at?utility exists as an executable within Windows for scheduling tasks at a specified time and date. Using?at?requires that the Task Scheduler service be running, and the user to be logged on as a member of the local Administrators group.",
        "id": "1772",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "At (Windows)",
        "techniqueid": "T1053.002"
    },
    {
        "description": "Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The?schtasks?can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task.",
        "id": "1773",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Scheduled Task",
        "techniqueid": "T1053.005"
    },
    {
        "description": "Adversaries may abuse systemd timers to perform task scheduling for initial or recurring execution of malicious code. Systemd timers are unit files with file extension?.timer?that control services. Timers can be set to run on a calendar event or after a time span relative to a starting point. They can be used as an alternative to?Cron?in Linux environments.",
        "id": "1774",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Systemd Timers",
        "techniqueid": "T1053.006"
    },
    {
        "description": "Adversaries may abuse legitimate extensible development features of servers to establish persistent access to systems. Enterprise server applications may include features that allow developers to write and install software or scripts to extend the functionality of the main application. Adversaries may install malicious components to extend and abuse server applications.",
        "id": "1775",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Server Software Component",
        "techniqueid": "T1505"
    },
    {
        "description": "Adversaries may abuse Microsoft transport agents to establish persistent access to systems. Microsoft Exchange transport agents can operate on email messages passing through the transport pipeline to perform various tasks such as filtering spam, filtering malicious attachments, journaling, or adding a corporate signature to the end of all outgoing emails. Transport agents can be written by application developers and then compiled to .NET assemblies that are subsequently registered with the Exchange server. Transport agents will be invoked during a specified stage of email processing and carry out developer defined tasks.",
        "id": "1776",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Transport Agent",
        "techniqueid": "T1505.002"
    },
    {
        "description": "Adversaries may abuse SQL stored procedures to establish persistent access to systems. SQL Stored Procedures are code that can be saved and reused so that database users do not waste time rewriting frequently used SQL queries. Stored procedures can be invoked via SQL statements to the database using the procedure name or via defined events (e.g. when a SQL server application is started/restarted).",
        "id": "1777",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "SQL Stored Procedures",
        "techniqueid": "T1505.001"
    },
    {
        "description": "Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed binaries. Binaries signed with trusted digital certificates can execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files.",
        "id": "1778",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Signed Binary Proxy Execution",
        "techniqueid": "T1218"
    },
    {
        "description": "Adversaries may abuse msiexec.exe to proxy execution of malicious payloads. Msiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi). Msiexec.exe is digitally signed by Microsoft.",
        "id": "1779",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Msiexec",
        "techniqueid": "T1218.007"
    },
    {
        "description": "Adversaries may gain access to and use third-party software suites installed within an enterprise network, such as administration, monitoring, and deployment systems, to move laterally through the network. Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, VNC, HBSS, Altiris, etc.).",
        "id": "1780",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Software Deployment Tools",
        "techniqueid": "T1072"
    },
    {
        "description": "Adversaries may attempt to subvert Kerberos authentication by stealing or forging Kerberos tickets to enable?Pass the Ticket.",
        "id": "1781",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Steal or Forge Kerberos Tickets",
        "techniqueid": "T1558"
    },
    {
        "description": "Adversaries who have the KRBTGT account password hash may forge Kerberos ticket-granting tickets (TGT), also known as a golden ticket. Golden tickets enable adversaries to generate authentication material for any account in Active Directory.",
        "id": "1782",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Golden Ticket",
        "techniqueid": "T1558.001"
    },
    {
        "description": "Adversaries may abuse system services or daemons to execute commands or programs. Adversaries can execute malicious content by interacting with or creating services. Many services are set to run at boot, which can aid in achieving persistence (Create or Modify System Process), but adversaries can also abuse services for one-time or temporary execution.",
        "id": "1783",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "System Services",
        "techniqueid": "T1569"
    },
    {
        "description": "Adversaries may abuse the Windows service control manager to execute malicious commands or payloads. The Windows service control manager (services.exe) is an interface to manage and manipulate services. The service control manager is accessible to users via GUI components as well as system utilities such as?sc.exe?and?Net.",
        "id": "1784",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Service Execution",
        "techniqueid": "T1569.002"
    },
    {
        "description": "Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g.?Bash History), operating system or application-specific repositories (e.g.?Credentials in Registry), or other specialized files/artifacts (e.g.?Private Keys).",
        "id": "1785",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Unsecured Credentials",
        "techniqueid": "T1552"
    },
    {
        "description": "Adversaries may search the Registry on compromised systems for insecurely stored credentials. The Windows Registry stores configuration information that can be used by the system or other programs. Adversaries may query the Registry looking for credentials and passwords that have been stored for use by other programs or services. Sometimes these credentials are used for automatic logons.",
        "id": "1786",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Credentials in Registry",
        "techniqueid": "T1552.002"
    },
    {
        "description": "Adversaries may \"pass the ticket\" using stolen Kerberos tickets to move laterally within an environment, bypassing normal system access controls. Pass the ticket (PtT) is a method of authenticating to a system using Kerberos tickets without having access to an account's password. Kerberos authentication can be used as the first step to lateral movement to a remote system.",
        "id": "1787",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Pass the Ticket",
        "techniqueid": "T1550.003"
    },
    {
        "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop. Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.",
        "id": "1788",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Valid Accounts",
        "techniqueid": "T1078"
    },
    {
        "description": "Adversaries may obtain and abuse credentials of a domain account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover users, administrators, and services.",
        "id": "1789",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Domain Accounts",
        "techniqueid": "T1078.002"
    },
    {
        "description": "Adversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.",
        "id": "1790",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Local Accounts",
        "techniqueid": "T1078.003"
    },
    {
        "description": "Adversaries may obtain and abuse credentials of a cloud account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. In some cases, cloud accounts may be federated with traditional identity management system, such as Window Active Directory.",
        "id": "1791",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Cloud Accounts",
        "techniqueid": "T1078.004"
    },
    {
        "description": "Adversaries may attempt to get a listing of cloud accounts. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application.",
        "id": "1792",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Cloud Account",
        "techniqueid": "T1087.004"
    },
    {
        "description": "Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services. On macOS, launchd processes known as?Launch Daemon?and?Launch Agent?are run to finish system initialization and load user specific parameters.",
        "id": "1793",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Create or Modify System Process",
        "techniqueid": "T1543"
    },
    {
        "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry. Service configurations can be modified using utilities such as sc.exe and?Reg.",
        "id": "1794",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Windows Service",
        "techniqueid": "T1543.003"
    },
    {
        "description": "Adversaries may access data objects from improperly secured cloud storage.",
        "id": "1795",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Data from Cloud Storage Object",
        "techniqueid": "T1530"
    },
    {
        "description": "Adversaries may leverage information repositories to mine valuable information. Information repositories are tools that allow for storage of information, typically to facilitate collaboration or information sharing between users, and can store a wide variety of data that may aid adversaries in further objectives, or direct access to the target information.",
        "id": "1796",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Data from Information Repositories",
        "techniqueid": "T1213"
    },
    {
        "description": "Adversaries may leverage Confluence repositories to mine valuable information. Often found in development environments alongside Atlassian JIRA, Confluence is generally used to store development-related documentation, however, in general may contain more diverse categories of useful information, such as:",
        "id": "1797",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Confluence",
        "techniqueid": "T1213.001"
    },
    {
        "description": "Adversaries may leverage the SharePoint repository as a source to mine valuable information. SharePoint will often contain useful information for an adversary to learn about the structure and functionality of the internal network and systems. For example, the following is a list of example information that may hold potential value to an adversary and may also be found on SharePoint:",
        "id": "1798",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Sharepoint",
        "techniqueid": "T1213.002"
    },
    {
        "description": "Adversaries may modify the configuration settings of a domain to evade defenses and/or escalate privileges in domain environments. Domains provide a centralized means of managing how computer resources (ex: computers, user accounts) can act, and interact with each other, on a network. The policy of the domain also includes configuration settings that may apply between domains in a multi-domain/forest environment. Modifications to domain settings may include altering domain Group Policy Objects (GPOs) or changing trust settings for domains, including federation trusts.",
        "id": "1799",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Domain Policy Modification",
        "techniqueid": "T1484"
    },
    {
        "description": "Adversaries may modify Group Policy Objects (GPOs) to subvert the intended discretionary access controls for a domain, usually with the intention of escalating privileges on the domain. Group policy allows for centralized management of user and computer settings in Active Directory (AD). GPOs are containers for group policy settings made up of files stored within a predicable network path?\\<DOMAIN>\\SYSVOL\\<DOMAIN>\\Policies\\.",
        "id": "1800",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Group Policy Modification",
        "techniqueid": "T1484.001"
    },
    {
        "description": "Adversaries may forge credential materials that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies, tokens, or other materials to authenticate and authorize user access.",
        "id": "1801",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Forge Web Credentials",
        "techniqueid": "T1606"
    },
    {
        "description": "Adversaries may forge web cookies that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies to authenticate and authorize user access.",
        "id": "1802",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Web Cookies",
        "techniqueid": "T1606.001"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the binaries used by services. Adversaries may use flaws in the permissions of Windows services to replace the binary that is executed upon service start. These service processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.",
        "id": "1803",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Services File Permissions Weakness",
        "techniqueid": "T1574.010"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the binaries used by an installer. These processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.",
        "id": "1804",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Executable Installer File Permissions Weakness",
        "techniqueid": "T1574.005"
    },
    {
        "description": "Adversaries may disable or modify a firewall within a cloud environment to bypass controls that limit access to cloud resources. Cloud firewalls are separate from system firewalls that are described in?Disable or Modify System Firewall.",
        "id": "1805",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Disable or Modify Cloud Firewall",
        "techniqueid": "T1562.007"
    },
    {
        "description": "An adversary may attempt to modify a cloud account's compute service infrastructure to evade defenses. A modification to the compute service infrastructure can include the creation, deletion, or modification of one or more components such as compute instances, virtual machines, and snapshots.",
        "id": "1806",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Modify Cloud Compute Infrastructure",
        "techniqueid": "T1578"
    },
    {
        "description": "An adversary may create a snapshot or data backup within a cloud account to evade defenses. A snapshot is a point-in-time copy of an existing cloud compute component such as a virtual machine (VM), virtual hard drive, or volume. An adversary may leverage permissions to create a snapshot in order to bypass restrictions that prevent access to existing compute service infrastructure, unlike in?Revert Cloud Instance?where an adversary may revert to a snapshot to evade detection and remove evidence of their presence.",
        "id": "1807",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Create Snapshot",
        "techniqueid": "T1578.001"
    },
    {
        "description": "An adversary may create a new instance or virtual machine (VM) within the compute service of a cloud account to evade defenses. Creating a new instance may allow an adversary to bypass firewall rules and permissions that exist on instances currently residing within an account. An adversary may?Create Snapshot?of one or more volumes in an account, create a new instance, mount the snapshots, and then apply a less restrictive security policy to collect?Data from Local System?or for?Remote Data Staging.",
        "id": "1808",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Create Cloud Instance",
        "techniqueid": "T1578.002"
    },
    {
        "description": "An adversary may delete a cloud instance after they have performed malicious activities in an attempt to evade detection and remove evidence of their presence. Deleting an instance or virtual machine can remove valuable forensic artifacts and other evidence of suspicious behavior if the instance is not recoverable.",
        "id": "1809",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Delete Cloud Instance",
        "techniqueid": "T1578.003"
    },
    {
        "description": "Adversaries may hijack a legitimate user��s remote desktop session to move laterally within an environment. Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).",
        "id": "1810",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "RDP Hijacking",
        "techniqueid": "T1563.002"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.",
        "id": "1811",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Remote Desktop Protocol",
        "techniqueid": "T1021.001"
    },
    {
        "description": "Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.",
        "id": "1812",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Access Token Manipulation",
        "techniqueid": "T1134"
    },
    {
        "description": "Adversaries may duplicate then impersonate another user's token to escalate privileges and bypass access controls. An adversary can create a new access token that duplicates an existing token using?DuplicateToken(Ex). The token can then be used with?ImpersonateLoggedOnUser?to allow the calling thread to impersonate a logged on user's security context, or with?SetThreadToken?to assign the impersonated token to a thread.",
        "id": "1813",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Token Impersonation/Theft",
        "techniqueid": "T1134.001"
    },
    {
        "description": "Adversaries may create a new process with a duplicated token to escalate privileges and bypass access controls. An adversary can duplicate a desired access token with?DuplicateToken(Ex)?and use it with?CreateProcessWithTokenW?to create a new process running under the security context of the impersonated user. This is useful for creating a new process under the security context of a different user.",
        "id": "1814",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Create Process with Token",
        "techniqueid": "T1134.002"
    },
    {
        "description": "Adversaries may make and impersonate tokens to escalate privileges and bypass access controls. If an adversary has a username and password but the user is not logged onto the system, the adversary can then create a logon session for the user using the?LogonUser?function. The function will return a copy of the new session's access token and the adversary can use?SetThreadToken?to assign the token to a thread.",
        "id": "1815",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Make and Impersonate Token",
        "techniqueid": "T1134.003"
    },
    {
        "description": "Adversaries may attempt to get a listing of cloud accounts. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application.",
        "id": "1816",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Cloud Account",
        "techniqueid": "T1087.004"
    },
    {
        "description": "Adversaries may abuse BITS jobs to persistently execute or clean up after malicious payloads. Windows Background Intelligent Transfer Service (BITS) is a low-bandwidth, asynchronous file transfer mechanism exposed through?Component Object Model?(COM). BITS is commonly used by updaters, messengers, and other applications preferred to operate in the background (using available idle bandwidth) without interrupting other networked applications. File transfer tasks are implemented as BITS jobs, which contain a queue of one or more file operations.",
        "id": "1817",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "BITS Jobs",
        "techniqueid": "T1197"
    },
    {
        "description": "Adversaries may abuse features of Winlogon to execute DLLs and/or executables when a user logs in. Winlogon.exe is a Windows component responsible for actions at logon/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete. Registry entries in?HKLM\\Software[\\Wow6432Node\\]\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\?and?HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\?are used to manage additional helper programs and functionalities that support Winlogon.",
        "id": "1818",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Winlogon Helper DLL",
        "techniqueid": "T1547.004"
    },
    {
        "description": "Adversaries may create or edit shortcuts to run a program during system boot or user login. Shortcuts or symbolic links are ways of referencing other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process.",
        "id": "1819",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Shortcut Modification",
        "techniqueid": "T1547.009"
    },
    {
        "description": "An adversary may attempt to discover resources that are available within an infrastructure-as-a-service (IaaS) environment. This includes compute service resources such as instances, virtual machines, and snapshots as well as resources of other services including the storage and database services.",
        "id": "1820",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Cloud Infrastructure Discovery",
        "techniqueid": "T1580"
    },
    {
        "description": "An adversary may use a cloud service dashboard GUI with stolen credentials to gain useful information from an operational cloud environment, such as specific services, resources, and features. For example, the GCP Command Center can be used to view all assets, findings of potential security risks, and to run additional queries, such as finding public IP addresses and open ports.",
        "id": "1821",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Cloud Service Dashboard",
        "techniqueid": "T1538"
    },
    {
        "description": "Adversaries may abuse scripting or built-in command line interpreters (CLI) on network devices to execute malicious command and payloads. The CLI is the primary means through which users and administrators interact with the device in order to view system information, modify device operations, or perform diagnostic and administrative functions. CLIs typically contain various permission levels required for different commands.",
        "id": "1822",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Network Device CLI",
        "techniqueid": "T1059.008"
    },
    {
        "description": "Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services. On macOS, launchd processes known as?Launch Daemon?and?Launch Agent?are run to finish system initialization and load user specific parameters.",
        "id": "1823",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Create or Modify System Process",
        "techniqueid": "T1543"
    },
    {
        "description": "Adversaries may create or modify launch agents to repeatedly execute malicious payloads as part of persistence. Per Apple��s developer documentation, when a user logs in, a per-user launchd process is started which loads the parameters for each launch-on-demand user agent from the property list (plist) files found in?/System/Library/LaunchAgents,?/Library/LaunchAgents, and?$HOME/Library/LaunchAgents?. These launch agents have property list files which point to the executables that will be launched .",
        "id": "1824",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Launch Agent",
        "techniqueid": "T1543.001"
    },
    {
        "description": "Adversaries may create or modify systemd services to repeatedly execute malicious payloads as part of persistence. The systemd service manager is commonly used for managing background daemon processes (also known as services) and other system resources. Systemd is the default initialization (init) system on many Linux distributions starting with Debian 8, Ubuntu 15.04, CentOS 7, RHEL 7, Fedora 15, and replaces legacy init systems including SysVinit and Upstart while remaining backwards compatible with the aforementioned init systems.",
        "id": "1825",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Systemd Service",
        "techniqueid": "T1543.002"
    },
    {
        "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry. Service configurations can be modified using utilities such as sc.exe and?Reg.",
        "id": "1826",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Windows Service",
        "techniqueid": "T1543.003"
    },
    {
        "description": "Adversaries may create or modify launch daemons to repeatedly execute malicious payloads as part of persistence. Per Apple��s developer documentation, when macOS and OS X boot up, launchd is run to finish system initialization. This process loads the parameters for each launch-on-demand system-level daemon from the property list (plist) files found in?/System/Library/LaunchDaemons?and?/Library/LaunchDaemons?. These LaunchDaemons have property list files which point to the executables that will be launched .",
        "id": "1827",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Launch Daemon",
        "techniqueid": "T1543.004"
    },
    {
        "description": "Adversaries may access data objects from improperly secured cloud storage.",
        "id": "1828",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Data from Cloud Storage Object",
        "techniqueid": "T1530"
    },
    {
        "description": "Adversaries may leverage information repositories to mine valuable information. Information repositories are tools that allow for storage of information, typically to facilitate collaboration or information sharing between users, and can store a wide variety of data that may aid adversaries in further objectives, or direct access to the target information.",
        "id": "1829",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Data from Information Repositories",
        "techniqueid": "T1213"
    },
    {
        "description": "Adversaries may leverage Confluence repositories to mine valuable information. Often found in development environments alongside Atlassian JIRA, Confluence is generally used to store development-related documentation, however, in general may contain more diverse categories of useful information, such as:",
        "id": "1830",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Confluence",
        "techniqueid": "T1213.001"
    },
    {
        "description": "Adversaries may leverage the SharePoint repository as a source to mine valuable information. SharePoint will often contain useful information for an adversary to learn about the structure and functionality of the internal network and systems. For example, the following is a list of example information that may hold potential value to an adversary and may also be found on SharePoint:",
        "id": "1831",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Sharepoint",
        "techniqueid": "T1213.002"
    },
    {
        "description": "Adversaries may modify the configuration settings of a domain to evade defenses and/or escalate privileges in domain environments. Domains provide a centralized means of managing how computer resources (ex: computers, user accounts) can act, and interact with each other, on a network. The policy of the domain also includes configuration settings that may apply between domains in a multi-domain/forest environment. Modifications to domain settings may include altering domain Group Policy Objects (GPOs) or changing trust settings for domains, including federation trusts.",
        "id": "1832",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Domain Policy Modification",
        "techniqueid": "T1484"
    },
    {
        "description": "Adversaries may modify Group Policy Objects (GPOs) to subvert the intended discretionary access controls for a domain, usually with the intention of escalating privileges on the domain. Group policy allows for centralized management of user and computer settings in Active Directory (AD). GPOs are containers for group policy settings made up of files stored within a predicable network path?\\<DOMAIN>\\SYSVOL\\<DOMAIN>\\Policies\\.",
        "id": "1833",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Group Policy Modification",
        "techniqueid": "T1484.001"
    },
    {
        "description": "Adversaries may establish persistence and elevate privileges by executing malicious content triggered by a Windows Management Instrumentation (WMI) event subscription. WMI can be used to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Examples of events that may be subscribed to are the wall clock time, user loging, or the computer's uptime.",
        "id": "1834",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Windows Management Instrumentation Event Subscription",
        "techniqueid": "T1546.003"
    },
    {
        "description": "Adversaries may forge credential materials that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies, tokens, or other materials to authenticate and authorize user access.",
        "id": "1835",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Forge Web Credentials",
        "techniqueid": "T1606"
    },
    {
        "description": "An adversary may forge SAML tokens with any permissions claims and lifetimes if they possess a valid SAML token-signing certificate. The default lifetime of a SAML token is one hour, but the validity period can be specified in the?NotOnOrAfter?value of the?conditions ...?element in a token. This value can be changed using the?AccessTokenLifetime?in a?LifetimeTokenPolicy. Forged SAML tokens enable adversaries to authenticate across services that use SAML 2.0 as an SSO (single sign-on) mechanism.",
        "id": "1836",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "SAML Tokens",
        "techniqueid": "T1606.002"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.",
        "id": "1837",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Hijack Execution Flow",
        "techniqueid": "T1574"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the binaries used by services. Adversaries may use flaws in the permissions of Windows services to replace the binary that is executed upon service start. These service processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.",
        "id": "1838",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Services File Permissions Weakness",
        "techniqueid": "T1574.010"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the binaries used by an installer. These processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.",
        "id": "1839",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Executable Installer File Permissions Weakness",
        "techniqueid": "T1574.005"
    },
    {
        "description": "Adversaries may leverage the COR_PROFILER environment variable to hijack the execution flow of programs that load the .NET CLR. The COR_PROFILER is a .NET Framework feature which allows developers to specify an unmanaged (or external of .NET) profiling DLL to be loaded into each .NET process that loads the Common Language Runtime (CLR). These profiliers are designed to monitor, troubleshoot, and debug managed code executed by the .NET CLR.",
        "id": "1840",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "COR_PROFILER",
        "techniqueid": "T1574.012"
    },
    {
        "description": "Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators.",
        "id": "1841",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Impair Defenses",
        "techniqueid": "T1562"
    },
    {
        "description": "Adversaries may disable security tools to avoid possible detection of their tools and activities. This can take the form of killing security software or event logging processes, deleting Registry keys so that tools do not start at run time, or other methods to interfere with security tools scanning or reporting information.",
        "id": "1842",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Disable or Modify Tools",
        "techniqueid": "T1562.001"
    },
    {
        "description": "Adversaries may disable Windows event logging to limit data that can be leveraged for detections and audits. Windows event logs record user and system activity such as login attempts, process creation, and much more. This data is used by security tools and analysts to generate detections.",
        "id": "1843",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Disable Windows Event Logging",
        "techniqueid": "T1562.002"
    },
    {
        "description": "Adversaries may disable or modify system firewalls in order to bypass controls limiting network usage. Changes could be disabling the entire mechanism as well as adding, deleting, or modifying particular rules. This can be done numerous ways depending on the operating system, including via command-line, editing Windows Registry keys, and Windows Control Panel.",
        "id": "1844",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Disable or Modify System Firewall",
        "techniqueid": "T1562.004"
    },
    {
        "description": "An adversary may attempt to block indicators or events typically captured by sensors from being gathered and analyzed. This could include maliciously redirecting or even disabling host-based sensors, such as Event Tracing for Windows (ETW), by tampering settings that control the collection and flow of event telemetry. These settings may be stored on the system in configuration files and/or in the Registry as well as being accessible via administrative utilities such as?PowerShell?or?Windows Management Instrumentation.",
        "id": "1845",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Indicator Blocking",
        "techniqueid": "T1562.006"
    },
    {
        "description": "Adversaries may disable or modify a firewall within a cloud environment to bypass controls that limit access to cloud resources. Cloud firewalls are separate from system firewalls that are described in?Disable or Modify System Firewall.",
        "id": "1846",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Disable or Modify Cloud Firewall",
        "techniqueid": "T1562.007"
    },
    {
        "description": "An adversary may disable cloud logging capabilities and integrations to limit what data is collected on their activities and avoid detection.",
        "id": "1847",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Disable Cloud Logs",
        "techniqueid": "T1562.008"
    },
    {
        "description": "Adversaries can take advantage of security vulnerabilities and inherent functionality in browser software to change content, modify behavior, and intercept information as part of various man in the browser techniques.",
        "id": "1848",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Man in the Browser",
        "techniqueid": "T1185"
    },
    {
        "description": "An adversary may attempt to modify a cloud account's compute service infrastructure to evade defenses. A modification to the compute service infrastructure can include the creation, deletion, or modification of one or more components such as compute instances, virtual machines, and snapshots.",
        "id": "1849",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Modify Cloud Compute Infrastructure",
        "techniqueid": "T1578"
    },
    {
        "description": "An adversary may create a new instance or virtual machine (VM) within the compute service of a cloud account to evade defenses. Creating a new instance may allow an adversary to bypass firewall rules and permissions that exist on instances currently residing within an account. An adversary may?Create Snapshot?of one or more volumes in an account, create a new instance, mount the snapshots, and then apply a less restrictive security policy to collect?Data from Local System?or for?Remote Data Staging.",
        "id": "1850",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Create Cloud Instance",
        "techniqueid": "T1578.002"
    },
    {
        "description": "An adversary may create a snapshot or data backup within a cloud account to evade defenses. A snapshot is a point-in-time copy of an existing cloud compute component such as a virtual machine (VM), virtual hard drive, or volume. An adversary may leverage permissions to create a snapshot in order to bypass restrictions that prevent access to existing compute service infrastructure, unlike in?Revert Cloud Instance?where an adversary may revert to a snapshot to evade detection and remove evidence of their presence.",
        "id": "1851",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Create Snapshot",
        "techniqueid": "T1578.001"
    },
    {
        "description": "An adversary may delete a cloud instance after they have performed malicious activities in an attempt to evade detection and remove evidence of their presence. Deleting an instance or virtual machine can remove valuable forensic artifacts and other evidence of suspicious behavior if the instance is not recoverable.",
        "id": "1852",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Delete Cloud Instance",
        "techniqueid": "T1578.003"
    },
    {
        "description": "Adversaries may take control of preexisting sessions with remote services to move laterally in an environment. Users may use valid credentials to log into a service specifically designed to accept remote connections, such as telnet, SSH, and RDP. When a user logs into a service, a session will be established that will allow them to maintain a continuous interaction with that service.",
        "id": "1853",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Remote Service Session Hijacking",
        "techniqueid": "T1563"
    },
    {
        "description": "Adversaries may hijack a legitimate user��s remote desktop session to move laterally within an environment. Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).",
        "id": "1854",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "RDP Hijacking",
        "techniqueid": "T1563.002"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into a service specifically designed to accept remote connections, such as telnet, SSH, and VNC. The adversary may then perform actions as the logged-on user.",
        "id": "1855",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Remote Services",
        "techniqueid": "T1021"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.",
        "id": "1856",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Remote Desktop Protocol",
        "techniqueid": "T1021.001"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into remote machines using Secure Shell (SSH). The adversary may then perform actions as the logged-on user.",
        "id": "1857",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "SSH",
        "techniqueid": "T1021.004"
    },
    {
        "description": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically requires being a member of an admin or otherwise privileged group on the remote system.",
        "id": "1858",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Scheduled Task/Job",
        "techniqueid": "T1053"
    },
    {
        "description": "Adversaries may abuse the?at.exe?utility to perform task scheduling for initial or recurring execution of malicious code. The?at?utility exists as an executable within Windows for scheduling tasks at a specified time and date. Using?at?requires that the Task Scheduler service be running, and the user to be logged on as a member of the local Administrators group.",
        "id": "1859",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "At (Windows)",
        "techniqueid": "T1053.002"
    },
    {
        "description": "Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The?schtasks?can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task.",
        "id": "1860",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Scheduled Task",
        "techniqueid": "T1053.005"
    },
    {
        "description": "Adversaries may abuse the?at?utility to perform task scheduling for initial or recurring execution of malicious code. The?at?command within Linux operating systems enables administrators to schedule tasks.",
        "id": "1861",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "At (Linux)",
        "techniqueid": "T1053.001"
    },
    {
        "description": "Adversaries may abuse the?Launchd?daemon to perform task scheduling for initial or recurring execution of malicious code. The?launchd?daemon, native to macOS, is responsible for loading and maintaining services within the operating system. This process loads the parameters for each launch-on-demand system-level daemon from the property list (plist) files found in?/System/Library/LaunchDaemons?and?/Library/LaunchDaemons?. These LaunchDaemons have property list files which point to the executables that will be launched .",
        "id": "1862",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Launchd",
        "techniqueid": "T1053.004"
    },
    {
        "description": "Adversaries may abuse the?cron?utility to perform task scheduling for initial or recurring execution of malicious code. The?cron?utility is a time-based job scheduler for Unix-like operating systems. The?crontab?file contains the schedule of cron entries to be run and the specified times for execution. Any?crontab?files are stored in operating system-specific file paths.",
        "id": "1863",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Cron",
        "techniqueid": "T1053.003"
    },
    {
        "description": "Adversaries may abuse systemd timers to perform task scheduling for initial or recurring execution of malicious code. Systemd timers are unit files with file extension?.timer?that control services. Timers can be set to run on a calendar event or after a time span relative to a starting point. They can be used as an alternative to?Cron?in Linux environments.",
        "id": "1864",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Systemd Timers",
        "techniqueid": "T1053.006"
    },
    {
        "description": "Adversaries may stop or disable services on a system to render those services unavailable to legitimate users. Stopping critical services can inhibit or stop response to an incident or aid in the adversary's overall objectives to cause damage to the environment.",
        "id": "1865",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Service Stop",
        "techniqueid": "T1489"
    },
    {
        "description": "Adversaries may gain access to and use third-party software suites installed within an enterprise network, such as administration, monitoring, and deployment systems, to move laterally through the network. Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, VNC, HBSS, Altiris, etc.).",
        "id": "1866",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Software Deployment Tools",
        "techniqueid": "T1072"
    },
    {
        "description": "Adversaries may abuse system services or daemons to execute commands or programs. Adversaries can execute malicious content by interacting with or creating services. Many services are set to run at boot, which can aid in achieving persistence (Create or Modify System Process), but adversaries can also abuse services for one-time or temporary execution.",
        "id": "1867",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "System Services",
        "techniqueid": "T1569"
    },
    {
        "description": "Adversaries may abuse launchctl to execute commands or programs. Launchctl controls the macOS launchd process, which handles things like?Launch Agents and?Launch Daemons, but can execute other commands or programs itself. Launchctl supports taking subcommands on the command-line, interactively, or even redirected from standard input.",
        "id": "1868",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Launchctl",
        "techniqueid": "T1569.001"
    },
    {
        "description": "Adversaries may exfiltrate data by transferring the data, including backups of cloud environments, to another cloud account they control on the same service to avoid typical file transfers/downloads and network-based exfiltration detection.",
        "id": "1869",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Transfer Data to Cloud Account",
        "techniqueid": "T1537"
    },
    {
        "description": "Adversaries may use alternate authentication material, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls.",
        "id": "1870",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Use Alternate Authentication Material",
        "techniqueid": "T1550"
    },
    {
        "description": "Adversaries may \"pass the hash\" using stolen password hashes to move laterally within an environment, bypassing normal system access controls. Pass the hash (PtH) is a method of authenticating as a user without having access to the user's cleartext password. This method bypasses standard authentication steps that require a cleartext password, moving directly into the portion of the authentication that uses the password hash. In this technique, valid password hashes for the account being used are captured using a Credential Access technique. Captured hashes are used with PtH to authenticate as that user. Once authenticated, PtH may be used to perform actions on local or remote systems.",
        "id": "1871",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Pass the Hash",
        "techniqueid": "T1550.002"
    },
    {
        "description": "Adversaries may \"pass the ticket\" using stolen Kerberos tickets to move laterally within an environment, bypassing normal system access controls. Pass the ticket (PtT) is a method of authenticating to a system using Kerberos tickets without having access to an account's password. Kerberos authentication can be used as the first step to lateral movement to a remote system.",
        "id": "1872",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Pass the Ticket",
        "techniqueid": "T1550.003"
    },
    {
        "description": "Adversaries may obtain and abuse credentials of a cloud account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. In some cases, cloud accounts may be federated with traditional identity management system, such as Window Active Directory.",
        "id": "1873",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Cloud Accounts",
        "techniqueid": "T1078.004"
    },
    {
        "description": "Adversaries may abuse Windows Management Instrumentation (WMI) to achieve execution. WMI is a Windows administration feature that provides a uniform environment for local and remote access to Windows system components. It relies on the WMI service for local and remote access and the server message block (SMB) and Remote Procedure Call Service (RPCS) for remote access. RPCS operates over port 135.",
        "id": "1874",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Windows Management Instrumentation",
        "techniqueid": "T1047"
    },
    {
        "description": "Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk. An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.",
        "id": "1875",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Abuse Elevation Control Mechanism",
        "techniqueid": "T1548"
    },
    {
        "description": "Adversaries may perform sudo caching and/or use the suoders file to elevate privileges. Adversaries may do this to execute commands as other users or spawn processes with higher privileges.",
        "id": "1876",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Sudo and Sudo Caching",
        "techniqueid": "T1548.003"
    },
    {
        "description": "Adversaries may modify the SSH?authorized_keys?file to maintain persistence on a victim host. Linux distributions and macOS commonly use key-based authentication to secure the authentication process of SSH sessions for remote management. The?authorized_keys?file in SSH specifies the SSH keys that can be used for logging into the user account for which the file is configured. This file is usually found in the user's home directory under?<user-home>/.ssh/authorized_keys. Users may edit the system��s SSH config file to modify the directives PubkeyAuthentication and RSAAuthentication to the value \"yes\" to ensure public key and RSA authentication are enabled. The SSH config file is usually located under?/etc/ssh/sshd_config.",
        "id": "1877",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "SSH Authorized Keys",
        "techniqueid": "T1098.004"
    },
    {
        "description": "Adversaries may abuse time providers to execute DLLs when the system boots. The Windows Time service (W32Time) enables time synchronization across and within domains. W32Time time providers are responsible for retrieving time stamps from hardware/network resources and outputting these values to other network clients.",
        "id": "1878",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Time Providers",
        "techniqueid": "T1547.003"
    },
    {
        "description": "Adversaries may modify plist files to run a program during system boot or user login. Property list (plist) files contain all of the information that macOS and OS X uses to configure applications and services. These files are UTF-8 encoded and formatted like XML documents via a series of keys surrounded by < >. They detail when programs should execute, file paths to the executables, program arguments, required OS permissions, and many others. plists are located in certain locations depending on their purpose such as?/Library/Preferences?(which execute with elevated privileges) and?~/Library/Preferences?(which execute with a user's privileges).",
        "id": "1879",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Plist Modification",
        "techniqueid": "T1547.011"
    },
    {
        "description": "Adversaries may use scripts automatically executed at boot or logon initialization to establish persistence. Initialization scripts can be used to perform administrative functions, which may often execute other programs or send information to an internal logging server. These scripts can vary based on operating system and whether applied locally or remotely.",
        "id": "1880",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Boot or Logon Initialization Scripts",
        "techniqueid": "T1037"
    },
    {
        "description": "Adversaries may use macOS logon scripts automatically executed at logon initialization to establish persistence. macOS allows logon scripts (known as login hooks) to be executed whenever a specific user logs into a system. A login hook tells Mac OS X to execute a certain script when a user logs in, but unlike?Startup Items, a login hook executes as the elevated root user.",
        "id": "1881",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Logon Script (Mac)",
        "techniqueid": "T1037.002"
    },
    {
        "description": "Adversaries may use network logon scripts automatically executed at logon initialization to establish persistence. Network logon scripts can be assigned using Active Directory or Group Policy Objects. These logon scripts run with the privileges of the user they are assigned to. Depending on the systems within the network, initializing one of these scripts could apply to more than one or potentially all systems.",
        "id": "1882",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Network Logon Script",
        "techniqueid": "T1037.003"
    },
    {
        "description": "Adversaries may use startup items automatically executed at boot initialization to establish persistence. Startup items execute during the final phase of the boot process and contain shell scripts or other executable files along with configuration information used by the system to determine the execution order for all startup items.",
        "id": "1883",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Startup Items",
        "techniqueid": "T1037.005"
    },
    {
        "description": "Adversaries may use rc.common automatically executed at boot initialization to establish persistence. During the boot process, macOS executes?source /etc/rc.common, which is a shell script containing various utility functions. This file also defines routines for processing command-line arguments and for gathering system settings and is thus recommended to include in the start of Startup Item Scripts . In macOS and OS X, this is now a deprecated mechanism in favor of?Launch Agent?and?Launch Daemon?but is currently still used.",
        "id": "1884",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Rc.common",
        "techniqueid": "T1037.004"
    },
    {
        "description": "Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services. On macOS, launchd processes known as?Launch Daemon?and?Launch Agent?are run to finish system initialization and load user specific parameters.",
        "id": "1885",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Create or Modify System Process",
        "techniqueid": "T1543"
    },
    {
        "description": "Adversaries may create or modify systemd services to repeatedly execute malicious payloads as part of persistence. The systemd service manager is commonly used for managing background daemon processes (also known as services) and other system resources. Systemd is the default initialization (init) system on many Linux distributions starting with Debian 8, Ubuntu 15.04, CentOS 7, RHEL 7, Fedora 15, and replaces legacy init systems including SysVinit and Upstart while remaining backwards compatible with the aforementioned init systems.",
        "id": "1886",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Systemd Service",
        "techniqueid": "T1543.002"
    },
    {
        "description": "Adversaries may access data objects from improperly secured cloud storage.",
        "id": "1887",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Data from Cloud Storage Object",
        "techniqueid": "T1530"
    },
    {
        "description": "Adversaries may insert, delete, or manipulate data in order to manipulate external outcomes or hide activity. By manipulating data, adversaries may attempt to affect a business process, organizational understanding, or decision making.",
        "id": "1888",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Data Manipulation",
        "techniqueid": "T1565"
    },
    {
        "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity. By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making.",
        "id": "1889",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Stored Data Manipulation",
        "techniqueid": "T1565.001"
    },
    {
        "description": "Adversaries may modify systems in order to manipulate the data as it is accessed and displayed to an end user. By manipulating runtime data, adversaries may attempt to affect a business process, organizational understanding, and decision making.",
        "id": "1890",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Runtime Data Manipulation",
        "techniqueid": "T1565.003"
    },
    {
        "description": "Adversaries may establish persistence by executing malicious content triggered by a user��s shell.?~/.bash_profile?and?~/.bashrc?are shell scripts that contain shell commands. These files are executed in a user's context when a new shell opens or when a user logs in so that their environment is set correctly.",
        "id": "1891",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": ".bash_profile and .bashrc",
        "techniqueid": "T1546.004"
    },
    {
        "description": "Adversaries may gain persistence and elevate privileges by executing malicious content triggered by PowerShell profiles. A PowerShell profile (profile.ps1) is a script that runs when?PowerShell?starts and can be used as a logon script to customize user environments.",
        "id": "1892",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "PowerShell Profile",
        "techniqueid": "T1546.013"
    },
    {
        "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).",
        "id": "1893",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "File and Directory Permissions Modification",
        "techniqueid": "T1222"
    },
    {
        "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).",
        "id": "1894",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Windows File and Directory Permissions Modification",
        "techniqueid": "T1222.001"
    },
    {
        "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).",
        "id": "1895",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Linux and Mac File and Directory Permissions Modification",
        "techniqueid": "T1222.002"
    },
    {
        "description": "Adversaries may use NTFS file attributes to hide their malicious data in order to evade detection. Every New Technology File System (NTFS) formatted partition contains a Master File Table (MFT) that maintains a record for every file/directory on the partition. Within MFT entries are file attributes, such as Extended Attributes (EA) and Data [known as Alternate Data Streams (ADSs) when more than one Data attribute is present], that can be used to store arbitrary data (and even complete files).",
        "id": "1896",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "NTFS File Attributes",
        "techniqueid": "T1564.004"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.",
        "id": "1897",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Hijack Execution Flow",
        "techniqueid": "T1574"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking vulnerable file path references. Adversaries can take advantage of paths that lack surrounding quotations by placing an executable in a higher level directory within the path, so that Windows will choose the adversary's executable to launch.",
        "id": "1898",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Path Interception by Unquoted Path",
        "techniqueid": "T1574.009"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking environment variables used to load libraries. Adversaries may place a program in an earlier entry in the list of directories stored in the PATH environment variable, which Windows will then execute when it searches sequentially through that PATH listing in search of the binary that was called from a script or the command line.",
        "id": "1899",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Path Interception by PATH Environment Variable",
        "techniqueid": "T1574.007"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the search order used to load other programs. Because some programs do not call other programs using the full path, adversaries may place their own file in the directory where the calling program is located, causing the operating system to launch their malicious software at the request of the calling program.",
        "id": "1900",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Path Interception by Search Order Hijacking",
        "techniqueid": "T1574.008"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the library manifest used to load DLLs. Adversaries may take advantage of vague references in the library manifest of a program by replacing a legitimate library with a malicious one, causing the operating system to load their malicious library when it is called for by the victim program.",
        "id": "1901",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "DLL Side-Loading",
        "techniqueid": "T1574.002"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking ambiguous paths used to load libraries. Adversaries may plant trojan dynamic libraries, in a directory that will be searched by the operating system before the legitimate library specified by the victim program, so that their malicious library will be loaded into the victim program instead. MacOS and OS X use a common method to look for required dynamic libraries (dylib) to load into a program based on search paths.",
        "id": "1902",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Dylib Hijacking",
        "techniqueid": "T1574.004"
    },
    {
        "description": "Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators.",
        "id": "1903",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Impair Defenses",
        "techniqueid": "T1562"
    },
    {
        "description": "Adversaries may disable security tools to avoid possible detection of their tools and activities. This can take the form of killing security software or event logging processes, deleting Registry keys so that tools do not start at run time, or other methods to interfere with security tools scanning or reporting information.",
        "id": "1904",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Disable or Modify Tools",
        "techniqueid": "T1562.001"
    },
    {
        "description": "Adversaries may disable Windows event logging to limit data that can be leveraged for detections and audits. Windows event logs record user and system activity such as login attempts, process creation, and much more. This data is used by security tools and analysts to generate detections.",
        "id": "1905",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Disable Windows Event Logging",
        "techniqueid": "T1562.002"
    },
    {
        "description": "Adversaries may disable or modify system firewalls in order to bypass controls limiting network usage. Changes could be disabling the entire mechanism as well as adding, deleting, or modifying particular rules. This can be done numerous ways depending on the operating system, including via command-line, editing Windows Registry keys, and Windows Control Panel.",
        "id": "1906",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Disable or Modify System Firewall",
        "techniqueid": "T1562.004"
    },
    {
        "description": "An adversary may attempt to block indicators or events typically captured by sensors from being gathered and analyzed. This could include maliciously redirecting or even disabling host-based sensors, such as Event Tracing for Windows (ETW), by tampering settings that control the collection and flow of event telemetry. These settings may be stored on the system in configuration files and/or in the Registry as well as being accessible via administrative utilities such as?PowerShell?or?Windows Management Instrumentation.",
        "id": "1907",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Indicator Blocking",
        "techniqueid": "T1562.006"
    },
    {
        "description": "Adversaries may delete or alter generated artifacts on a host system, including logs or captured files such as quarantined malware. Locations and format of logs are platform or product-specific, however standard operating system logs are captured as Windows events or Linux/macOS files such as?Bash History?and /var/log/*.",
        "id": "1908",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Indicator Removal on Host",
        "techniqueid": "T1070"
    },
    {
        "description": "Adversaries may clear Windows Event Logs to hide the activity of an intrusion. Windows Event Logs are a record of a computer's alerts and notifications. There are three system-defined sources of events: System, Application, and Security, with five event types: Error, Warning, Information, Success Audit, and Failure Audit.",
        "id": "1909",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Clear Windows Event Logs",
        "techniqueid": "T1070.001"
    },
    {
        "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the?/var/log/?directory. Subfolders in this directory categorize logs by their related functions, such as:",
        "id": "1910",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Clear Linux or Mac System Logs",
        "techniqueid": "T1070.002"
    },
    {
        "description": "In addition to clearing system logs, an adversary may clear the command history of a compromised account to conceal the actions undertaken during an intrusion. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done.",
        "id": "1911",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Clear Command History",
        "techniqueid": "T1070.003"
    },
    {
        "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.",
        "id": "1912",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Masquerading",
        "techniqueid": "T1036"
    },
    {
        "description": "Adversaries may rename legitimate system utilities to try to evade security mechanisms concerning the usage of those utilities. Security monitoring and control mechanisms may be in place for system utilities adversaries are capable of abusing. It may be possible to bypass those security mechanisms by renaming the utility prior to utilization (ex: rename?rundll32.exe). An alternative case occurs when a legitimate utility is copied or moved to a different directory and renamed to avoid detections based on system utilities executing from non-standard paths.",
        "id": "1913",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Rename System Utilities",
        "techniqueid": "T1036.003"
    },
    {
        "description": "Adversaries may match or approximate the name or location of legitimate files when naming/placing their files. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). Alternatively, the filename given may be a close approximation of legitimate programs or something innocuous.",
        "id": "1914",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Match Legitimate Name or Location",
        "techniqueid": "T1036.005"
    },
    {
        "description": "Adversaries may inject malicious code into processes via the /proc filesystem in order to evade process-based defenses as well as possibly elevate privileges. Proc memory injection is a method of executing arbitrary code in the address space of a separate live process.",
        "id": "1915",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Proc Memory",
        "techniqueid": "T1055.009"
    },
    {
        "description": "Adversaries may hijack a legitimate user's SSH session to move laterally within an environment. Secure Shell (SSH) is a standard means of remote access on Linux and macOS systems. It allows a user to connect to another system via an encrypted tunnel, commonly authenticating through a password, certificate or the use of an asymmetric encryption key pair.",
        "id": "1916",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "SSH Hijacking",
        "techniqueid": "T1563.001"
    },
    {
        "description": "Adversaries may abuse systemd timers to perform task scheduling for initial or recurring execution of malicious code. Systemd timers are unit files with file extension?.timer?that control services. Timers can be set to run on a calendar event or after a time span relative to a starting point. They can be used as an alternative to?Cron?in Linux environments.",
        "id": "1917",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Systemd Timers",
        "techniqueid": "T1053.006"
    },
    {
        "description": "Adversaries may stop or disable services on a system to render those services unavailable to legitimate users. Stopping critical services can inhibit or stop response to an incident or aid in the adversary's overall objectives to cause damage to the environment.",
        "id": "1918",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Service Stop",
        "techniqueid": "T1489"
    },
    {
        "description": "Adversaries may abuse control.exe to proxy execution of malicious payloads. The Windows Control Panel process binary (control.exe) handles execution of Control Panel items, which are utilities that allow users to view and adjust computer settings.",
        "id": "1919",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Control Panel",
        "techniqueid": "T1218.002"
    },
    {
        "description": "Adversaries may tamper with SIP and trust provider components to mislead the operating system and application control tools when conducting signature validation checks. In user mode, Windows Authenticode digital signatures are used to verify a file's origin and integrity, variables that may be used to establish trust in signed code (ex: a driver with a valid Microsoft signature may be handled as safe). The signature validation process is handled via the WinVerifyTrust application programming interface (API) function, which accepts an inquiry and coordinates with the appropriate trust provider, which is responsible for validating parameters of a signature.",
        "id": "1920",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "SIP and Trust Provider Hijacking",
        "techniqueid": "T1553.003"
    },
    {
        "description": "Adversaries may abuse system services or daemons to execute commands or programs. Adversaries can execute malicious content by interacting with or creating services. Many services are set to run at boot, which can aid in achieving persistence (Create or Modify System Process), but adversaries can also abuse services for one-time or temporary execution.",
        "id": "1921",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "System Services",
        "techniqueid": "T1569"
    },
    {
        "description": "Adversaries may abuse the Windows service control manager to execute malicious commands or payloads. The Windows service control manager (services.exe) is an interface to manage and manipulate services. The service control manager is accessible to users via GUI components as well as system utilities such as?sc.exe?and?Net.",
        "id": "1922",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Service Execution",
        "techniqueid": "T1569.002"
    },
    {
        "description": "Adversaries may deliver payloads to remote systems by adding content to shared storage locations, such as network drives or internal code repositories. Content stored on network drives or in other shared locations may be tainted by adding malicious programs, scripts, or exploit code to otherwise valid files. Once a user opens the shared tainted content, the malicious portion can be executed to run the adversary's code on a remote system. Adversaries may use tainted shared content to move laterally.",
        "id": "1923",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Taint Shared Content",
        "techniqueid": "T1080"
    },
    {
        "description": "Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g.?Bash History), operating system or application-specific repositories (e.g.?Credentials in Registry), or other specialized files/artifacts (e.g.?Private Keys).",
        "id": "1924",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Unsecured Credentials",
        "techniqueid": "T1552"
    },
    {
        "description": "Adversaries may search local file systems and remote file shares for files containing insecurely stored credentials. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.",
        "id": "1925",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Credentials In Files",
        "techniqueid": "T1552.001"
    },
    {
        "description": "Adversaries may search for private key certificate files on compromised systems for insecurely stored credentials. Private cryptographic keys and certificates are used for authentication, encryption/decryption, and digital signatures. Common key and certificate file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, .pfx, .cer, .p7b, .asc.",
        "id": "1926",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Private Keys",
        "techniqueid": "T1552.004"
    },
    {
        "description": "Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk. An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.",
        "id": "1927",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Abuse Elevation Control Mechanism",
        "techniqueid": "T1548"
    },
    {
        "description": "Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.",
        "id": "1928",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Bypass User Account Control",
        "techniqueid": "T1548.002"
    },
    {
        "description": "Adversaries may perform sudo caching and/or use the suoders file to elevate privileges. Adversaries may do this to execute commands as other users or spawn processes with higher privileges.",
        "id": "1929",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Sudo and Sudo Caching",
        "techniqueid": "T1548.003"
    },
    {
        "description": "Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.",
        "id": "1930",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Access Token Manipulation",
        "techniqueid": "T1134"
    },
    {
        "description": "Adversaries may duplicate then impersonate another user's token to escalate privileges and bypass access controls. An adversary can create a new access token that duplicates an existing token using?DuplicateToken(Ex). The token can then be used with?ImpersonateLoggedOnUser?to allow the calling thread to impersonate a logged on user's security context, or with?SetThreadToken?to assign the impersonated token to a thread.",
        "id": "1931",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Token Impersonation/Theft",
        "techniqueid": "T1134.001"
    },
    {
        "description": "Adversaries may create a new process with a duplicated token to escalate privileges and bypass access controls. An adversary can duplicate a desired access token with?DuplicateToken(Ex)?and use it with?CreateProcessWithTokenW?to create a new process running under the security context of the impersonated user. This is useful for creating a new process under the security context of a different user.",
        "id": "1932",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Create Process with Token",
        "techniqueid": "T1134.002"
    },
    {
        "description": "Adversaries may make and impersonate tokens to escalate privileges and bypass access controls. If an adversary has a username and password but the user is not logged onto the system, the adversary can then create a logon session for the user using the?LogonUser?function. The function will return a copy of the new session's access token and the adversary can use?SetThreadToken?to assign the token to a thread.",
        "id": "1933",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Make and Impersonate Token",
        "techniqueid": "T1134.003"
    },
    {
        "description": "Adversaries may manipulate accounts to maintain access to victim systems. Account manipulation may consist of any action that preserves adversary access to a compromised account, such as modifying credentials or permission groups. These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials. In order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain.",
        "id": "1934",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Account Manipulation",
        "techniqueid": "T1098"
    },
    {
        "description": "Adversaries may grant additional permission levels, such as ReadPermission or FullAccess, to maintain persistent access to an adversary-controlled email account. The?Add-MailboxPermission?PowerShell?cmdlet, available in on-premises Exchange and in the cloud-based service Office 365, adds permissions to a mailbox.",
        "id": "1935",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Exchange Email Delegate Permissions",
        "techniqueid": "T1098.002"
    },
    {
        "description": "An adversary may add the Global Administrator role to an adversary-controlled account to maintain persistent access to an Office 365 tenant. With sufficient permissions, a compromised account can gain almost unlimited access to data and settings (including the ability to reset the passwords of other admins) via the global admin role.",
        "id": "1936",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Add Office 365 Global Administrator Role",
        "techniqueid": "T1098.003"
    },
    {
        "description": "Adversaries may add adversary-controlled credentials to a cloud account to maintain persistent access to victim accounts and instances within the environment.",
        "id": "1937",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Additional Cloud Credentials",
        "techniqueid": "T1098.001"
    },
    {
        "description": "Adversaries may modify the kernel to automatically execute programs on system boot. Loadable Kernel Modules (LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. ?",
        "id": "1938",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Kernel Modules and Extensions",
        "techniqueid": "T1547.006"
    },
    {
        "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of?Unix Shell?while Windows installations include the?Windows Command Shell?and?PowerShell.",
        "id": "1939",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Command and Scripting Interpreter",
        "techniqueid": "T1059"
    },
    {
        "description": "Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the?Start-Process?cmdlet which can be used to run an executable and the?Invoke-Command?cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).",
        "id": "1940",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "PowerShell",
        "techniqueid": "T1059.001"
    },
    {
        "description": "Adversaries may abuse scripting or built-in command line interpreters (CLI) on network devices to execute malicious command and payloads. The CLI is the primary means through which users and administrators interact with the device in order to view system information, modify device operations, or perform diagnostic and administrative functions. CLIs typically contain various permission levels required for different commands.",
        "id": "1941",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Network Device CLI",
        "techniqueid": "T1059.008"
    },
    {
        "description": "Adversaries may create an account to maintain access to victim systems. With a sufficient level of access, creating such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.",
        "id": "1942",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Create Account",
        "techniqueid": "T1136"
    },
    {
        "description": "Adversaries may create a local account to maintain access to victim systems. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service. With a sufficient level of access, the?net user /add?command can be used to create a local account.",
        "id": "1943",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Local Account",
        "techniqueid": "T1136.001"
    },
    {
        "description": "Adversaries may create a domain account to maintain access to victim systems. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover user, administrator, and service accounts. With a sufficient level of access, the?net user /add /domain?command can be used to create a domain account.",
        "id": "1944",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Domain Account",
        "techniqueid": "T1136.002"
    },
    {
        "description": "Adversaries may create a cloud account to maintain access to victim systems. With a sufficient level of access, such accounts may be used to establish secondary credentialed access that does not require persistent remote access tools to be deployed on the system.",
        "id": "1945",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Cloud Account",
        "techniqueid": "T1136.003"
    },
    {
        "description": "Adversaries may create or modify systemd services to repeatedly execute malicious payloads as part of persistence. The systemd service manager is commonly used for managing background daemon processes (also known as services) and other system resources. Systemd is the default initialization (init) system on many Linux distributions starting with Debian 8, Ubuntu 15.04, CentOS 7, RHEL 7, Fedora 15, and replaces legacy init systems including SysVinit and Upstart while remaining backwards compatible with the aforementioned init systems.",
        "id": "1946",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Systemd Service",
        "techniqueid": "T1543.002"
    },
    {
        "description": "Adversaries may modify the configuration settings of a domain to evade defenses and/or escalate privileges in domain environments. Domains provide a centralized means of managing how computer resources (ex: computers, user accounts) can act, and interact with each other, on a network. The policy of the domain also includes configuration settings that may apply between domains in a multi-domain/forest environment. Modifications to domain settings may include altering domain Group Policy Objects (GPOs) or changing trust settings for domains, including federation trusts.",
        "id": "1947",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Domain Policy Modification",
        "techniqueid": "T1484"
    },
    {
        "description": "Adversaries may add new domain trusts or modify the properties of existing domain trusts to evade defenses and/or elevate privileges. Domain trust details, such as whether or not a domain is federated, allow authentication and authorization properties to apply between domains for the purpose of accessing shared resources. These trust objects may include accounts, credentials, and other authentication material applied to servers, tokens, and domains.",
        "id": "1948",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Domain Trust Modification",
        "techniqueid": "T1484.002"
    },
    {
        "description": "Adversaries may attempt to take advantage of a weakness in an Internet-facing computer or program using software, data, or commands in order to cause unintended or unanticipated behavior. The weakness in the system can be a bug, a glitch, or a design vulnerability. These applications are often websites, but can include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other applications with Internet accessible open sockets, such as web servers and related services. Depending on the flaw being exploited this may include?Exploitation for Defense Evasion.",
        "id": "1949",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Exploit Public-Facing Application",
        "techniqueid": "T1190"
    },
    {
        "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.?A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.",
        "id": "1950",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Exploitation of Remote Services",
        "techniqueid": "T1210"
    },
    {
        "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).",
        "id": "1951",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "File and Directory Permissions Modification",
        "techniqueid": "T1222"
    },
    {
        "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).",
        "id": "1952",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Windows File and Directory Permissions Modification",
        "techniqueid": "T1222.001"
    },
    {
        "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).",
        "id": "1953",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Linux and Mac File and Directory Permissions Modification",
        "techniqueid": "T1222.002"
    },
    {
        "description": "Adversaries may forge credential materials that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies, tokens, or other materials to authenticate and authorize user access.",
        "id": "1954",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Forge Web Credentials",
        "techniqueid": "T1606"
    },
    {
        "description": "An adversary may forge SAML tokens with any permissions claims and lifetimes if they possess a valid SAML token-signing certificate. The default lifetime of a SAML token is one hour, but the validity period can be specified in the?NotOnOrAfter?value of the?conditions ...?element in a token. This value can be changed using the?AccessTokenLifetime?in a?LifetimeTokenPolicy. Forged SAML tokens enable adversaries to authenticate across services that use SAML 2.0 as an SSO (single sign-on) mechanism.",
        "id": "1955",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "SAML Tokens",
        "techniqueid": "T1606.002"
    },
    {
        "description": "Adversaries may implant cloud container images with malicious code to establish persistence. Amazon Web Service (AWS) Amazon Machine Images (AMI), Google Cloud Platform (GCP) Images, and Azure Images as well as popular container runtimes such as Docker can be implanted or backdoored. Depending on how the infrastructure is provisioned, this could provide persistent access if the infrastructure provisioning tool is instructed to always use the latest image.",
        "id": "1956",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Implant Container Image",
        "techniqueid": "T1525"
    },
    {
        "description": "Adversaries may install code on externally facing portals, such as a VPN login page, to capture and transmit credentials of users who attempt to log into the service. For example, a compromised login page may log provided user credentials before logging the user in to the service.",
        "id": "1957",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Web Portal Capture",
        "techniqueid": "T1056.003"
    },
    {
        "description": "Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows or pluggable authentication modules (PAM) on Unix-based systems, responsible for gathering, storing, and validating credentials.",
        "id": "1958",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Modify Authentication Process",
        "techniqueid": "T1556"
    },
    {
        "description": "Adversaries may patch the authentication process on a domain controller to bypass the typical authentication mechanisms and enable access to accounts.",
        "id": "1959",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Domain Controller Authentication",
        "techniqueid": "T1556.001"
    },
    {
        "description": "Adversaries may modify pluggable authentication modules (PAM) to access user credentials or enable otherwise unwarranted access to accounts. PAM is a modular system of configuration files, libraries, and executable files which guide authentication for many services. The most common authentication module is?pam_unix.so, which retrieves, sets, and verifies account authentication information in?/etc/passwd?and?/etc/shadow.",
        "id": "1960",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Pluggable Authentication Modules",
        "techniqueid": "T1556.003"
    },
    {
        "description": "Adversaries may use?Patch System Image?to hard code a password in the operating system, thus bypassing of native authentication mechanisms for local accounts on network devices.",
        "id": "1961",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Network Device Authentication",
        "techniqueid": "T1556.004"
    },
    {
        "description": "Adversaries may make changes to the operating system of embedded network devices to weaken defenses and provide new capabilities for themselves. On such devices, the operating systems are typically monolithic and most of the device functionality and capabilities are contained within a single file.",
        "id": "1962",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Modify System Image",
        "techniqueid": "T1601"
    },
    {
        "description": "Adversaries may modify the operating system of a network device to introduce new capabilities or weaken existing defenses. Some network devices are built with a monolithic architecture, where the entire operating system and most of the functionality of the device is contained within a single file. Adversaries may change this file in storage, to be loaded in a future boot, or in memory during runtime.",
        "id": "1963",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Patch System Image",
        "techniqueid": "T1601.001"
    },
    {
        "description": "Adversaries may install an older version of the operating system of a network device to weaken security. Older operating system versions on network devices often have weaker encryption ciphers and, in general, fewer/less updated defensive features.",
        "id": "1964",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Downgrade System Image",
        "techniqueid": "T1601.002"
    },
    {
        "description": "Adversaries may bridge network boundaries by compromising perimeter network devices. Breaching these devices may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.",
        "id": "1965",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Network Boundary Bridging",
        "techniqueid": "T1599"
    },
    {
        "description": "Adversaries may bridge network boundaries by modifying a network device��s Network Address Translation (NAT) configuration. Malicious modifications to NAT may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.",
        "id": "1966",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Network Address Translation Traversal",
        "techniqueid": "T1599.001"
    },
    {
        "description": "Adversaries may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password, from the operating system and software. Credentials can then be used to perform?Lateral Movement?and access restricted information.",
        "id": "1967",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "OS Credential Dumping",
        "techniqueid": "T1003"
    },
    {
        "description": "Adversaries may attempt to access credentials and other sensitive information by abusing a Windows Domain Controller's application programming interface (API) to simulate the replication process from a remote domain controller using a technique called DCSync.",
        "id": "1968",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "DCSync",
        "techniqueid": "T1003.006"
    },
    {
        "description": "Adversaries may attempt to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS). After a user logs on, the system generates and stores a variety of credential materials in LSASS process memory. These credential materials can be harvested by an administrative user or SYSTEM and used to conduct?Lateral Movement?using?Use Alternate Authentication Material.",
        "id": "1969",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "LSASS Memory",
        "techniqueid": "T1003.001"
    },
    {
        "description": "Adversaries may attempt to extract credential material from the Security Account Manager (SAM) database either through in-memory techniques or through the Windows Registry where the SAM database is stored. The SAM is a database file that contains local accounts for the host, typically those found with the?net user?command. Enumerating the SAM database requires SYSTEM level access.",
        "id": "1970",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Security Account Manager",
        "techniqueid": "T1003.002"
    },
    {
        "description": "Adversaries may gather credentials from information stored in the Proc filesystem or?/proc. The Proc filesystem on Linux contains a great deal of information regarding the state of the running operating system. Processes running with root privileges can use this facility to scrape live memory of other running programs. If any of these programs store passwords in clear text or password hashes in memory, these values can then be harvested for either usage or brute force attacks, respectively.",
        "id": "1971",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Proc Filesystem",
        "techniqueid": "T1003.007"
    },
    {
        "description": "Adversaries may attempt to dump the contents of?/etc/passwd?and?/etc/shadow?to enable offline password cracking. Most modern Linux operating systems use a combination of?/etc/passwd?and?/etc/shadow?to store user account information including password hashes in?/etc/shadow. By default,?/etc/shadow?is only readable by the root user.",
        "id": "1972",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "/etc/passwd and /etc/shadow",
        "techniqueid": "T1003.008"
    },
    {
        "description": "Adversaries may attempt to access cached domain credentials used to allow authentication to occur in the event a domain controller is unavailable.",
        "id": "1973",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Cached Domain Credentials",
        "techniqueid": "T1003.005"
    },
    {
        "description": "Adversaries with SYSTEM access to a host may attempt to access Local Security Authority (LSA) secrets, which can contain a variety of different credential materials, such as credentials for service accounts. LSA secrets are stored in the registry at?HKEY_LOCAL_MACHINE\\SECURITY\\Policy\\Secrets. LSA secrets can also be dumped from memory.",
        "id": "1974",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "LSA Secrets",
        "techniqueid": "T1003.004"
    },
    {
        "description": "Adversaries may attempt to access or create a copy of the Active Directory domain database in order to steal credential information, as well as obtain other information about domain members such as devices, users, and access rights. By default, the NTDS file (NTDS.dit) is located in?%SystemRoot%\\NTDS\\Ntds.dit?of a domain controller.",
        "id": "1975",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "NTDS",
        "techniqueid": "T1003.003"
    },
    {
        "description": "Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control.",
        "id": "1976",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Pre-OS Boot",
        "techniqueid": "T1542"
    },
    {
        "description": "Adversaries may modify system firmware to persist on systems.The BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer.",
        "id": "1977",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "System Firmware",
        "techniqueid": "T1542.001"
    },
    {
        "description": "Adversaries may use bootkits to persist on systems. Bootkits reside at a layer below the operating system and may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.",
        "id": "1978",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Bootkit",
        "techniqueid": "T1542.003"
    },
    {
        "description": "Adversaries may abuse netbooting to load an unauthorized network device operating system from a Trivial File Transfer Protocol (TFTP) server. TFTP boot (netbooting) is commonly used by network administrators to load configuration-controlled network device images from a centralized management server. Netbooting is one option in the boot sequence and can be used to centralize, manage, and control device images.",
        "id": "1979",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "TFTP Boot",
        "techniqueid": "T1542.005"
    },
    {
        "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process.",
        "id": "1980",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Process Injection",
        "techniqueid": "T1055"
    },
    {
        "description": "Adversaries may inject malicious code into processes via ptrace (process trace) system calls in order to evade process-based defenses as well as possibly elevate privileges. Ptrace system call injection is a method of executing arbitrary code in the address space of a separate live process.",
        "id": "1981",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Ptrace System Calls",
        "techniqueid": "T1055.008"
    },
    {
        "description": "Adversaries may take control of preexisting sessions with remote services to move laterally in an environment. Users may use valid credentials to log into a service specifically designed to accept remote connections, such as telnet, SSH, and RDP. When a user logs into a service, a session will be established that will allow them to maintain a continuous interaction with that service.",
        "id": "1982",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Remote Service Session Hijacking",
        "techniqueid": "T1563"
    },
    {
        "description": "Adversaries may hijack a legitimate user's SSH session to move laterally within an environment. Secure Shell (SSH) is a standard means of remote access on Linux and macOS systems. It allows a user to connect to another system via an encrypted tunnel, commonly authenticating through a password, certificate or the use of an asymmetric encryption key pair.",
        "id": "1983",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "SSH Hijacking",
        "techniqueid": "T1563.001"
    },
    {
        "description": "Adversaries may hijack a legitimate user��s remote desktop session to move laterally within an environment. Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).",
        "id": "1984",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "RDP Hijacking",
        "techniqueid": "T1563.002"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.",
        "id": "1985",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Remote Desktop Protocol",
        "techniqueid": "T1021.001"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user.",
        "id": "1986",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "SMB/Windows Admin Shares",
        "techniqueid": "T1021.002"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to interact with remote systems using Windows Remote Management (WinRM). The adversary may then perform actions as the logged-on user.",
        "id": "1987",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Windows Remote Management",
        "techniqueid": "T1021.006"
    },
    {
        "description": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically requires being a member of an admin or otherwise privileged group on the remote system.",
        "id": "1988",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Scheduled Task/Job",
        "techniqueid": "T1053"
    },
    {
        "description": "Adversaries may abuse the?at.exe?utility to perform task scheduling for initial or recurring execution of malicious code. The?at?utility exists as an executable within Windows for scheduling tasks at a specified time and date. Using?at?requires that the Task Scheduler service be running, and the user to be logged on as a member of the local Administrators group.",
        "id": "1989",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "At (Windows)",
        "techniqueid": "T1053.002"
    },
    {
        "description": "Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The?schtasks?can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task.",
        "id": "1990",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Scheduled Task",
        "techniqueid": "T1053.005"
    },
    {
        "description": "Adversaries may abuse systemd timers to perform task scheduling for initial or recurring execution of malicious code. Systemd timers are unit files with file extension?.timer?that control services. Timers can be set to run on a calendar event or after a time span relative to a starting point. They can be used as an alternative to?Cron?in Linux environments.",
        "id": "1991",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Systemd Timers",
        "techniqueid": "T1053.006"
    },
    {
        "description": "Adversaries may abuse legitimate extensible development features of servers to establish persistent access to systems. Enterprise server applications may include features that allow developers to write and install software or scripts to extend the functionality of the main application. Adversaries may install malicious components to extend and abuse server applications.",
        "id": "1992",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Server Software Component",
        "techniqueid": "T1505"
    },
    {
        "description": "Adversaries may abuse Microsoft transport agents to establish persistent access to systems. Microsoft Exchange transport agents can operate on email messages passing through the transport pipeline to perform various tasks such as filtering spam, filtering malicious attachments, journaling, or adding a corporate signature to the end of all outgoing emails. Transport agents can be written by application developers and then compiled to .NET assemblies that are subsequently registered with the Exchange server. Transport agents will be invoked during a specified stage of email processing and carry out developer defined tasks.",
        "id": "1993",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Transport Agent",
        "techniqueid": "T1505.002"
    },
    {
        "description": "Adversaries may abuse SQL stored procedures to establish persistent access to systems. SQL Stored Procedures are code that can be saved and reused so that database users do not waste time rewriting frequently used SQL queries. Stored procedures can be invoked via SQL statements to the database using the procedure name or via defined events (e.g. when a SQL server application is started/restarted).",
        "id": "1994",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "SQL Stored Procedures",
        "techniqueid": "T1505.001"
    },
    {
        "description": "Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed binaries. Binaries signed with trusted digital certificates can execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files.",
        "id": "1995",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Signed Binary Proxy Execution",
        "techniqueid": "T1218"
    },
    {
        "description": "Adversaries may abuse msiexec.exe to proxy execution of malicious payloads. Msiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi). Msiexec.exe is digitally signed by Microsoft.",
        "id": "1996",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Msiexec",
        "techniqueid": "T1218.007"
    },
    {
        "description": "Adversaries may gain access to and use third-party software suites installed within an enterprise network, such as administration, monitoring, and deployment systems, to move laterally through the network. Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, VNC, HBSS, Altiris, etc.).",
        "id": "1997",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Software Deployment Tools",
        "techniqueid": "T1072"
    },
    {
        "description": "Adversaries may attempt to subvert Kerberos authentication by stealing or forging Kerberos tickets to enable?Pass the Ticket.",
        "id": "1998",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Steal or Forge Kerberos Tickets",
        "techniqueid": "T1558"
    },
    {
        "description": "Adversaries who have the KRBTGT account password hash may forge Kerberos ticket-granting tickets (TGT), also known as a golden ticket. Golden tickets enable adversaries to generate authentication material for any account in Active Directory.",
        "id": "1999",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Golden Ticket",
        "techniqueid": "T1558.001"
    },
    {
        "description": "Adversaries may abuse system services or daemons to execute commands or programs. Adversaries can execute malicious content by interacting with or creating services. Many services are set to run at boot, which can aid in achieving persistence (Create or Modify System Process), but adversaries can also abuse services for one-time or temporary execution.",
        "id": "2000",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "System Services",
        "techniqueid": "T1569"
    },
    {
        "description": "Adversaries may abuse the Windows service control manager to execute malicious commands or payloads. The Windows service control manager (services.exe) is an interface to manage and manipulate services. The service control manager is accessible to users via GUI components as well as system utilities such as?sc.exe?and?Net.",
        "id": "2001",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Service Execution",
        "techniqueid": "T1569.002"
    },
    {
        "description": "Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g.?Bash History), operating system or application-specific repositories (e.g.?Credentials in Registry), or other specialized files/artifacts (e.g.?Private Keys).",
        "id": "2002",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Unsecured Credentials",
        "techniqueid": "T1552"
    },
    {
        "description": "Adversaries may search the Registry on compromised systems for insecurely stored credentials. The Windows Registry stores configuration information that can be used by the system or other programs. Adversaries may query the Registry looking for credentials and passwords that have been stored for use by other programs or services. Sometimes these credentials are used for automatic logons.",
        "id": "2003",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Credentials in Registry",
        "techniqueid": "T1552.002"
    },
    {
        "description": "Adversaries may \"pass the ticket\" using stolen Kerberos tickets to move laterally within an environment, bypassing normal system access controls. Pass the ticket (PtT) is a method of authenticating to a system using Kerberos tickets without having access to an account's password. Kerberos authentication can be used as the first step to lateral movement to a remote system.",
        "id": "2004",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Pass the Ticket",
        "techniqueid": "T1550.003"
    },
    {
        "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop. Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.",
        "id": "2005",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Valid Accounts",
        "techniqueid": "T1078"
    },
    {
        "description": "Adversaries may obtain and abuse credentials of a domain account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover users, administrators, and services.",
        "id": "2006",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Domain Accounts",
        "techniqueid": "T1078.002"
    },
    {
        "description": "Adversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.",
        "id": "2007",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Local Accounts",
        "techniqueid": "T1078.003"
    },
    {
        "description": "Adversaries may obtain and abuse credentials of a cloud account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. In some cases, cloud accounts may be federated with traditional identity management system, such as Window Active Directory.",
        "id": "2008",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Cloud Accounts",
        "techniqueid": "T1078.004"
    },
    {
        "description": "Adversaries may attempt to get a listing of cloud accounts. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application.",
        "id": "2009",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Cloud Account",
        "techniqueid": "T1087.004"
    },
    {
        "description": "Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services. On macOS, launchd processes known as?Launch Daemon?and?Launch Agent?are run to finish system initialization and load user specific parameters.",
        "id": "2010",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Create or Modify System Process",
        "techniqueid": "T1543"
    },
    {
        "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry. Service configurations can be modified using utilities such as sc.exe and?Reg.",
        "id": "2011",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Windows Service",
        "techniqueid": "T1543.003"
    },
    {
        "description": "Adversaries may access data objects from improperly secured cloud storage.",
        "id": "2012",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Data from Cloud Storage Object",
        "techniqueid": "T1530"
    },
    {
        "description": "Adversaries may leverage information repositories to mine valuable information. Information repositories are tools that allow for storage of information, typically to facilitate collaboration or information sharing between users, and can store a wide variety of data that may aid adversaries in further objectives, or direct access to the target information.",
        "id": "2013",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Data from Information Repositories",
        "techniqueid": "T1213"
    },
    {
        "description": "Adversaries may leverage Confluence repositories to mine valuable information. Often found in development environments alongside Atlassian JIRA, Confluence is generally used to store development-related documentation, however, in general may contain more diverse categories of useful information, such as:",
        "id": "2014",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Confluence",
        "techniqueid": "T1213.001"
    },
    {
        "description": "Adversaries may leverage the SharePoint repository as a source to mine valuable information. SharePoint will often contain useful information for an adversary to learn about the structure and functionality of the internal network and systems. For example, the following is a list of example information that may hold potential value to an adversary and may also be found on SharePoint:",
        "id": "2015",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Sharepoint",
        "techniqueid": "T1213.002"
    },
    {
        "description": "Adversaries may modify the configuration settings of a domain to evade defenses and/or escalate privileges in domain environments. Domains provide a centralized means of managing how computer resources (ex: computers, user accounts) can act, and interact with each other, on a network. The policy of the domain also includes configuration settings that may apply between domains in a multi-domain/forest environment. Modifications to domain settings may include altering domain Group Policy Objects (GPOs) or changing trust settings for domains, including federation trusts.",
        "id": "2016",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Domain Policy Modification",
        "techniqueid": "T1484"
    },
    {
        "description": "Adversaries may modify Group Policy Objects (GPOs) to subvert the intended discretionary access controls for a domain, usually with the intention of escalating privileges on the domain. Group policy allows for centralized management of user and computer settings in Active Directory (AD). GPOs are containers for group policy settings made up of files stored within a predicable network path?\\<DOMAIN>\\SYSVOL\\<DOMAIN>\\Policies\\.",
        "id": "2017",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Group Policy Modification",
        "techniqueid": "T1484.001"
    },
    {
        "description": "Adversaries may forge credential materials that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies, tokens, or other materials to authenticate and authorize user access.",
        "id": "2018",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Forge Web Credentials",
        "techniqueid": "T1606"
    },
    {
        "description": "Adversaries may forge web cookies that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies to authenticate and authorize user access.",
        "id": "2019",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Web Cookies",
        "techniqueid": "T1606.001"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the binaries used by services. Adversaries may use flaws in the permissions of Windows services to replace the binary that is executed upon service start. These service processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.",
        "id": "2020",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Services File Permissions Weakness",
        "techniqueid": "T1574.010"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the binaries used by an installer. These processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.",
        "id": "2021",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Executable Installer File Permissions Weakness",
        "techniqueid": "T1574.005"
    },
    {
        "description": "Adversaries may disable or modify a firewall within a cloud environment to bypass controls that limit access to cloud resources. Cloud firewalls are separate from system firewalls that are described in?Disable or Modify System Firewall.",
        "id": "2022",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Disable or Modify Cloud Firewall",
        "techniqueid": "T1562.007"
    },
    {
        "description": "An adversary may attempt to modify a cloud account's compute service infrastructure to evade defenses. A modification to the compute service infrastructure can include the creation, deletion, or modification of one or more components such as compute instances, virtual machines, and snapshots.",
        "id": "2023",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Modify Cloud Compute Infrastructure",
        "techniqueid": "T1578"
    },
    {
        "description": "An adversary may create a snapshot or data backup within a cloud account to evade defenses. A snapshot is a point-in-time copy of an existing cloud compute component such as a virtual machine (VM), virtual hard drive, or volume. An adversary may leverage permissions to create a snapshot in order to bypass restrictions that prevent access to existing compute service infrastructure, unlike in?Revert Cloud Instance?where an adversary may revert to a snapshot to evade detection and remove evidence of their presence.",
        "id": "2024",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Create Snapshot",
        "techniqueid": "T1578.001"
    },
    {
        "description": "An adversary may create a new instance or virtual machine (VM) within the compute service of a cloud account to evade defenses. Creating a new instance may allow an adversary to bypass firewall rules and permissions that exist on instances currently residing within an account. An adversary may?Create Snapshot?of one or more volumes in an account, create a new instance, mount the snapshots, and then apply a less restrictive security policy to collect?Data from Local System?or for?Remote Data Staging.",
        "id": "2025",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Create Cloud Instance",
        "techniqueid": "T1578.002"
    },
    {
        "description": "An adversary may delete a cloud instance after they have performed malicious activities in an attempt to evade detection and remove evidence of their presence. Deleting an instance or virtual machine can remove valuable forensic artifacts and other evidence of suspicious behavior if the instance is not recoverable.",
        "id": "2026",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Delete Cloud Instance",
        "techniqueid": "T1578.003"
    },
    {
        "description": "Adversaries may hijack a legitimate user��s remote desktop session to move laterally within an environment. Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).",
        "id": "2027",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "RDP Hijacking",
        "techniqueid": "T1563.002"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.",
        "id": "2028",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Remote Desktop Protocol",
        "techniqueid": "T1021.001"
    },
    {
        "description": "Adversaries may manipulate accounts to maintain access to victim systems. Account manipulation may consist of any action that preserves adversary access to a compromised account, such as modifying credentials or permission groups. These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials. In order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain.",
        "id": "2029",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Account Manipulation",
        "techniqueid": "T1098"
    },
    {
        "description": "Adversaries may grant additional permission levels, such as ReadPermission or FullAccess, to maintain persistent access to an adversary-controlled email account. The?Add-MailboxPermission?PowerShell?cmdlet, available in on-premises Exchange and in the cloud-based service Office 365, adds permissions to a mailbox.",
        "id": "2030",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Exchange Email Delegate Permissions",
        "techniqueid": "T1098.002"
    },
    {
        "description": "An adversary may add the Global Administrator role to an adversary-controlled account to maintain persistent access to an Office 365 tenant. With sufficient permissions, a compromised account can gain almost unlimited access to data and settings (including the ability to reset the passwords of other admins) via the global admin role.",
        "id": "2031",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Add Office 365 Global Administrator Role",
        "techniqueid": "T1098.003"
    },
    {
        "description": "Adversaries may add adversary-controlled credentials to a cloud account to maintain persistent access to victim accounts and instances within the environment.",
        "id": "2032",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Additional Cloud Credentials",
        "techniqueid": "T1098.001"
    },
    {
        "description": "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.",
        "id": "2033",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Brute Force",
        "techniqueid": "T1110"
    },
    {
        "description": "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.",
        "id": "2034",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Password Guessing",
        "techniqueid": "T1110.001"
    },
    {
        "description": "Adversaries may use password cracking to attempt to recover usable credentials, such as plaintext passwords, when credential material such as password hashes are obtained.?OS Credential Dumping?is used to obtain password hashes, this may only get an adversary so far when?Pass the Hash?is not an option. Techniques to systematically guess the passwords used to compute hashes are available, or the adversary may use a pre-computed rainbow table to crack hashes. Cracking hashes is usually done on adversary-controlled systems outside of the target network. The resulting plaintext password resulting from a successfully cracked hash may be used to log into systems, resources, and services in which the account has access.",
        "id": "2035",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Password Cracking",
        "techniqueid": "T1110.002"
    },
    {
        "description": "Adversaries may use a single or small list of commonly used passwords against many different accounts to attempt to acquire valid account credentials. Password spraying uses one password (e.g. 'Password01'), or a small list of commonly used passwords, that may match the complexity policy of the domain. Logins are attempted with that password against many different accounts on a network to avoid account lockouts that would normally occur when brute forcing a single account with many passwords.",
        "id": "2036",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Password Spraying",
        "techniqueid": "T1110.003"
    },
    {
        "description": "Adversaries may use credentials obtained from breach dumps of unrelated accounts to gain access to target accounts through credential overlap. Occasionally, large numbers of username and password pairs are dumped online when a website or service is compromised and the user account credentials accessed. The information may be useful to an adversary attempting to compromise accounts by taking advantage of the tendency for users to use the same passwords across personal and business accounts.",
        "id": "2037",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Credential Stuffing",
        "techniqueid": "T1110.004"
    },
    {
        "description": "Adversaries may create an account to maintain access to victim systems. With a sufficient level of access, creating such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.",
        "id": "2038",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Create Account",
        "techniqueid": "T1136"
    },
    {
        "description": "Adversaries may create a cloud account to maintain access to victim systems. With a sufficient level of access, such accounts may be used to establish secondary credentialed access that does not require persistent remote access tools to be deployed on the system.",
        "id": "2039",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Cloud Account",
        "techniqueid": "T1136.003"
    },
    {
        "description": "Adversaries may access data objects from improperly secured cloud storage.",
        "id": "2040",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Data from Cloud Storage Object",
        "techniqueid": "T1530"
    },
    {
        "description": "Adversaries may target user email to collect sensitive information. Emails may contain sensitive data, including trade secrets or personal information, that can prove valuable to adversaries. Adversaries can collect or forward email from mail servers or clients.",
        "id": "2041",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Email Collection",
        "techniqueid": "T1114"
    },
    {
        "description": "Adversaries may target an Exchange server or Office 365 to collect sensitive information. Adversaries may leverage a user's credentials and interact directly with the Exchange server to acquire information from within a network. Adversaries may also access externally facing Exchange services or Office 365 to access email using credentials or access tokens. Tools such as?MailSniper?can be used to automate searches for specific keywords.",
        "id": "2042",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Remote Email Collection",
        "techniqueid": "T1114.002"
    },
    {
        "description": "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as?Windows Remote Management?can also be used externally.",
        "id": "2043",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "External Remote Services",
        "techniqueid": "T1133"
    },
    {
        "description": "An adversary may steal web application or service session cookies and use them to gain access web applications or Internet services as an authenticated user without needing credentials. Web applications and services often use session cookies as an authentication token after a user has authenticated to a website.",
        "id": "2044",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Steal Web Session Cookie",
        "techniqueid": "T1539"
    },
    {
        "description": "Adversaries may obtain and abuse credentials of a cloud account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. In some cases, cloud accounts may be federated with traditional identity management system, such as Window Active Directory.",
        "id": "2045",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Cloud Accounts",
        "techniqueid": "T1078.004"
    },
    {
        "description": "Adversaries may manipulate accounts to maintain access to victim systems. Account manipulation may consist of any action that preserves adversary access to a compromised account, such as modifying credentials or permission groups. These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials. In order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain.",
        "id": "2046",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Account Manipulation",
        "techniqueid": "T1098"
    },
    {
        "description": "Adversaries may grant additional permission levels, such as ReadPermission or FullAccess, to maintain persistent access to an adversary-controlled email account. The?Add-MailboxPermission?PowerShell?cmdlet, available in on-premises Exchange and in the cloud-based service Office 365, adds permissions to a mailbox.",
        "id": "2047",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Exchange Email Delegate Permissions",
        "techniqueid": "T1098.002"
    },
    {
        "description": "Adversaries may add adversary-controlled credentials to a cloud account to maintain persistent access to victim accounts and instances within the environment.",
        "id": "2048",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Additional Cloud Credentials",
        "techniqueid": "T1098.001"
    },
    {
        "description": "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.",
        "id": "2049",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Brute Force",
        "techniqueid": "T1110"
    },
    {
        "description": "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.",
        "id": "2050",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Password Guessing",
        "techniqueid": "T1110.001"
    },
    {
        "description": "Adversaries may use password cracking to attempt to recover usable credentials, such as plaintext passwords, when credential material such as password hashes are obtained.?OS Credential Dumping?is used to obtain password hashes, this may only get an adversary so far when?Pass the Hash?is not an option. Techniques to systematically guess the passwords used to compute hashes are available, or the adversary may use a pre-computed rainbow table to crack hashes. Cracking hashes is usually done on adversary-controlled systems outside of the target network. The resulting plaintext password resulting from a successfully cracked hash may be used to log into systems, resources, and services in which the account has access.",
        "id": "2051",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Password Cracking",
        "techniqueid": "T1110.002"
    },
    {
        "description": "Adversaries may use a single or small list of commonly used passwords against many different accounts to attempt to acquire valid account credentials. Password spraying uses one password (e.g. 'Password01'), or a small list of commonly used passwords, that may match the complexity policy of the domain. Logins are attempted with that password against many different accounts on a network to avoid account lockouts that would normally occur when brute forcing a single account with many passwords.",
        "id": "2052",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Password Spraying",
        "techniqueid": "T1110.003"
    },
    {
        "description": "Adversaries may use credentials obtained from breach dumps of unrelated accounts to gain access to target accounts through credential overlap. Occasionally, large numbers of username and password pairs are dumped online when a website or service is compromised and the user account credentials accessed. The information may be useful to an adversary attempting to compromise accounts by taking advantage of the tendency for users to use the same passwords across personal and business accounts.",
        "id": "2053",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Credential Stuffing",
        "techniqueid": "T1110.004"
    },
    {
        "description": "Adversaries may create an account to maintain access to victim systems. With a sufficient level of access, creating such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.",
        "id": "2054",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Create Account",
        "techniqueid": "T1136"
    },
    {
        "description": "Adversaries may create a local account to maintain access to victim systems. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service. With a sufficient level of access, the?net user /add?command can be used to create a local account.",
        "id": "2055",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Local Account",
        "techniqueid": "T1136.001"
    },
    {
        "description": "Adversaries may create a domain account to maintain access to victim systems. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover user, administrator, and service accounts. With a sufficient level of access, the?net user /add /domain?command can be used to create a domain account.",
        "id": "2056",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Domain Account",
        "techniqueid": "T1136.002"
    },
    {
        "description": "Adversaries may create a cloud account to maintain access to victim systems. With a sufficient level of access, such accounts may be used to establish secondary credentialed access that does not require persistent remote access tools to be deployed on the system.",
        "id": "2057",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Cloud Account",
        "techniqueid": "T1136.003"
    },
    {
        "description": "Adversaries may access data objects from improperly secured cloud storage.",
        "id": "2058",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Data from Cloud Storage Object",
        "techniqueid": "T1530"
    },
    {
        "description": "Adversaries may target an Exchange server or Office 365 to collect sensitive information. Adversaries may leverage a user's credentials and interact directly with the Exchange server to acquire information from within a network. Adversaries may also access externally facing Exchange services or Office 365 to access email using credentials or access tokens. Tools such as?MailSniper?can be used to automate searches for specific keywords.",
        "id": "2059",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Remote Email Collection",
        "techniqueid": "T1114.002"
    },
    {
        "description": "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as?Windows Remote Management?can also be used externally.",
        "id": "2060",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "External Remote Services",
        "techniqueid": "T1133"
    },
    {
        "description": "Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows or pluggable authentication modules (PAM) on Unix-based systems, responsible for gathering, storing, and validating credentials.",
        "id": "2061",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Modify Authentication Process",
        "techniqueid": "T1556"
    },
    {
        "description": "Adversaries may patch the authentication process on a domain controller to bypass the typical authentication mechanisms and enable access to accounts.",
        "id": "2062",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Domain Controller Authentication",
        "techniqueid": "T1556.001"
    },
    {
        "description": "Adversaries may modify pluggable authentication modules (PAM) to access user credentials or enable otherwise unwarranted access to accounts. PAM is a modular system of configuration files, libraries, and executable files which guide authentication for many services. The most common authentication module is?pam_unix.so, which retrieves, sets, and verifies account authentication information in?/etc/passwd?and?/etc/shadow.",
        "id": "2063",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Pluggable Authentication Modules",
        "techniqueid": "T1556.003"
    },
    {
        "description": "Adversaries may use?Patch System Image?to hard code a password in the operating system, thus bypassing of native authentication mechanisms for local accounts on network devices.",
        "id": "2064",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Network Device Authentication",
        "techniqueid": "T1556.004"
    },
    {
        "description": "Adversaries may make changes to the operating system of embedded network devices to weaken defenses and provide new capabilities for themselves. On such devices, the operating systems are typically monolithic and most of the device functionality and capabilities are contained within a single file.",
        "id": "2065",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Modify System Image",
        "techniqueid": "T1601"
    },
    {
        "description": "Adversaries may modify the operating system of a network device to introduce new capabilities or weaken existing defenses. Some network devices are built with a monolithic architecture, where the entire operating system and most of the functionality of the device is contained within a single file. Adversaries may change this file in storage, to be loaded in a future boot, or in memory during runtime.",
        "id": "2066",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Patch System Image",
        "techniqueid": "T1601.001"
    },
    {
        "description": "Adversaries may install an older version of the operating system of a network device to weaken security. Older operating system versions on network devices often have weaker encryption ciphers and, in general, fewer/less updated defensive features.",
        "id": "2067",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Downgrade System Image",
        "techniqueid": "T1601.002"
    },
    {
        "description": "Adversaries may bridge network boundaries by compromising perimeter network devices. Breaching these devices may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.",
        "id": "2068",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Network Boundary Bridging",
        "techniqueid": "T1599"
    },
    {
        "description": "Adversaries may bridge network boundaries by modifying a network device��s Network Address Translation (NAT) configuration. Malicious modifications to NAT may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.",
        "id": "2069",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Network Address Translation Traversal",
        "techniqueid": "T1599.001"
    },
    {
        "description": "Adversaries may sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.",
        "id": "2070",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Network Sniffing",
        "techniqueid": "T1040"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into a service specifically designed to accept remote connections, such as telnet, SSH, and VNC. The adversary may then perform actions as the logged-on user.",
        "id": "2071",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Remote Services",
        "techniqueid": "T1021"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.",
        "id": "2072",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Remote Desktop Protocol",
        "techniqueid": "T1021.001"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into remote machines using Secure Shell (SSH). The adversary may then perform actions as the logged-on user.",
        "id": "2073",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "SSH",
        "techniqueid": "T1021.004"
    },
    {
        "description": "Adversaries may gain access to and use third-party software suites installed within an enterprise network, such as administration, monitoring, and deployment systems, to move laterally through the network. Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, VNC, HBSS, Altiris, etc.).",
        "id": "2074",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Software Deployment Tools",
        "techniqueid": "T1072"
    },
    {
        "description": "Adversaries may obtain and abuse credentials of a domain account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover users, administrators, and services.",
        "id": "2075",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Domain Accounts",
        "techniqueid": "T1078.002"
    },
    {
        "description": "Adversaries may obtain and abuse credentials of a cloud account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. In some cases, cloud accounts may be federated with traditional identity management system, such as Window Active Directory.",
        "id": "2076",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Cloud Accounts",
        "techniqueid": "T1078.004"
    },
    {
        "description": "Adversaries may manipulate accounts to maintain access to victim systems. Account manipulation may consist of any action that preserves adversary access to a compromised account, such as modifying credentials or permission groups. These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials. In order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain.",
        "id": "2077",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Account Manipulation",
        "techniqueid": "T1098"
    },
    {
        "description": "Adversaries may grant additional permission levels, such as ReadPermission or FullAccess, to maintain persistent access to an adversary-controlled email account. The?Add-MailboxPermission?PowerShell?cmdlet, available in on-premises Exchange and in the cloud-based service Office 365, adds permissions to a mailbox.",
        "id": "2078",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Exchange Email Delegate Permissions",
        "techniqueid": "T1098.002"
    },
    {
        "description": "An adversary may add the Global Administrator role to an adversary-controlled account to maintain persistent access to an Office 365 tenant. With sufficient permissions, a compromised account can gain almost unlimited access to data and settings (including the ability to reset the passwords of other admins) via the global admin role.",
        "id": "2079",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Add Office 365 Global Administrator Role",
        "techniqueid": "T1098.003"
    },
    {
        "description": "Adversaries may add adversary-controlled credentials to a cloud account to maintain persistent access to victim accounts and instances within the environment.",
        "id": "2080",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Additional Cloud Credentials",
        "techniqueid": "T1098.001"
    },
    {
        "description": "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.",
        "id": "2081",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Brute Force",
        "techniqueid": "T1110"
    },
    {
        "description": "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.",
        "id": "2082",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Password Guessing",
        "techniqueid": "T1110.001"
    },
    {
        "description": "Adversaries may use password cracking to attempt to recover usable credentials, such as plaintext passwords, when credential material such as password hashes are obtained.?OS Credential Dumping?is used to obtain password hashes, this may only get an adversary so far when?Pass the Hash?is not an option. Techniques to systematically guess the passwords used to compute hashes are available, or the adversary may use a pre-computed rainbow table to crack hashes. Cracking hashes is usually done on adversary-controlled systems outside of the target network. The resulting plaintext password resulting from a successfully cracked hash may be used to log into systems, resources, and services in which the account has access.",
        "id": "2083",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Password Cracking",
        "techniqueid": "T1110.002"
    },
    {
        "description": "Adversaries may use a single or small list of commonly used passwords against many different accounts to attempt to acquire valid account credentials. Password spraying uses one password (e.g. 'Password01'), or a small list of commonly used passwords, that may match the complexity policy of the domain. Logins are attempted with that password against many different accounts on a network to avoid account lockouts that would normally occur when brute forcing a single account with many passwords.",
        "id": "2084",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Password Spraying",
        "techniqueid": "T1110.003"
    },
    {
        "description": "Adversaries may use credentials obtained from breach dumps of unrelated accounts to gain access to target accounts through credential overlap. Occasionally, large numbers of username and password pairs are dumped online when a website or service is compromised and the user account credentials accessed. The information may be useful to an adversary attempting to compromise accounts by taking advantage of the tendency for users to use the same passwords across personal and business accounts.",
        "id": "2085",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Credential Stuffing",
        "techniqueid": "T1110.004"
    },
    {
        "description": "Adversaries may create an account to maintain access to victim systems. With a sufficient level of access, creating such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.",
        "id": "2086",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Create Account",
        "techniqueid": "T1136"
    },
    {
        "description": "Adversaries may create a local account to maintain access to victim systems. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service. With a sufficient level of access, the?net user /add?command can be used to create a local account.",
        "id": "2087",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Local Account",
        "techniqueid": "T1136.001"
    },
    {
        "description": "Adversaries may create a domain account to maintain access to victim systems. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover user, administrator, and service accounts. With a sufficient level of access, the?net user /add /domain?command can be used to create a domain account.",
        "id": "2088",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Domain Account",
        "techniqueid": "T1136.002"
    },
    {
        "description": "Adversaries may create a cloud account to maintain access to victim systems. With a sufficient level of access, such accounts may be used to establish secondary credentialed access that does not require persistent remote access tools to be deployed on the system.",
        "id": "2089",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Cloud Account",
        "techniqueid": "T1136.003"
    },
    {
        "description": "Adversaries may access data objects from improperly secured cloud storage.",
        "id": "2090",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Data from Cloud Storage Object",
        "techniqueid": "T1530"
    },
    {
        "description": "Adversaries may target user email to collect sensitive information. Emails may contain sensitive data, including trade secrets or personal information, that can prove valuable to adversaries. Adversaries can collect or forward email from mail servers or clients.",
        "id": "2091",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Email Collection",
        "techniqueid": "T1114"
    },
    {
        "description": "Adversaries may target an Exchange server or Office 365 to collect sensitive information. Adversaries may leverage a user's credentials and interact directly with the Exchange server to acquire information from within a network. Adversaries may also access externally facing Exchange services or Office 365 to access email using credentials or access tokens. Tools such as?MailSniper?can be used to automate searches for specific keywords.",
        "id": "2092",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Remote Email Collection",
        "techniqueid": "T1114.002"
    },
    {
        "description": "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as?Windows Remote Management?can also be used externally.",
        "id": "2093",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "External Remote Services",
        "techniqueid": "T1133"
    },
    {
        "description": "Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows or pluggable authentication modules (PAM) on Unix-based systems, responsible for gathering, storing, and validating credentials.",
        "id": "2094",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Modify Authentication Process",
        "techniqueid": "T1556"
    },
    {
        "description": "Adversaries may patch the authentication process on a domain controller to bypass the typical authentication mechanisms and enable access to accounts.",
        "id": "2095",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Domain Controller Authentication",
        "techniqueid": "T1556.001"
    },
    {
        "description": "Adversaries may modify pluggable authentication modules (PAM) to access user credentials or enable otherwise unwarranted access to accounts. PAM is a modular system of configuration files, libraries, and executable files which guide authentication for many services. The most common authentication module is?pam_unix.so, which retrieves, sets, and verifies account authentication information in?/etc/passwd?and?/etc/shadow.",
        "id": "2096",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Pluggable Authentication Modules",
        "techniqueid": "T1556.003"
    },
    {
        "description": "Adversaries may use?Patch System Image?to hard code a password in the operating system, thus bypassing of native authentication mechanisms for local accounts on network devices.",
        "id": "2097",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Network Device Authentication",
        "techniqueid": "T1556.004"
    },
    {
        "description": "Adversaries may make changes to the operating system of embedded network devices to weaken defenses and provide new capabilities for themselves. On such devices, the operating systems are typically monolithic and most of the device functionality and capabilities are contained within a single file.",
        "id": "2098",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Modify System Image",
        "techniqueid": "T1601"
    },
    {
        "description": "Adversaries may modify the operating system of a network device to introduce new capabilities or weaken existing defenses. Some network devices are built with a monolithic architecture, where the entire operating system and most of the functionality of the device is contained within a single file. Adversaries may change this file in storage, to be loaded in a future boot, or in memory during runtime.",
        "id": "2099",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Patch System Image",
        "techniqueid": "T1601.001"
    },
    {
        "description": "Adversaries may install an older version of the operating system of a network device to weaken security. Older operating system versions on network devices often have weaker encryption ciphers and, in general, fewer/less updated defensive features.",
        "id": "2100",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Downgrade System Image",
        "techniqueid": "T1601.002"
    },
    {
        "description": "Adversaries may bridge network boundaries by compromising perimeter network devices. Breaching these devices may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.",
        "id": "2101",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Network Boundary Bridging",
        "techniqueid": "T1599"
    },
    {
        "description": "Adversaries may bridge network boundaries by modifying a network device��s Network Address Translation (NAT) configuration. Malicious modifications to NAT may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.",
        "id": "2102",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Network Address Translation Traversal",
        "techniqueid": "T1599.001"
    },
    {
        "description": "Adversaries may sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.",
        "id": "2103",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Network Sniffing",
        "techniqueid": "T1040"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into a service specifically designed to accept remote connections, such as telnet, SSH, and VNC. The adversary may then perform actions as the logged-on user.",
        "id": "2104",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Remote Services",
        "techniqueid": "T1021"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.",
        "id": "2105",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Remote Desktop Protocol",
        "techniqueid": "T1021.001"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into remote machines using Secure Shell (SSH). The adversary may then perform actions as the logged-on user.",
        "id": "2106",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "SSH",
        "techniqueid": "T1021.004"
    },
    {
        "description": "Adversaries may gain access to and use third-party software suites installed within an enterprise network, such as administration, monitoring, and deployment systems, to move laterally through the network. Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, VNC, HBSS, Altiris, etc.).",
        "id": "2107",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Software Deployment Tools",
        "techniqueid": "T1072"
    },
    {
        "description": "Adversaries may obtain and abuse credentials of a domain account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover users, administrators, and services.",
        "id": "2108",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Domain Accounts",
        "techniqueid": "T1078.002"
    },
    {
        "description": "Adversaries may obtain and abuse credentials of a cloud account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. In some cases, cloud accounts may be federated with traditional identity management system, such as Window Active Directory.",
        "id": "2109",
        "mitigation": "Multi-factor Authentication",
        "mitigationid": "M1032",
        "technique": "Cloud Accounts",
        "techniqueid": "T1078.004"
    },
    {
        "description": "Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.",
        "id": "2110",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Access Token Manipulation",
        "techniqueid": "T1134"
    },
    {
        "description": "Adversaries may duplicate then impersonate another user's token to escalate privileges and bypass access controls. An adversary can create a new access token that duplicates an existing token using?DuplicateToken(Ex). The token can then be used with?ImpersonateLoggedOnUser?to allow the calling thread to impersonate a logged on user's security context, or with?SetThreadToken?to assign the impersonated token to a thread.",
        "id": "2111",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Token Impersonation/Theft",
        "techniqueid": "T1134.001"
    },
    {
        "description": "Adversaries may create a new process with a duplicated token to escalate privileges and bypass access controls. An adversary can duplicate a desired access token with?DuplicateToken(Ex)?and use it with?CreateProcessWithTokenW?to create a new process running under the security context of the impersonated user. This is useful for creating a new process under the security context of a different user.",
        "id": "2112",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Create Process with Token",
        "techniqueid": "T1134.002"
    },
    {
        "description": "Adversaries may make and impersonate tokens to escalate privileges and bypass access controls. If an adversary has a username and password but the user is not logged onto the system, the adversary can then create a logon session for the user using the?LogonUser?function. The function will return a copy of the new session's access token and the adversary can use?SetThreadToken?to assign the token to a thread.",
        "id": "2113",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Make and Impersonate Token",
        "techniqueid": "T1134.003"
    },
    {
        "description": "Adversaries may attempt to get a listing of cloud accounts. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application.",
        "id": "2114",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Cloud Account",
        "techniqueid": "T1087.004"
    },
    {
        "description": "Adversaries may abuse BITS jobs to persistently execute or clean up after malicious payloads. Windows Background Intelligent Transfer Service (BITS) is a low-bandwidth, asynchronous file transfer mechanism exposed through?Component Object Model?(COM). BITS is commonly used by updaters, messengers, and other applications preferred to operate in the background (using available idle bandwidth) without interrupting other networked applications. File transfer tasks are implemented as BITS jobs, which contain a queue of one or more file operations.",
        "id": "2115",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "BITS Jobs",
        "techniqueid": "T1197"
    },
    {
        "description": "Adversaries may abuse features of Winlogon to execute DLLs and/or executables when a user logs in. Winlogon.exe is a Windows component responsible for actions at logon/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete. Registry entries in?HKLM\\Software[\\Wow6432Node\\]\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\?and?HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\?are used to manage additional helper programs and functionalities that support Winlogon.",
        "id": "2116",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Winlogon Helper DLL",
        "techniqueid": "T1547.004"
    },
    {
        "description": "Adversaries may create or edit shortcuts to run a program during system boot or user login. Shortcuts or symbolic links are ways of referencing other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process.",
        "id": "2117",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Shortcut Modification",
        "techniqueid": "T1547.009"
    },
    {
        "description": "Adversaries may abuse print processors to run malicious DLLs during system boot for persistence and/or privilege escalation. Print processors are DLLs that are loaded by the print spooler service, spoolsv.exe, during boot.",
        "id": "2118",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Print Processors",
        "techniqueid": "T1547.012"
    },
    {
        "description": "An adversary may attempt to discover resources that are available within an infrastructure-as-a-service (IaaS) environment. This includes compute service resources such as instances, virtual machines, and snapshots as well as resources of other services including the storage and database services.",
        "id": "2119",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Cloud Infrastructure Discovery",
        "techniqueid": "T1580"
    },
    {
        "description": "An adversary may use a cloud service dashboard GUI with stolen credentials to gain useful information from an operational cloud environment, such as specific services, resources, and features. For example, the GCP Command Center can be used to view all assets, findings of potential security risks, and to run additional queries, such as finding public IP addresses and open ports.",
        "id": "2120",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Cloud Service Dashboard",
        "techniqueid": "T1538"
    },
    {
        "description": "Adversaries may abuse scripting or built-in command line interpreters (CLI) on network devices to execute malicious command and payloads. The CLI is the primary means through which users and administrators interact with the device in order to view system information, modify device operations, or perform diagnostic and administrative functions. CLIs typically contain various permission levels required for different commands.",
        "id": "2121",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Network Device CLI",
        "techniqueid": "T1059.008"
    },
    {
        "description": "Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services. On macOS, launchd processes known as?Launch Daemon?and?Launch Agent?are run to finish system initialization and load user specific parameters.",
        "id": "2122",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Create or Modify System Process",
        "techniqueid": "T1543"
    },
    {
        "description": "Adversaries may create or modify launch agents to repeatedly execute malicious payloads as part of persistence. Per Apple��s developer documentation, when a user logs in, a per-user launchd process is started which loads the parameters for each launch-on-demand user agent from the property list (plist) files found in?/System/Library/LaunchAgents,?/Library/LaunchAgents, and?$HOME/Library/LaunchAgents?. These launch agents have property list files which point to the executables that will be launched .",
        "id": "2123",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Launch Agent",
        "techniqueid": "T1543.001"
    },
    {
        "description": "Adversaries may create or modify systemd services to repeatedly execute malicious payloads as part of persistence. The systemd service manager is commonly used for managing background daemon processes (also known as services) and other system resources. Systemd is the default initialization (init) system on many Linux distributions starting with Debian 8, Ubuntu 15.04, CentOS 7, RHEL 7, Fedora 15, and replaces legacy init systems including SysVinit and Upstart while remaining backwards compatible with the aforementioned init systems.",
        "id": "2124",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Systemd Service",
        "techniqueid": "T1543.002"
    },
    {
        "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry. Service configurations can be modified using utilities such as sc.exe and?Reg.",
        "id": "2125",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Windows Service",
        "techniqueid": "T1543.003"
    },
    {
        "description": "Adversaries may create or modify launch daemons to repeatedly execute malicious payloads as part of persistence. Per Apple��s developer documentation, when macOS and OS X boot up, launchd is run to finish system initialization. This process loads the parameters for each launch-on-demand system-level daemon from the property list (plist) files found in?/System/Library/LaunchDaemons?and?/Library/LaunchDaemons?. These LaunchDaemons have property list files which point to the executables that will be launched .",
        "id": "2126",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Launch Daemon",
        "techniqueid": "T1543.004"
    },
    {
        "description": "Adversaries may access data objects from improperly secured cloud storage.",
        "id": "2127",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Data from Cloud Storage Object",
        "techniqueid": "T1530"
    },
    {
        "description": "Adversaries may leverage information repositories to mine valuable information. Information repositories are tools that allow for storage of information, typically to facilitate collaboration or information sharing between users, and can store a wide variety of data that may aid adversaries in further objectives, or direct access to the target information.",
        "id": "2128",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Data from Information Repositories",
        "techniqueid": "T1213"
    },
    {
        "description": "Adversaries may leverage Confluence repositories to mine valuable information. Often found in development environments alongside Atlassian JIRA, Confluence is generally used to store development-related documentation, however, in general may contain more diverse categories of useful information, such as:",
        "id": "2129",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Confluence",
        "techniqueid": "T1213.001"
    },
    {
        "description": "Adversaries may leverage the SharePoint repository as a source to mine valuable information. SharePoint will often contain useful information for an adversary to learn about the structure and functionality of the internal network and systems. For example, the following is a list of example information that may hold potential value to an adversary and may also be found on SharePoint:",
        "id": "2130",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Sharepoint",
        "techniqueid": "T1213.002"
    },
    {
        "description": "Adversaries may modify the configuration settings of a domain to evade defenses and/or escalate privileges in domain environments. Domains provide a centralized means of managing how computer resources (ex: computers, user accounts) can act, and interact with each other, on a network. The policy of the domain also includes configuration settings that may apply between domains in a multi-domain/forest environment. Modifications to domain settings may include altering domain Group Policy Objects (GPOs) or changing trust settings for domains, including federation trusts.",
        "id": "2131",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Domain Policy Modification",
        "techniqueid": "T1484"
    },
    {
        "description": "Adversaries may modify Group Policy Objects (GPOs) to subvert the intended discretionary access controls for a domain, usually with the intention of escalating privileges on the domain. Group policy allows for centralized management of user and computer settings in Active Directory (AD). GPOs are containers for group policy settings made up of files stored within a predicable network path?\\<DOMAIN>\\SYSVOL\\<DOMAIN>\\Policies\\.",
        "id": "2132",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Group Policy Modification",
        "techniqueid": "T1484.001"
    },
    {
        "description": "Adversaries may establish persistence and elevate privileges by executing malicious content triggered by a Windows Management Instrumentation (WMI) event subscription. WMI can be used to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Examples of events that may be subscribed to are the wall clock time, user loging, or the computer's uptime.",
        "id": "2133",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Windows Management Instrumentation Event Subscription",
        "techniqueid": "T1546.003"
    },
    {
        "description": "Adversaries may forge credential materials that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies, tokens, or other materials to authenticate and authorize user access.",
        "id": "2134",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Forge Web Credentials",
        "techniqueid": "T1606"
    },
    {
        "description": "An adversary may forge SAML tokens with any permissions claims and lifetimes if they possess a valid SAML token-signing certificate. The default lifetime of a SAML token is one hour, but the validity period can be specified in the?NotOnOrAfter?value of the?conditions ...?element in a token. This value can be changed using the?AccessTokenLifetime?in a?LifetimeTokenPolicy. Forged SAML tokens enable adversaries to authenticate across services that use SAML 2.0 as an SSO (single sign-on) mechanism.",
        "id": "2135",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "SAML Tokens",
        "techniqueid": "T1606.002"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.",
        "id": "2136",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Hijack Execution Flow",
        "techniqueid": "T1574"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the binaries used by services. Adversaries may use flaws in the permissions of Windows services to replace the binary that is executed upon service start. These service processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.",
        "id": "2137",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Services File Permissions Weakness",
        "techniqueid": "T1574.010"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the binaries used by an installer. These processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.",
        "id": "2138",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Executable Installer File Permissions Weakness",
        "techniqueid": "T1574.005"
    },
    {
        "description": "Adversaries may leverage the COR_PROFILER environment variable to hijack the execution flow of programs that load the .NET CLR. The COR_PROFILER is a .NET Framework feature which allows developers to specify an unmanaged (or external of .NET) profiling DLL to be loaded into each .NET process that loads the Common Language Runtime (CLR). These profiliers are designed to monitor, troubleshoot, and debug managed code executed by the .NET CLR.",
        "id": "2139",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "COR_PROFILER",
        "techniqueid": "T1574.012"
    },
    {
        "description": "Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators.",
        "id": "2140",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Impair Defenses",
        "techniqueid": "T1562"
    },
    {
        "description": "Adversaries may disable security tools to avoid possible detection of their tools and activities. This can take the form of killing security software or event logging processes, deleting Registry keys so that tools do not start at run time, or other methods to interfere with security tools scanning or reporting information.",
        "id": "2141",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Disable or Modify Tools",
        "techniqueid": "T1562.001"
    },
    {
        "description": "Adversaries may disable Windows event logging to limit data that can be leveraged for detections and audits. Windows event logs record user and system activity such as login attempts, process creation, and much more. This data is used by security tools and analysts to generate detections.",
        "id": "2142",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Disable Windows Event Logging",
        "techniqueid": "T1562.002"
    },
    {
        "description": "Adversaries may disable or modify system firewalls in order to bypass controls limiting network usage. Changes could be disabling the entire mechanism as well as adding, deleting, or modifying particular rules. This can be done numerous ways depending on the operating system, including via command-line, editing Windows Registry keys, and Windows Control Panel.",
        "id": "2143",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Disable or Modify System Firewall",
        "techniqueid": "T1562.004"
    },
    {
        "description": "An adversary may attempt to block indicators or events typically captured by sensors from being gathered and analyzed. This could include maliciously redirecting or even disabling host-based sensors, such as Event Tracing for Windows (ETW), by tampering settings that control the collection and flow of event telemetry. These settings may be stored on the system in configuration files and/or in the Registry as well as being accessible via administrative utilities such as?PowerShell?or?Windows Management Instrumentation.",
        "id": "2144",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Indicator Blocking",
        "techniqueid": "T1562.006"
    },
    {
        "description": "Adversaries may disable or modify a firewall within a cloud environment to bypass controls that limit access to cloud resources. Cloud firewalls are separate from system firewalls that are described in?Disable or Modify System Firewall.",
        "id": "2145",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Disable or Modify Cloud Firewall",
        "techniqueid": "T1562.007"
    },
    {
        "description": "An adversary may disable cloud logging capabilities and integrations to limit what data is collected on their activities and avoid detection.",
        "id": "2146",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Disable Cloud Logs",
        "techniqueid": "T1562.008"
    },
    {
        "description": "Adversaries can take advantage of security vulnerabilities and inherent functionality in browser software to change content, modify behavior, and intercept information as part of various man in the browser techniques.",
        "id": "2147",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Man in the Browser",
        "techniqueid": "T1185"
    },
    {
        "description": "An adversary may attempt to modify a cloud account's compute service infrastructure to evade defenses. A modification to the compute service infrastructure can include the creation, deletion, or modification of one or more components such as compute instances, virtual machines, and snapshots.",
        "id": "2148",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Modify Cloud Compute Infrastructure",
        "techniqueid": "T1578"
    },
    {
        "description": "An adversary may create a new instance or virtual machine (VM) within the compute service of a cloud account to evade defenses. Creating a new instance may allow an adversary to bypass firewall rules and permissions that exist on instances currently residing within an account. An adversary may?Create Snapshot?of one or more volumes in an account, create a new instance, mount the snapshots, and then apply a less restrictive security policy to collect?Data from Local System?or for?Remote Data Staging.",
        "id": "2149",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Create Cloud Instance",
        "techniqueid": "T1578.002"
    },
    {
        "description": "An adversary may create a snapshot or data backup within a cloud account to evade defenses. A snapshot is a point-in-time copy of an existing cloud compute component such as a virtual machine (VM), virtual hard drive, or volume. An adversary may leverage permissions to create a snapshot in order to bypass restrictions that prevent access to existing compute service infrastructure, unlike in?Revert Cloud Instance?where an adversary may revert to a snapshot to evade detection and remove evidence of their presence.",
        "id": "2150",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Create Snapshot",
        "techniqueid": "T1578.001"
    },
    {
        "description": "An adversary may delete a cloud instance after they have performed malicious activities in an attempt to evade detection and remove evidence of their presence. Deleting an instance or virtual machine can remove valuable forensic artifacts and other evidence of suspicious behavior if the instance is not recoverable.",
        "id": "2151",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Delete Cloud Instance",
        "techniqueid": "T1578.003"
    },
    {
        "description": "Adversaries may take control of preexisting sessions with remote services to move laterally in an environment. Users may use valid credentials to log into a service specifically designed to accept remote connections, such as telnet, SSH, and RDP. When a user logs into a service, a session will be established that will allow them to maintain a continuous interaction with that service.",
        "id": "2152",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Remote Service Session Hijacking",
        "techniqueid": "T1563"
    },
    {
        "description": "Adversaries may hijack a legitimate user��s remote desktop session to move laterally within an environment. Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).",
        "id": "2153",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "RDP Hijacking",
        "techniqueid": "T1563.002"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into a service specifically designed to accept remote connections, such as telnet, SSH, and VNC. The adversary may then perform actions as the logged-on user.",
        "id": "2154",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Remote Services",
        "techniqueid": "T1021"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.",
        "id": "2155",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Remote Desktop Protocol",
        "techniqueid": "T1021.001"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into remote machines using Secure Shell (SSH). The adversary may then perform actions as the logged-on user.",
        "id": "2156",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "SSH",
        "techniqueid": "T1021.004"
    },
    {
        "description": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically requires being a member of an admin or otherwise privileged group on the remote system.",
        "id": "2157",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Scheduled Task/Job",
        "techniqueid": "T1053"
    },
    {
        "description": "Adversaries may abuse the?at.exe?utility to perform task scheduling for initial or recurring execution of malicious code. The?at?utility exists as an executable within Windows for scheduling tasks at a specified time and date. Using?at?requires that the Task Scheduler service be running, and the user to be logged on as a member of the local Administrators group.",
        "id": "2158",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "At (Windows)",
        "techniqueid": "T1053.002"
    },
    {
        "description": "Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The?schtasks?can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task.",
        "id": "2159",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Scheduled Task",
        "techniqueid": "T1053.005"
    },
    {
        "description": "Adversaries may abuse the?at?utility to perform task scheduling for initial or recurring execution of malicious code. The?at?command within Linux operating systems enables administrators to schedule tasks.",
        "id": "2160",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "At (Linux)",
        "techniqueid": "T1053.001"
    },
    {
        "description": "Adversaries may abuse the?Launchd?daemon to perform task scheduling for initial or recurring execution of malicious code. The?launchd?daemon, native to macOS, is responsible for loading and maintaining services within the operating system. This process loads the parameters for each launch-on-demand system-level daemon from the property list (plist) files found in?/System/Library/LaunchDaemons?and?/Library/LaunchDaemons?. These LaunchDaemons have property list files which point to the executables that will be launched .",
        "id": "2161",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Launchd",
        "techniqueid": "T1053.004"
    },
    {
        "description": "Adversaries may abuse the?cron?utility to perform task scheduling for initial or recurring execution of malicious code. The?cron?utility is a time-based job scheduler for Unix-like operating systems. The?crontab?file contains the schedule of cron entries to be run and the specified times for execution. Any?crontab?files are stored in operating system-specific file paths.",
        "id": "2162",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Cron",
        "techniqueid": "T1053.003"
    },
    {
        "description": "Adversaries may abuse systemd timers to perform task scheduling for initial or recurring execution of malicious code. Systemd timers are unit files with file extension?.timer?that control services. Timers can be set to run on a calendar event or after a time span relative to a starting point. They can be used as an alternative to?Cron?in Linux environments.",
        "id": "2163",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Systemd Timers",
        "techniqueid": "T1053.006"
    },
    {
        "description": "Adversaries may stop or disable services on a system to render those services unavailable to legitimate users. Stopping critical services can inhibit or stop response to an incident or aid in the adversary's overall objectives to cause damage to the environment.",
        "id": "2164",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Service Stop",
        "techniqueid": "T1489"
    },
    {
        "description": "Adversaries may gain access to and use third-party software suites installed within an enterprise network, such as administration, monitoring, and deployment systems, to move laterally through the network. Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, VNC, HBSS, Altiris, etc.).",
        "id": "2165",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Software Deployment Tools",
        "techniqueid": "T1072"
    },
    {
        "description": "Adversaries may abuse system services or daemons to execute commands or programs. Adversaries can execute malicious content by interacting with or creating services. Many services are set to run at boot, which can aid in achieving persistence (Create or Modify System Process), but adversaries can also abuse services for one-time or temporary execution.",
        "id": "2166",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "System Services",
        "techniqueid": "T1569"
    },
    {
        "description": "Adversaries may abuse launchctl to execute commands or programs. Launchctl controls the macOS launchd process, which handles things like?Launch Agents and?Launch Daemons, but can execute other commands or programs itself. Launchctl supports taking subcommands on the command-line, interactively, or even redirected from standard input.",
        "id": "2167",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Launchctl",
        "techniqueid": "T1569.001"
    },
    {
        "description": "Adversaries may exfiltrate data by transferring the data, including backups of cloud environments, to another cloud account they control on the same service to avoid typical file transfers/downloads and network-based exfiltration detection.",
        "id": "2168",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Transfer Data to Cloud Account",
        "techniqueid": "T1537"
    },
    {
        "description": "Adversaries may \"pass the ticket\" using stolen Kerberos tickets to move laterally within an environment, bypassing normal system access controls. Pass the ticket (PtT) is a method of authenticating to a system using Kerberos tickets without having access to an account's password. Kerberos authentication can be used as the first step to lateral movement to a remote system.",
        "id": "2169",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Pass the Ticket",
        "techniqueid": "T1550.003"
    },
    {
        "description": "Adversaries may obtain and abuse credentials of a cloud account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. In some cases, cloud accounts may be federated with traditional identity management system, such as Window Active Directory.",
        "id": "2170",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Cloud Accounts",
        "techniqueid": "T1078.004"
    },
    {
        "description": "Adversaries may abuse Windows Management Instrumentation (WMI) to achieve execution. WMI is a Windows administration feature that provides a uniform environment for local and remote access to Windows system components. It relies on the WMI service for local and remote access and the server message block (SMB) and Remote Procedure Call Service (RPCS) for remote access. RPCS operates over port 135.",
        "id": "2171",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Windows Management Instrumentation",
        "techniqueid": "T1047"
    },
    {
        "description": "Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk. An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.",
        "id": "2172",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Abuse Elevation Control Mechanism",
        "techniqueid": "T1548"
    },
    {
        "description": "Adversaries may perform sudo caching and/or use the suoders file to elevate privileges. Adversaries may do this to execute commands as other users or spawn processes with higher privileges.",
        "id": "2173",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Sudo and Sudo Caching",
        "techniqueid": "T1548.003"
    },
    {
        "description": "Adversaries may modify the SSH?authorized_keys?file to maintain persistence on a victim host. Linux distributions and macOS commonly use key-based authentication to secure the authentication process of SSH sessions for remote management. The?authorized_keys?file in SSH specifies the SSH keys that can be used for logging into the user account for which the file is configured. This file is usually found in the user's home directory under?<user-home>/.ssh/authorized_keys. Users may edit the system��s SSH config file to modify the directives PubkeyAuthentication and RSAAuthentication to the value \"yes\" to ensure public key and RSA authentication are enabled. The SSH config file is usually located under?/etc/ssh/sshd_config.",
        "id": "2174",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "SSH Authorized Keys",
        "techniqueid": "T1098.004"
    },
    {
        "description": "Adversaries may abuse time providers to execute DLLs when the system boots. The Windows Time service (W32Time) enables time synchronization across and within domains. W32Time time providers are responsible for retrieving time stamps from hardware/network resources and outputting these values to other network clients.",
        "id": "2175",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Time Providers",
        "techniqueid": "T1547.003"
    },
    {
        "description": "Adversaries may modify plist files to run a program during system boot or user login. Property list (plist) files contain all of the information that macOS and OS X uses to configure applications and services. These files are UTF-8 encoded and formatted like XML documents via a series of keys surrounded by < >. They detail when programs should execute, file paths to the executables, program arguments, required OS permissions, and many others. plists are located in certain locations depending on their purpose such as?/Library/Preferences?(which execute with elevated privileges) and?~/Library/Preferences?(which execute with a user's privileges).",
        "id": "2176",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Plist Modification",
        "techniqueid": "T1547.011"
    },
    {
        "description": "Adversaries may use scripts automatically executed at boot or logon initialization to establish persistence. Initialization scripts can be used to perform administrative functions, which may often execute other programs or send information to an internal logging server. These scripts can vary based on operating system and whether applied locally or remotely.",
        "id": "2177",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Boot or Logon Initialization Scripts",
        "techniqueid": "T1037"
    },
    {
        "description": "Adversaries may use macOS logon scripts automatically executed at logon initialization to establish persistence. macOS allows logon scripts (known as login hooks) to be executed whenever a specific user logs into a system. A login hook tells Mac OS X to execute a certain script when a user logs in, but unlike?Startup Items, a login hook executes as the elevated root user.",
        "id": "2178",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Logon Script (Mac)",
        "techniqueid": "T1037.002"
    },
    {
        "description": "Adversaries may use network logon scripts automatically executed at logon initialization to establish persistence. Network logon scripts can be assigned using Active Directory or Group Policy Objects. These logon scripts run with the privileges of the user they are assigned to. Depending on the systems within the network, initializing one of these scripts could apply to more than one or potentially all systems.",
        "id": "2179",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Network Logon Script",
        "techniqueid": "T1037.003"
    },
    {
        "description": "Adversaries may use rc.common automatically executed at boot initialization to establish persistence. During the boot process, macOS executes?source /etc/rc.common, which is a shell script containing various utility functions. This file also defines routines for processing command-line arguments and for gathering system settings and is thus recommended to include in the start of Startup Item Scripts . In macOS and OS X, this is now a deprecated mechanism in favor of?Launch Agent?and?Launch Daemon?but is currently still used.",
        "id": "2180",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Rc.common",
        "techniqueid": "T1037.004"
    },
    {
        "description": "Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services. On macOS, launchd processes known as?Launch Daemon?and?Launch Agent?are run to finish system initialization and load user specific parameters.",
        "id": "2181",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Create or Modify System Process",
        "techniqueid": "T1543"
    },
    {
        "description": "Adversaries may create or modify systemd services to repeatedly execute malicious payloads as part of persistence. The systemd service manager is commonly used for managing background daemon processes (also known as services) and other system resources. Systemd is the default initialization (init) system on many Linux distributions starting with Debian 8, Ubuntu 15.04, CentOS 7, RHEL 7, Fedora 15, and replaces legacy init systems including SysVinit and Upstart while remaining backwards compatible with the aforementioned init systems.",
        "id": "2182",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Systemd Service",
        "techniqueid": "T1543.002"
    },
    {
        "description": "Adversaries may access data objects from improperly secured cloud storage.",
        "id": "2183",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Data from Cloud Storage Object",
        "techniqueid": "T1530"
    },
    {
        "description": "Adversaries may insert, delete, or manipulate data in order to manipulate external outcomes or hide activity. By manipulating data, adversaries may attempt to affect a business process, organizational understanding, or decision making.",
        "id": "2184",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Data Manipulation",
        "techniqueid": "T1565"
    },
    {
        "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity. By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making.",
        "id": "2185",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Stored Data Manipulation",
        "techniqueid": "T1565.001"
    },
    {
        "description": "Adversaries may modify systems in order to manipulate the data as it is accessed and displayed to an end user. By manipulating runtime data, adversaries may attempt to affect a business process, organizational understanding, and decision making.",
        "id": "2186",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Runtime Data Manipulation",
        "techniqueid": "T1565.003"
    },
    {
        "description": "Adversaries may establish persistence by executing malicious content triggered by a user��s shell.?~/.bash_profile?and?~/.bashrc?are shell scripts that contain shell commands. These files are executed in a user's context when a new shell opens or when a user logs in so that their environment is set correctly.",
        "id": "2187",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": ".bash_profile and .bashrc",
        "techniqueid": "T1546.004"
    },
    {
        "description": "Adversaries may gain persistence and elevate privileges by executing malicious content triggered by PowerShell profiles. A PowerShell profile (profile.ps1) is a script that runs when?PowerShell?starts and can be used as a logon script to customize user environments.",
        "id": "2188",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "PowerShell Profile",
        "techniqueid": "T1546.013"
    },
    {
        "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).",
        "id": "2189",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "File and Directory Permissions Modification",
        "techniqueid": "T1222"
    },
    {
        "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).",
        "id": "2190",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Windows File and Directory Permissions Modification",
        "techniqueid": "T1222.001"
    },
    {
        "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).",
        "id": "2191",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Linux and Mac File and Directory Permissions Modification",
        "techniqueid": "T1222.002"
    },
    {
        "description": "Adversaries may use NTFS file attributes to hide their malicious data in order to evade detection. Every New Technology File System (NTFS) formatted partition contains a Master File Table (MFT) that maintains a record for every file/directory on the partition. Within MFT entries are file attributes, such as Extended Attributes (EA) and Data [known as Alternate Data Streams (ADSs) when more than one Data attribute is present], that can be used to store arbitrary data (and even complete files).",
        "id": "2192",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "NTFS File Attributes",
        "techniqueid": "T1564.004"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.",
        "id": "2193",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Hijack Execution Flow",
        "techniqueid": "T1574"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking vulnerable file path references. Adversaries can take advantage of paths that lack surrounding quotations by placing an executable in a higher level directory within the path, so that Windows will choose the adversary's executable to launch.",
        "id": "2194",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Path Interception by Unquoted Path",
        "techniqueid": "T1574.009"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking environment variables used to load libraries. Adversaries may place a program in an earlier entry in the list of directories stored in the PATH environment variable, which Windows will then execute when it searches sequentially through that PATH listing in search of the binary that was called from a script or the command line.",
        "id": "2195",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Path Interception by PATH Environment Variable",
        "techniqueid": "T1574.007"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the search order used to load other programs. Because some programs do not call other programs using the full path, adversaries may place their own file in the directory where the calling program is located, causing the operating system to launch their malicious software at the request of the calling program.",
        "id": "2196",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Path Interception by Search Order Hijacking",
        "techniqueid": "T1574.008"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the library manifest used to load DLLs. Adversaries may take advantage of vague references in the library manifest of a program by replacing a legitimate library with a malicious one, causing the operating system to load their malicious library when it is called for by the victim program.",
        "id": "2197",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "DLL Side-Loading",
        "techniqueid": "T1574.002"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking ambiguous paths used to load libraries. Adversaries may plant trojan dynamic libraries, in a directory that will be searched by the operating system before the legitimate library specified by the victim program, so that their malicious library will be loaded into the victim program instead. MacOS and OS X use a common method to look for required dynamic libraries (dylib) to load into a program based on search paths.",
        "id": "2198",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Dylib Hijacking",
        "techniqueid": "T1574.004"
    },
    {
        "description": "Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators.",
        "id": "2199",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Impair Defenses",
        "techniqueid": "T1562"
    },
    {
        "description": "Adversaries may disable security tools to avoid possible detection of their tools and activities. This can take the form of killing security software or event logging processes, deleting Registry keys so that tools do not start at run time, or other methods to interfere with security tools scanning or reporting information.",
        "id": "2200",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Disable or Modify Tools",
        "techniqueid": "T1562.001"
    },
    {
        "description": "Adversaries may disable Windows event logging to limit data that can be leveraged for detections and audits. Windows event logs record user and system activity such as login attempts, process creation, and much more. This data is used by security tools and analysts to generate detections.",
        "id": "2201",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Disable Windows Event Logging",
        "techniqueid": "T1562.002"
    },
    {
        "description": "Adversaries may disable or modify system firewalls in order to bypass controls limiting network usage. Changes could be disabling the entire mechanism as well as adding, deleting, or modifying particular rules. This can be done numerous ways depending on the operating system, including via command-line, editing Windows Registry keys, and Windows Control Panel.",
        "id": "2202",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Disable or Modify System Firewall",
        "techniqueid": "T1562.004"
    },
    {
        "description": "An adversary may attempt to block indicators or events typically captured by sensors from being gathered and analyzed. This could include maliciously redirecting or even disabling host-based sensors, such as Event Tracing for Windows (ETW), by tampering settings that control the collection and flow of event telemetry. These settings may be stored on the system in configuration files and/or in the Registry as well as being accessible via administrative utilities such as?PowerShell?or?Windows Management Instrumentation.",
        "id": "2203",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Indicator Blocking",
        "techniqueid": "T1562.006"
    },
    {
        "description": "Adversaries may delete or alter generated artifacts on a host system, including logs or captured files such as quarantined malware. Locations and format of logs are platform or product-specific, however standard operating system logs are captured as Windows events or Linux/macOS files such as?Bash History?and /var/log/*.",
        "id": "2204",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Indicator Removal on Host",
        "techniqueid": "T1070"
    },
    {
        "description": "Adversaries may clear Windows Event Logs to hide the activity of an intrusion. Windows Event Logs are a record of a computer's alerts and notifications. There are three system-defined sources of events: System, Application, and Security, with five event types: Error, Warning, Information, Success Audit, and Failure Audit.",
        "id": "2205",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Clear Windows Event Logs",
        "techniqueid": "T1070.001"
    },
    {
        "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the?/var/log/?directory. Subfolders in this directory categorize logs by their related functions, such as:",
        "id": "2206",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Clear Linux or Mac System Logs",
        "techniqueid": "T1070.002"
    },
    {
        "description": "In addition to clearing system logs, an adversary may clear the command history of a compromised account to conceal the actions undertaken during an intrusion. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done.",
        "id": "2207",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Clear Command History",
        "techniqueid": "T1070.003"
    },
    {
        "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.",
        "id": "2208",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Masquerading",
        "techniqueid": "T1036"
    },
    {
        "description": "Adversaries may rename legitimate system utilities to try to evade security mechanisms concerning the usage of those utilities. Security monitoring and control mechanisms may be in place for system utilities adversaries are capable of abusing. It may be possible to bypass those security mechanisms by renaming the utility prior to utilization (ex: rename?rundll32.exe). An alternative case occurs when a legitimate utility is copied or moved to a different directory and renamed to avoid detections based on system utilities executing from non-standard paths.",
        "id": "2209",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Rename System Utilities",
        "techniqueid": "T1036.003"
    },
    {
        "description": "Adversaries may match or approximate the name or location of legitimate files when naming/placing their files. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). Alternatively, the filename given may be a close approximation of legitimate programs or something innocuous.",
        "id": "2210",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Match Legitimate Name or Location",
        "techniqueid": "T1036.005"
    },
    {
        "description": "Adversaries may inject malicious code into processes via the /proc filesystem in order to evade process-based defenses as well as possibly elevate privileges. Proc memory injection is a method of executing arbitrary code in the address space of a separate live process.",
        "id": "2211",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Proc Memory",
        "techniqueid": "T1055.009"
    },
    {
        "description": "Adversaries may hijack a legitimate user's SSH session to move laterally within an environment. Secure Shell (SSH) is a standard means of remote access on Linux and macOS systems. It allows a user to connect to another system via an encrypted tunnel, commonly authenticating through a password, certificate or the use of an asymmetric encryption key pair.",
        "id": "2212",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "SSH Hijacking",
        "techniqueid": "T1563.001"
    },
    {
        "description": "Adversaries may abuse systemd timers to perform task scheduling for initial or recurring execution of malicious code. Systemd timers are unit files with file extension?.timer?that control services. Timers can be set to run on a calendar event or after a time span relative to a starting point. They can be used as an alternative to?Cron?in Linux environments.",
        "id": "2213",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Systemd Timers",
        "techniqueid": "T1053.006"
    },
    {
        "description": "Adversaries may stop or disable services on a system to render those services unavailable to legitimate users. Stopping critical services can inhibit or stop response to an incident or aid in the adversary's overall objectives to cause damage to the environment.",
        "id": "2214",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Service Stop",
        "techniqueid": "T1489"
    },
    {
        "description": "Adversaries may abuse control.exe to proxy execution of malicious payloads. The Windows Control Panel process binary (control.exe) handles execution of Control Panel items, which are utilities that allow users to view and adjust computer settings.",
        "id": "2215",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Control Panel",
        "techniqueid": "T1218.002"
    },
    {
        "description": "Adversaries may tamper with SIP and trust provider components to mislead the operating system and application control tools when conducting signature validation checks. In user mode, Windows Authenticode digital signatures are used to verify a file's origin and integrity, variables that may be used to establish trust in signed code (ex: a driver with a valid Microsoft signature may be handled as safe). The signature validation process is handled via the WinVerifyTrust application programming interface (API) function, which accepts an inquiry and coordinates with the appropriate trust provider, which is responsible for validating parameters of a signature.",
        "id": "2216",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "SIP and Trust Provider Hijacking",
        "techniqueid": "T1553.003"
    },
    {
        "description": "Adversaries may abuse system services or daemons to execute commands or programs. Adversaries can execute malicious content by interacting with or creating services. Many services are set to run at boot, which can aid in achieving persistence (Create or Modify System Process), but adversaries can also abuse services for one-time or temporary execution.",
        "id": "2217",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "System Services",
        "techniqueid": "T1569"
    },
    {
        "description": "Adversaries may abuse the Windows service control manager to execute malicious commands or payloads. The Windows service control manager (services.exe) is an interface to manage and manipulate services. The service control manager is accessible to users via GUI components as well as system utilities such as?sc.exe?and?Net.",
        "id": "2218",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Service Execution",
        "techniqueid": "T1569.002"
    },
    {
        "description": "Adversaries may deliver payloads to remote systems by adding content to shared storage locations, such as network drives or internal code repositories. Content stored on network drives or in other shared locations may be tainted by adding malicious programs, scripts, or exploit code to otherwise valid files. Once a user opens the shared tainted content, the malicious portion can be executed to run the adversary's code on a remote system. Adversaries may use tainted shared content to move laterally.",
        "id": "2219",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Taint Shared Content",
        "techniqueid": "T1080"
    },
    {
        "description": "Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g.?Bash History), operating system or application-specific repositories (e.g.?Credentials in Registry), or other specialized files/artifacts (e.g.?Private Keys).",
        "id": "2220",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Unsecured Credentials",
        "techniqueid": "T1552"
    },
    {
        "description": "Adversaries may search local file systems and remote file shares for files containing insecurely stored credentials. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.",
        "id": "2221",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Credentials In Files",
        "techniqueid": "T1552.001"
    },
    {
        "description": "Adversaries may search for private key certificate files on compromised systems for insecurely stored credentials. Private cryptographic keys and certificates are used for authentication, encryption/decryption, and digital signatures. Common key and certificate file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, .pfx, .cer, .p7b, .asc.",
        "id": "2222",
        "mitigation": "Restrict File and Directory Permissions",
        "mitigationid": "M1022",
        "technique": "Private Keys",
        "techniqueid": "T1552.004"
    },
    {
        "description": "Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk. An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.",
        "id": "2223",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Abuse Elevation Control Mechanism",
        "techniqueid": "T1548"
    },
    {
        "description": "Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.",
        "id": "2224",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Bypass User Account Control",
        "techniqueid": "T1548.002"
    },
    {
        "description": "Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.",
        "id": "2225",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Access Token Manipulation",
        "techniqueid": "T1134"
    },
    {
        "description": "Adversaries may duplicate then impersonate another user's token to escalate privileges and bypass access controls. An adversary can create a new access token that duplicates an existing token using?DuplicateToken(Ex). The token can then be used with?ImpersonateLoggedOnUser?to allow the calling thread to impersonate a logged on user's security context, or with?SetThreadToken?to assign the impersonated token to a thread.",
        "id": "2226",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Token Impersonation/Theft",
        "techniqueid": "T1134.001"
    },
    {
        "description": "Adversaries may create a new process with a duplicated token to escalate privileges and bypass access controls. An adversary can duplicate a desired access token with?DuplicateToken(Ex)?and use it with?CreateProcessWithTokenW?to create a new process running under the security context of the impersonated user. This is useful for creating a new process under the security context of a different user.",
        "id": "2227",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Create Process with Token",
        "techniqueid": "T1134.002"
    },
    {
        "description": "Adversaries may make and impersonate tokens to escalate privileges and bypass access controls. If an adversary has a username and password but the user is not logged onto the system, the adversary can then create a logon session for the user using the?LogonUser?function. The function will return a copy of the new session's access token and the adversary can use?SetThreadToken?to assign the token to a thread.",
        "id": "2228",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Make and Impersonate Token",
        "techniqueid": "T1134.003"
    },
    {
        "description": "Adversaries may modify the kernel to automatically execute programs on system boot. Loadable Kernel Modules (LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. ?",
        "id": "2229",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Kernel Modules and Extensions",
        "techniqueid": "T1547.006"
    },
    {
        "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of?Unix Shell?while Windows installations include the?Windows Command Shell?and?PowerShell.",
        "id": "2230",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Command and Scripting Interpreter",
        "techniqueid": "T1059"
    },
    {
        "description": "Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the?Start-Process?cmdlet which can be used to run an executable and the?Invoke-Command?cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).",
        "id": "2231",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "PowerShell",
        "techniqueid": "T1059.001"
    },
    {
        "description": "Adversaries may abuse scripting or built-in command line interpreters (CLI) on network devices to execute malicious command and payloads. The CLI is the primary means through which users and administrators interact with the device in order to view system information, modify device operations, or perform diagnostic and administrative functions. CLIs typically contain various permission levels required for different commands.",
        "id": "2232",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Network Device CLI",
        "techniqueid": "T1059.008"
    },
    {
        "description": "Adversaries may create or modify systemd services to repeatedly execute malicious payloads as part of persistence. The systemd service manager is commonly used for managing background daemon processes (also known as services) and other system resources. Systemd is the default initialization (init) system on many Linux distributions starting with Debian 8, Ubuntu 15.04, CentOS 7, RHEL 7, Fedora 15, and replaces legacy init systems including SysVinit and Upstart while remaining backwards compatible with the aforementioned init systems.",
        "id": "2233",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Systemd Service",
        "techniqueid": "T1543.002"
    },
    {
        "description": "Adversaries may modify the configuration settings of a domain to evade defenses and/or escalate privileges in domain environments. Domains provide a centralized means of managing how computer resources (ex: computers, user accounts) can act, and interact with each other, on a network. The policy of the domain also includes configuration settings that may apply between domains in a multi-domain/forest environment. Modifications to domain settings may include altering domain Group Policy Objects (GPOs) or changing trust settings for domains, including federation trusts.",
        "id": "2234",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Domain Policy Modification",
        "techniqueid": "T1484"
    },
    {
        "description": "Adversaries may add new domain trusts or modify the properties of existing domain trusts to evade defenses and/or elevate privileges. Domain trust details, such as whether or not a domain is federated, allow authentication and authorization properties to apply between domains for the purpose of accessing shared resources. These trust objects may include accounts, credentials, and other authentication material applied to servers, tokens, and domains.",
        "id": "2235",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Domain Trust Modification",
        "techniqueid": "T1484.002"
    },
    {
        "description": "Adversaries may attempt to take advantage of a weakness in an Internet-facing computer or program using software, data, or commands in order to cause unintended or unanticipated behavior. The weakness in the system can be a bug, a glitch, or a design vulnerability. These applications are often websites, but can include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other applications with Internet accessible open sockets, such as web servers and related services. Depending on the flaw being exploited this may include?Exploitation for Defense Evasion.",
        "id": "2236",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Exploit Public-Facing Application",
        "techniqueid": "T1190"
    },
    {
        "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.?A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.",
        "id": "2237",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Exploitation of Remote Services",
        "techniqueid": "T1210"
    },
    {
        "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).",
        "id": "2238",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "File and Directory Permissions Modification",
        "techniqueid": "T1222"
    },
    {
        "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).",
        "id": "2239",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Windows File and Directory Permissions Modification",
        "techniqueid": "T1222.001"
    },
    {
        "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).",
        "id": "2240",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Linux and Mac File and Directory Permissions Modification",
        "techniqueid": "T1222.002"
    },
    {
        "description": "Adversaries may overwrite or corrupt the flash memory contents of system BIOS or other firmware in devices attached to a system in order to render them inoperable or unable to boot. Firmware is software that is loaded and executed from non-volatile memory on hardware devices in order to initialize and manage device functionality. These devices could include the motherboard, hard drive, or video cards.",
        "id": "2241",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Firmware Corruption",
        "techniqueid": "T1495"
    },
    {
        "description": "Adversaries may forge credential materials that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies, tokens, or other materials to authenticate and authorize user access.",
        "id": "2242",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Forge Web Credentials",
        "techniqueid": "T1606"
    },
    {
        "description": "An adversary may forge SAML tokens with any permissions claims and lifetimes if they possess a valid SAML token-signing certificate. The default lifetime of a SAML token is one hour, but the validity period can be specified in the?NotOnOrAfter?value of the?conditions ...?element in a token. This value can be changed using the?AccessTokenLifetime?in a?LifetimeTokenPolicy. Forged SAML tokens enable adversaries to authenticate across services that use SAML 2.0 as an SSO (single sign-on) mechanism.",
        "id": "2243",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "SAML Tokens",
        "techniqueid": "T1606.002"
    },
    {
        "description": "Adversaries may implant cloud container images with malicious code to establish persistence. Amazon Web Service (AWS) Amazon Machine Images (AMI), Google Cloud Platform (GCP) Images, and Azure Images as well as popular container runtimes such as Docker can be implanted or backdoored. Depending on how the infrastructure is provisioned, this could provide persistent access if the infrastructure provisioning tool is instructed to always use the latest image.",
        "id": "2244",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Implant Container Image",
        "techniqueid": "T1525"
    },
    {
        "description": "Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows or pluggable authentication modules (PAM) on Unix-based systems, responsible for gathering, storing, and validating credentials.",
        "id": "2245",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Modify Authentication Process",
        "techniqueid": "T1556"
    },
    {
        "description": "Adversaries may patch the authentication process on a domain controller to bypass the typical authentication mechanisms and enable access to accounts.",
        "id": "2246",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Domain Controller Authentication",
        "techniqueid": "T1556.001"
    },
    {
        "description": "Adversaries may modify pluggable authentication modules (PAM) to access user credentials or enable otherwise unwarranted access to accounts. PAM is a modular system of configuration files, libraries, and executable files which guide authentication for many services. The most common authentication module is?pam_unix.so, which retrieves, sets, and verifies account authentication information in?/etc/passwd?and?/etc/shadow.",
        "id": "2247",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Pluggable Authentication Modules",
        "techniqueid": "T1556.003"
    },
    {
        "description": "Adversaries may use?Patch System Image?to hard code a password in the operating system, thus bypassing of native authentication mechanisms for local accounts on network devices.",
        "id": "2248",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Network Device Authentication",
        "techniqueid": "T1556.004"
    },
    {
        "description": "Adversaries may make changes to the operating system of embedded network devices to weaken defenses and provide new capabilities for themselves. On such devices, the operating systems are typically monolithic and most of the device functionality and capabilities are contained within a single file.",
        "id": "2249",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Modify System Image",
        "techniqueid": "T1601"
    },
    {
        "description": "Adversaries may modify the operating system of a network device to introduce new capabilities or weaken existing defenses. Some network devices are built with a monolithic architecture, where the entire operating system and most of the functionality of the device is contained within a single file. Adversaries may change this file in storage, to be loaded in a future boot, or in memory during runtime.",
        "id": "2250",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Patch System Image",
        "techniqueid": "T1601.001"
    },
    {
        "description": "Adversaries may install an older version of the operating system of a network device to weaken security. Older operating system versions on network devices often have weaker encryption ciphers and, in general, fewer/less updated defensive features.",
        "id": "2251",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Downgrade System Image",
        "techniqueid": "T1601.002"
    },
    {
        "description": "Adversaries may bridge network boundaries by compromising perimeter network devices. Breaching these devices may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.",
        "id": "2252",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Network Boundary Bridging",
        "techniqueid": "T1599"
    },
    {
        "description": "Adversaries may bridge network boundaries by modifying a network device��s Network Address Translation (NAT) configuration. Malicious modifications to NAT may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.",
        "id": "2253",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Network Address Translation Traversal",
        "techniqueid": "T1599.001"
    },
    {
        "description": "Adversaries may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password, from the operating system and software. Credentials can then be used to perform?Lateral Movement?and access restricted information.",
        "id": "2254",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "OS Credential Dumping",
        "techniqueid": "T1003"
    },
    {
        "description": "Adversaries may attempt to access credentials and other sensitive information by abusing a Windows Domain Controller's application programming interface (API) to simulate the replication process from a remote domain controller using a technique called DCSync.",
        "id": "2255",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "DCSync",
        "techniqueid": "T1003.006"
    },
    {
        "description": "Adversaries may attempt to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS). After a user logs on, the system generates and stores a variety of credential materials in LSASS process memory. These credential materials can be harvested by an administrative user or SYSTEM and used to conduct?Lateral Movement?using?Use Alternate Authentication Material.",
        "id": "2256",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "LSASS Memory",
        "techniqueid": "T1003.001"
    },
    {
        "description": "Adversaries may attempt to extract credential material from the Security Account Manager (SAM) database either through in-memory techniques or through the Windows Registry where the SAM database is stored. The SAM is a database file that contains local accounts for the host, typically those found with the?net user?command. Enumerating the SAM database requires SYSTEM level access.",
        "id": "2257",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Security Account Manager",
        "techniqueid": "T1003.002"
    },
    {
        "description": "Adversaries may gather credentials from information stored in the Proc filesystem or?/proc. The Proc filesystem on Linux contains a great deal of information regarding the state of the running operating system. Processes running with root privileges can use this facility to scrape live memory of other running programs. If any of these programs store passwords in clear text or password hashes in memory, these values can then be harvested for either usage or brute force attacks, respectively.",
        "id": "2258",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Proc Filesystem",
        "techniqueid": "T1003.007"
    },
    {
        "description": "Adversaries may attempt to dump the contents of?/etc/passwd?and?/etc/shadow?to enable offline password cracking. Most modern Linux operating systems use a combination of?/etc/passwd?and?/etc/shadow?to store user account information including password hashes in?/etc/shadow. By default,?/etc/shadow?is only readable by the root user.",
        "id": "2259",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "/etc/passwd and /etc/shadow",
        "techniqueid": "T1003.008"
    },
    {
        "description": "Adversaries may attempt to access cached domain credentials used to allow authentication to occur in the event a domain controller is unavailable.",
        "id": "2260",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Cached Domain Credentials",
        "techniqueid": "T1003.005"
    },
    {
        "description": "Adversaries with SYSTEM access to a host may attempt to access Local Security Authority (LSA) secrets, which can contain a variety of different credential materials, such as credentials for service accounts. LSA secrets are stored in the registry at?HKEY_LOCAL_MACHINE\\SECURITY\\Policy\\Secrets. LSA secrets can also be dumped from memory.",
        "id": "2261",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "LSA Secrets",
        "techniqueid": "T1003.004"
    },
    {
        "description": "Adversaries may attempt to access or create a copy of the Active Directory domain database in order to steal credential information, as well as obtain other information about domain members such as devices, users, and access rights. By default, the NTDS file (NTDS.dit) is located in?%SystemRoot%\\NTDS\\Ntds.dit?of a domain controller.",
        "id": "2262",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "NTDS",
        "techniqueid": "T1003.003"
    },
    {
        "description": "Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control.",
        "id": "2263",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Pre-OS Boot",
        "techniqueid": "T1542"
    },
    {
        "description": "Adversaries may modify system firmware to persist on systems.The BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer.",
        "id": "2264",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "System Firmware",
        "techniqueid": "T1542.001"
    },
    {
        "description": "Adversaries may use bootkits to persist on systems. Bootkits reside at a layer below the operating system and may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.",
        "id": "2265",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Bootkit",
        "techniqueid": "T1542.003"
    },
    {
        "description": "Adversaries may abuse netbooting to load an unauthorized network device operating system from a Trivial File Transfer Protocol (TFTP) server. TFTP boot (netbooting) is commonly used by network administrators to load configuration-controlled network device images from a centralized management server. Netbooting is one option in the boot sequence and can be used to centralize, manage, and control device images.",
        "id": "2266",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "TFTP Boot",
        "techniqueid": "T1542.005"
    },
    {
        "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process.",
        "id": "2267",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Process Injection",
        "techniqueid": "T1055"
    },
    {
        "description": "Adversaries may inject malicious code into processes via ptrace (process trace) system calls in order to evade process-based defenses as well as possibly elevate privileges. Ptrace system call injection is a method of executing arbitrary code in the address space of a separate live process.",
        "id": "2268",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Ptrace System Calls",
        "techniqueid": "T1055.008"
    },
    {
        "description": "Adversaries may take control of preexisting sessions with remote services to move laterally in an environment. Users may use valid credentials to log into a service specifically designed to accept remote connections, such as telnet, SSH, and RDP. When a user logs into a service, a session will be established that will allow them to maintain a continuous interaction with that service.",
        "id": "2269",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Remote Service Session Hijacking",
        "techniqueid": "T1563"
    },
    {
        "description": "Adversaries may hijack a legitimate user's SSH session to move laterally within an environment. Secure Shell (SSH) is a standard means of remote access on Linux and macOS systems. It allows a user to connect to another system via an encrypted tunnel, commonly authenticating through a password, certificate or the use of an asymmetric encryption key pair.",
        "id": "2270",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "SSH Hijacking",
        "techniqueid": "T1563.001"
    },
    {
        "description": "Adversaries may hijack a legitimate user��s remote desktop session to move laterally within an environment. Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).",
        "id": "2271",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "RDP Hijacking",
        "techniqueid": "T1563.002"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.",
        "id": "2272",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Remote Desktop Protocol",
        "techniqueid": "T1021.001"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user.",
        "id": "2273",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "SMB/Windows Admin Shares",
        "techniqueid": "T1021.002"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to interact with remote systems using Windows Remote Management (WinRM). The adversary may then perform actions as the logged-on user.",
        "id": "2274",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Windows Remote Management",
        "techniqueid": "T1021.006"
    },
    {
        "description": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically requires being a member of an admin or otherwise privileged group on the remote system.",
        "id": "2275",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Scheduled Task/Job",
        "techniqueid": "T1053"
    },
    {
        "description": "Adversaries may abuse the?at.exe?utility to perform task scheduling for initial or recurring execution of malicious code. The?at?utility exists as an executable within Windows for scheduling tasks at a specified time and date. Using?at?requires that the Task Scheduler service be running, and the user to be logged on as a member of the local Administrators group.",
        "id": "2276",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "At (Windows)",
        "techniqueid": "T1053.002"
    },
    {
        "description": "Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The?schtasks?can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task.",
        "id": "2277",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Scheduled Task",
        "techniqueid": "T1053.005"
    },
    {
        "description": "Adversaries may abuse systemd timers to perform task scheduling for initial or recurring execution of malicious code. Systemd timers are unit files with file extension?.timer?that control services. Timers can be set to run on a calendar event or after a time span relative to a starting point. They can be used as an alternative to?Cron?in Linux environments.",
        "id": "2278",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Systemd Timers",
        "techniqueid": "T1053.006"
    },
    {
        "description": "Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed binaries. Binaries signed with trusted digital certificates can execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files.",
        "id": "2279",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Signed Binary Proxy Execution",
        "techniqueid": "T1218"
    },
    {
        "description": "Adversaries may abuse msiexec.exe to proxy execution of malicious payloads. Msiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi). Msiexec.exe is digitally signed by Microsoft.",
        "id": "2280",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Msiexec",
        "techniqueid": "T1218.007"
    },
    {
        "description": "Adversaries may gain access to and use third-party software suites installed within an enterprise network, such as administration, monitoring, and deployment systems, to move laterally through the network. Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, VNC, HBSS, Altiris, etc.).",
        "id": "2281",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Software Deployment Tools",
        "techniqueid": "T1072"
    },
    {
        "description": "Adversaries may attempt to subvert Kerberos authentication by stealing or forging Kerberos tickets to enable?Pass the Ticket.",
        "id": "2282",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Steal or Forge Kerberos Tickets",
        "techniqueid": "T1558"
    },
    {
        "description": "Adversaries who have the KRBTGT account password hash may forge Kerberos ticket-granting tickets (TGT), also known as a golden ticket. Golden tickets enable adversaries to generate authentication material for any account in Active Directory.",
        "id": "2283",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Golden Ticket",
        "techniqueid": "T1558.001"
    },
    {
        "description": "Adversaries who have the password hash of a target service account (e.g. SharePoint, MSSQL) may forge Kerberos ticket granting service (TGS) tickets, also known as silver tickets. Kerberos TGS tickets are also known as service tickets.",
        "id": "2284",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Silver Ticket",
        "techniqueid": "T1558.002"
    },
    {
        "description": "Adversaries may abuse a valid Kerberos ticket-granting ticket (TGT) or sniff network traffic to obtain a ticket-granting service (TGS) ticket that may be vulnerable to?Brute Force.",
        "id": "2285",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Kerberoasting",
        "techniqueid": "T1558.003"
    },
    {
        "description": "Adversaries may abuse system services or daemons to execute commands or programs. Adversaries can execute malicious content by interacting with or creating services. Many services are set to run at boot, which can aid in achieving persistence (Create or Modify System Process), but adversaries can also abuse services for one-time or temporary execution.",
        "id": "2286",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "System Services",
        "techniqueid": "T1569"
    },
    {
        "description": "Adversaries may abuse the Windows service control manager to execute malicious commands or payloads. The Windows service control manager (services.exe) is an interface to manage and manipulate services. The service control manager is accessible to users via GUI components as well as system utilities such as?sc.exe?and?Net.",
        "id": "2287",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Service Execution",
        "techniqueid": "T1569.002"
    },
    {
        "description": "Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g.?Bash History), operating system or application-specific repositories (e.g.?Credentials in Registry), or other specialized files/artifacts (e.g.?Private Keys).",
        "id": "2288",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Unsecured Credentials",
        "techniqueid": "T1552"
    },
    {
        "description": "Adversaries may search the Registry on compromised systems for insecurely stored credentials. The Windows Registry stores configuration information that can be used by the system or other programs. Adversaries may query the Registry looking for credentials and passwords that have been stored for use by other programs or services. Sometimes these credentials are used for automatic logons.",
        "id": "2289",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Credentials in Registry",
        "techniqueid": "T1552.002"
    },
    {
        "description": "Adversaries may \"pass the ticket\" using stolen Kerberos tickets to move laterally within an environment, bypassing normal system access controls. Pass the ticket (PtT) is a method of authenticating to a system using Kerberos tickets without having access to an account's password. Kerberos authentication can be used as the first step to lateral movement to a remote system.",
        "id": "2290",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Pass the Ticket",
        "techniqueid": "T1550.003"
    },
    {
        "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop. Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.",
        "id": "2291",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Valid Accounts",
        "techniqueid": "T1078"
    },
    {
        "description": "Adversaries may obtain and abuse credentials of a domain account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover users, administrators, and services.",
        "id": "2292",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Domain Accounts",
        "techniqueid": "T1078.002"
    },
    {
        "description": "Adversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.",
        "id": "2293",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Local Accounts",
        "techniqueid": "T1078.003"
    },
    {
        "description": "Adversaries may obtain and abuse credentials of a cloud account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. In some cases, cloud accounts may be federated with traditional identity management system, such as Window Active Directory.",
        "id": "2294",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Cloud Accounts",
        "techniqueid": "T1078.004"
    },
    {
        "description": "Adversaries may abuse Windows Management Instrumentation (WMI) to achieve execution. WMI is a Windows administration feature that provides a uniform environment for local and remote access to Windows system components. It relies on the WMI service for local and remote access and the server message block (SMB) and Remote Procedure Call Service (RPCS) for remote access. RPCS operates over port 135.",
        "id": "2295",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Windows Management Instrumentation",
        "techniqueid": "T1047"
    },
    {
        "description": "Adversaries may attempt to get a listing of cloud accounts. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application.",
        "id": "2296",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Cloud Account",
        "techniqueid": "T1087.004"
    },
    {
        "description": "Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services. On macOS, launchd processes known as?Launch Daemon?and?Launch Agent?are run to finish system initialization and load user specific parameters.",
        "id": "2297",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Create or Modify System Process",
        "techniqueid": "T1543"
    },
    {
        "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry. Service configurations can be modified using utilities such as sc.exe and?Reg.",
        "id": "2298",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Windows Service",
        "techniqueid": "T1543.003"
    },
    {
        "description": "Adversaries may access data objects from improperly secured cloud storage.",
        "id": "2299",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Data from Cloud Storage Object",
        "techniqueid": "T1530"
    },
    {
        "description": "Adversaries may leverage information repositories to mine valuable information. Information repositories are tools that allow for storage of information, typically to facilitate collaboration or information sharing between users, and can store a wide variety of data that may aid adversaries in further objectives, or direct access to the target information.",
        "id": "2300",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Data from Information Repositories",
        "techniqueid": "T1213"
    },
    {
        "description": "Adversaries may leverage Confluence repositories to mine valuable information. Often found in development environments alongside Atlassian JIRA, Confluence is generally used to store development-related documentation, however, in general may contain more diverse categories of useful information, such as:",
        "id": "2301",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Confluence",
        "techniqueid": "T1213.001"
    },
    {
        "description": "Adversaries may leverage the SharePoint repository as a source to mine valuable information. SharePoint will often contain useful information for an adversary to learn about the structure and functionality of the internal network and systems. For example, the following is a list of example information that may hold potential value to an adversary and may also be found on SharePoint:",
        "id": "2302",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Sharepoint",
        "techniqueid": "T1213.002"
    },
    {
        "description": "Adversaries may modify the configuration settings of a domain to evade defenses and/or escalate privileges in domain environments. Domains provide a centralized means of managing how computer resources (ex: computers, user accounts) can act, and interact with each other, on a network. The policy of the domain also includes configuration settings that may apply between domains in a multi-domain/forest environment. Modifications to domain settings may include altering domain Group Policy Objects (GPOs) or changing trust settings for domains, including federation trusts.",
        "id": "2303",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Domain Policy Modification",
        "techniqueid": "T1484"
    },
    {
        "description": "Adversaries may modify Group Policy Objects (GPOs) to subvert the intended discretionary access controls for a domain, usually with the intention of escalating privileges on the domain. Group policy allows for centralized management of user and computer settings in Active Directory (AD). GPOs are containers for group policy settings made up of files stored within a predicable network path?\\<DOMAIN>\\SYSVOL\\<DOMAIN>\\Policies\\.",
        "id": "2304",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Group Policy Modification",
        "techniqueid": "T1484.001"
    },
    {
        "description": "Adversaries may forge credential materials that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies, tokens, or other materials to authenticate and authorize user access.",
        "id": "2305",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Forge Web Credentials",
        "techniqueid": "T1606"
    },
    {
        "description": "Adversaries may forge web cookies that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies to authenticate and authorize user access.",
        "id": "2306",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Web Cookies",
        "techniqueid": "T1606.001"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the binaries used by services. Adversaries may use flaws in the permissions of Windows services to replace the binary that is executed upon service start. These service processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.",
        "id": "2307",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Services File Permissions Weakness",
        "techniqueid": "T1574.010"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the binaries used by an installer. These processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.",
        "id": "2308",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Executable Installer File Permissions Weakness",
        "techniqueid": "T1574.005"
    },
    {
        "description": "Adversaries may disable or modify a firewall within a cloud environment to bypass controls that limit access to cloud resources. Cloud firewalls are separate from system firewalls that are described in?Disable or Modify System Firewall.",
        "id": "2309",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Disable or Modify Cloud Firewall",
        "techniqueid": "T1562.007"
    },
    {
        "description": "An adversary may attempt to modify a cloud account's compute service infrastructure to evade defenses. A modification to the compute service infrastructure can include the creation, deletion, or modification of one or more components such as compute instances, virtual machines, and snapshots.",
        "id": "2310",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Modify Cloud Compute Infrastructure",
        "techniqueid": "T1578"
    },
    {
        "description": "An adversary may create a snapshot or data backup within a cloud account to evade defenses. A snapshot is a point-in-time copy of an existing cloud compute component such as a virtual machine (VM), virtual hard drive, or volume. An adversary may leverage permissions to create a snapshot in order to bypass restrictions that prevent access to existing compute service infrastructure, unlike in?Revert Cloud Instance?where an adversary may revert to a snapshot to evade detection and remove evidence of their presence.",
        "id": "2311",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Create Snapshot",
        "techniqueid": "T1578.001"
    },
    {
        "description": "An adversary may create a new instance or virtual machine (VM) within the compute service of a cloud account to evade defenses. Creating a new instance may allow an adversary to bypass firewall rules and permissions that exist on instances currently residing within an account. An adversary may?Create Snapshot?of one or more volumes in an account, create a new instance, mount the snapshots, and then apply a less restrictive security policy to collect?Data from Local System?or for?Remote Data Staging.",
        "id": "2312",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Create Cloud Instance",
        "techniqueid": "T1578.002"
    },
    {
        "description": "An adversary may delete a cloud instance after they have performed malicious activities in an attempt to evade detection and remove evidence of their presence. Deleting an instance or virtual machine can remove valuable forensic artifacts and other evidence of suspicious behavior if the instance is not recoverable.",
        "id": "2313",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Delete Cloud Instance",
        "techniqueid": "T1578.003"
    },
    {
        "description": "Adversaries may hijack a legitimate user��s remote desktop session to move laterally within an environment. Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).",
        "id": "2314",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "RDP Hijacking",
        "techniqueid": "T1563.002"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.",
        "id": "2315",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Remote Desktop Protocol",
        "techniqueid": "T1021.001"
    },
    {
        "description": "Adversaries may attempt to take advantage of a weakness in an Internet-facing computer or program using software, data, or commands in order to cause unintended or unanticipated behavior. The weakness in the system can be a bug, a glitch, or a design vulnerability. These applications are often websites, but can include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other applications with Internet accessible open sockets, such as web servers and related services. Depending on the flaw being exploited this may include?Exploitation for Defense Evasion.",
        "id": "2316",
        "mitigation": "Vulnerability Scanning",
        "mitigationid": "M1016",
        "technique": "Exploit Public-Facing Application",
        "techniqueid": "T1190"
    },
    {
        "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.?A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.",
        "id": "2317",
        "mitigation": "Vulnerability Scanning",
        "mitigationid": "M1016",
        "technique": "Exploitation of Remote Services",
        "techniqueid": "T1210"
    },
    {
        "description": "Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.",
        "id": "2318",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Bypass User Account Control",
        "techniqueid": "T1548.002"
    },
    {
        "description": "Adversaries may gain access to a system through a user visiting a website over the normal course of browsing. With this technique, the user's web browser is typically targeted for exploitation, but adversaries may also use compromised websites for non-exploitation behavior such as acquiring?Application Access Token.",
        "id": "2319",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Drive-by Compromise",
        "techniqueid": "T1189"
    },
    {
        "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppInit DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the?AppInit_DLLs?value in the Registry keys?HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows?or?HKEY_LOCAL_MACHINE\\Software\\Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion\\Windows?are loaded by user32.dll into every process that loads user32.dll. In practice this is nearly every program, since user32.dll is a very common library.",
        "id": "2320",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "AppInit DLLs",
        "techniqueid": "T1546.010"
    },
    {
        "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims. The Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time. For example, the application shimming feature allows developers to apply fixes to applications (without rewriting code) that were created for Windows XP so that it will work with Windows 10.",
        "id": "2321",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Application Shimming",
        "techniqueid": "T1546.011"
    },
    {
        "description": "Adversaries may attempt to take advantage of a weakness in an Internet-facing computer or program using software, data, or commands in order to cause unintended or unanticipated behavior. The weakness in the system can be a bug, a glitch, or a design vulnerability. These applications are often websites, but can include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other applications with Internet accessible open sockets, such as web servers and related services. Depending on the flaw being exploited this may include?Exploitation for Defense Evasion.",
        "id": "2322",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Exploit Public-Facing Application",
        "techniqueid": "T1190"
    },
    {
        "description": "Adversaries may exploit software vulnerabilities in an attempt to collect credentials. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.?Credentialing and authentication mechanisms may be targeted for exploitation by adversaries as a means to gain access to useful credentials or circumvent the process to gain access to systems. One example of this is MS14-068, which targets Kerberos and can be used to forge Kerberos tickets using domain user permissions. Exploitation for credential access may also result in Privilege Escalation depending on the process targeted or credentials obtained.",
        "id": "2323",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Exploitation for Credential Access",
        "techniqueid": "T1212"
    },
    {
        "description": "Adversaries may exploit a system or application vulnerability to bypass security features. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.?Vulnerabilities may exist in defensive security software that can be used to disable or circumvent them.",
        "id": "2324",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Exploitation for Defense Evasion",
        "techniqueid": "T1211"
    },
    {
        "description": "Adversaries may exploit software vulnerabilities in an attempt to collect elevate privileges. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Security constructs such as permission levels will often hinder access to information and use of certain techniques, so adversaries will likely need to perform privilege escalation to include use of software exploitation to circumvent those restrictions.",
        "id": "2325",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Exploitation for Privilege Escalation",
        "techniqueid": "T1068"
    },
    {
        "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.?A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.",
        "id": "2326",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Exploitation of Remote Services",
        "techniqueid": "T1210"
    },
    {
        "description": "Adversaries may overwrite or corrupt the flash memory contents of system BIOS or other firmware in devices attached to a system in order to render them inoperable or unable to boot. Firmware is software that is loaded and executed from non-volatile memory on hardware devices in order to initialize and manage device functionality. These devices could include the motherboard, hard drive, or video cards.",
        "id": "2327",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Firmware Corruption",
        "techniqueid": "T1495"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.",
        "id": "2328",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Hijack Execution Flow",
        "techniqueid": "T1574"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the library manifest used to load DLLs. Adversaries may take advantage of vague references in the library manifest of a program by replacing a legitimate library with a malicious one, causing the operating system to load their malicious library when it is called for by the victim program.",
        "id": "2329",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "DLL Side-Loading",
        "techniqueid": "T1574.002"
    },
    {
        "description": "Adversaries may leverage Microsoft Office-based applications for persistence between startups. Microsoft Office is a fairly common application suite on Windows-based operating systems within an enterprise network. There are multiple mechanisms that can be used with Office for persistence when an Office-based application is started; this can include the use of Office Template Macros and add-ins.",
        "id": "2330",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Office Application Startup",
        "techniqueid": "T1137"
    },
    {
        "description": "Adversaries may abuse Microsoft Outlook rules to obtain persistence on a compromised system. Outlook rules allow a user to define automated behavior to manage email messages. A benign rule might, for example, automatically move an email to a particular folder in Outlook if it contains specific words from a specific sender. Malicious Outlook rules can be created that can trigger code execution when an adversary sends a specifically crafted email to that user.",
        "id": "2331",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Outlook Rules",
        "techniqueid": "T1137.005"
    },
    {
        "description": "Adversaries may abuse Microsoft Outlook forms to obtain persistence on a compromised system. Outlook forms are used as templates for presentation and functionality in Outlook messages. Custom Outlook forms can be created that will execute code when a specifically crafted email is sent by an adversary utilizing the same custom Outlook form.",
        "id": "2332",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Outlook Forms",
        "techniqueid": "T1137.003"
    },
    {
        "description": "Adversaries may abuse Microsoft Outlook's Home Page feature to obtain persistence on a compromised system. Outlook Home Page is a legacy feature used to customize the presentation of Outlook folders. This feature allows for an internal or external URL to be loaded and presented whenever a folder is opened. A malicious HTML page can be crafted that will execute code when loaded by Outlook Home Page.",
        "id": "2333",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Outlook Home Page",
        "techniqueid": "T1137.004"
    },
    {
        "description": "Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control.",
        "id": "2334",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Pre-OS Boot",
        "techniqueid": "T1542"
    },
    {
        "description": "Adversaries may modify system firmware to persist on systems.The BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer.",
        "id": "2335",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "System Firmware",
        "techniqueid": "T1542.001"
    },
    {
        "description": "Adversaries may gain access to and use third-party software suites installed within an enterprise network, such as administration, monitoring, and deployment systems, to move laterally through the network. Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, VNC, HBSS, Altiris, etc.).",
        "id": "2336",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Software Deployment Tools",
        "techniqueid": "T1072"
    },
    {
        "description": "Adversaries may manipulate products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise.",
        "id": "2337",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Supply Chain Compromise",
        "techniqueid": "T1195"
    },
    {
        "description": "Adversaries may manipulate software dependencies and development tools prior to receipt by a final consumer for the purpose of data or system compromise. Applications often depend on external software to function properly. Popular open source projects that are used as dependencies in many applications may be targeted as a means to add malicious code to users of the dependency.",
        "id": "2338",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Compromise Software Dependencies and Development Tools",
        "techniqueid": "T1195.001"
    },
    {
        "description": "Adversaries may manipulate application software prior to receipt by a final consumer for the purpose of data or system compromise. Supply chain compromise of software can take place in a number of ways, including manipulation of the application source code, manipulation of the update/distribution mechanism for that software, or replacing compiled releases with a modified version.",
        "id": "2339",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Compromise Software Supply Chain",
        "techniqueid": "T1195.002"
    },
    {
        "description": "Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g.?Bash History), operating system or application-specific repositories (e.g.?Credentials in Registry), or other specialized files/artifacts (e.g.?Private Keys).",
        "id": "2340",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Unsecured Credentials",
        "techniqueid": "T1552"
    },
    {
        "description": "Adversaries may attempt to find unsecured credentials in Group Policy Preferences (GPP). GPP are tools that allow administrators to create domain policies with embedded credentials. These policies allow administrators to set local accounts.",
        "id": "2341",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Group Policy Preferences",
        "techniqueid": "T1552.006"
    },
    {
        "description": "Adversaries may \"pass the hash\" using stolen password hashes to move laterally within an environment, bypassing normal system access controls. Pass the hash (PtH) is a method of authenticating as a user without having access to the user's cleartext password. This method bypasses standard authentication steps that require a cleartext password, moving directly into the portion of the authentication that uses the password hash. In this technique, valid password hashes for the account being used are captured using a Credential Access technique. Captured hashes are used with PtH to authenticate as that user. Once authenticated, PtH may be used to perform actions on local or remote systems.",
        "id": "2342",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Pass the Hash",
        "techniqueid": "T1550.002"
    },
    {
        "description": "Adversaries may attempt to take advantage of a weakness in an Internet-facing computer or program using software, data, or commands in order to cause unintended or unanticipated behavior. The weakness in the system can be a bug, a glitch, or a design vulnerability. These applications are often websites, but can include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other applications with Internet accessible open sockets, such as web servers and related services. Depending on the flaw being exploited this may include?Exploitation for Defense Evasion.",
        "id": "2343",
        "mitigation": "Vulnerability Scanning",
        "mitigationid": "M1016",
        "technique": "Exploit Public-Facing Application",
        "techniqueid": "T1190"
    },
    {
        "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.?A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.",
        "id": "2344",
        "mitigation": "Vulnerability Scanning",
        "mitigationid": "M1016",
        "technique": "Exploitation of Remote Services",
        "techniqueid": "T1210"
    },
    {
        "description": "Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.",
        "id": "2345",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Bypass User Account Control",
        "techniqueid": "T1548.002"
    },
    {
        "description": "Adversaries may gain access to a system through a user visiting a website over the normal course of browsing. With this technique, the user's web browser is typically targeted for exploitation, but adversaries may also use compromised websites for non-exploitation behavior such as acquiring?Application Access Token.",
        "id": "2346",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Drive-by Compromise",
        "techniqueid": "T1189"
    },
    {
        "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppInit DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the?AppInit_DLLs?value in the Registry keys?HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows?or?HKEY_LOCAL_MACHINE\\Software\\Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion\\Windows?are loaded by user32.dll into every process that loads user32.dll. In practice this is nearly every program, since user32.dll is a very common library.",
        "id": "2347",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "AppInit DLLs",
        "techniqueid": "T1546.010"
    },
    {
        "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims. The Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time. For example, the application shimming feature allows developers to apply fixes to applications (without rewriting code) that were created for Windows XP so that it will work with Windows 10.",
        "id": "2348",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Application Shimming",
        "techniqueid": "T1546.011"
    },
    {
        "description": "Adversaries may attempt to take advantage of a weakness in an Internet-facing computer or program using software, data, or commands in order to cause unintended or unanticipated behavior. The weakness in the system can be a bug, a glitch, or a design vulnerability. These applications are often websites, but can include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other applications with Internet accessible open sockets, such as web servers and related services. Depending on the flaw being exploited this may include?Exploitation for Defense Evasion.",
        "id": "2349",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Exploit Public-Facing Application",
        "techniqueid": "T1190"
    },
    {
        "description": "Adversaries may exploit software vulnerabilities in an attempt to collect credentials. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.?Credentialing and authentication mechanisms may be targeted for exploitation by adversaries as a means to gain access to useful credentials or circumvent the process to gain access to systems. One example of this is MS14-068, which targets Kerberos and can be used to forge Kerberos tickets using domain user permissions. Exploitation for credential access may also result in Privilege Escalation depending on the process targeted or credentials obtained.",
        "id": "2350",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Exploitation for Credential Access",
        "techniqueid": "T1212"
    },
    {
        "description": "Adversaries may exploit a system or application vulnerability to bypass security features. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.?Vulnerabilities may exist in defensive security software that can be used to disable or circumvent them.",
        "id": "2351",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Exploitation for Defense Evasion",
        "techniqueid": "T1211"
    },
    {
        "description": "Adversaries may exploit software vulnerabilities in an attempt to collect elevate privileges. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Security constructs such as permission levels will often hinder access to information and use of certain techniques, so adversaries will likely need to perform privilege escalation to include use of software exploitation to circumvent those restrictions.",
        "id": "2352",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Exploitation for Privilege Escalation",
        "techniqueid": "T1068"
    },
    {
        "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.?A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.",
        "id": "2353",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Exploitation of Remote Services",
        "techniqueid": "T1210"
    },
    {
        "description": "Adversaries may overwrite or corrupt the flash memory contents of system BIOS or other firmware in devices attached to a system in order to render them inoperable or unable to boot. Firmware is software that is loaded and executed from non-volatile memory on hardware devices in order to initialize and manage device functionality. These devices could include the motherboard, hard drive, or video cards.",
        "id": "2354",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Firmware Corruption",
        "techniqueid": "T1495"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.",
        "id": "2355",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Hijack Execution Flow",
        "techniqueid": "T1574"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the library manifest used to load DLLs. Adversaries may take advantage of vague references in the library manifest of a program by replacing a legitimate library with a malicious one, causing the operating system to load their malicious library when it is called for by the victim program.",
        "id": "2356",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "DLL Side-Loading",
        "techniqueid": "T1574.002"
    },
    {
        "description": "Adversaries may leverage Microsoft Office-based applications for persistence between startups. Microsoft Office is a fairly common application suite on Windows-based operating systems within an enterprise network. There are multiple mechanisms that can be used with Office for persistence when an Office-based application is started; this can include the use of Office Template Macros and add-ins.",
        "id": "2357",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Office Application Startup",
        "techniqueid": "T1137"
    },
    {
        "description": "Adversaries may abuse Microsoft Outlook rules to obtain persistence on a compromised system. Outlook rules allow a user to define automated behavior to manage email messages. A benign rule might, for example, automatically move an email to a particular folder in Outlook if it contains specific words from a specific sender. Malicious Outlook rules can be created that can trigger code execution when an adversary sends a specifically crafted email to that user.",
        "id": "2358",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Outlook Rules",
        "techniqueid": "T1137.005"
    },
    {
        "description": "Adversaries may abuse Microsoft Outlook forms to obtain persistence on a compromised system. Outlook forms are used as templates for presentation and functionality in Outlook messages. Custom Outlook forms can be created that will execute code when a specifically crafted email is sent by an adversary utilizing the same custom Outlook form.",
        "id": "2359",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Outlook Forms",
        "techniqueid": "T1137.003"
    },
    {
        "description": "Adversaries may abuse Microsoft Outlook's Home Page feature to obtain persistence on a compromised system. Outlook Home Page is a legacy feature used to customize the presentation of Outlook folders. This feature allows for an internal or external URL to be loaded and presented whenever a folder is opened. A malicious HTML page can be crafted that will execute code when loaded by Outlook Home Page.",
        "id": "2360",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Outlook Home Page",
        "techniqueid": "T1137.004"
    },
    {
        "description": "Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control.",
        "id": "2361",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Pre-OS Boot",
        "techniqueid": "T1542"
    },
    {
        "description": "Adversaries may modify system firmware to persist on systems.The BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer.",
        "id": "2362",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "System Firmware",
        "techniqueid": "T1542.001"
    },
    {
        "description": "Adversaries may gain access to and use third-party software suites installed within an enterprise network, such as administration, monitoring, and deployment systems, to move laterally through the network. Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, VNC, HBSS, Altiris, etc.).",
        "id": "2363",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Software Deployment Tools",
        "techniqueid": "T1072"
    },
    {
        "description": "Adversaries may manipulate products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise.",
        "id": "2364",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Supply Chain Compromise",
        "techniqueid": "T1195"
    },
    {
        "description": "Adversaries may manipulate software dependencies and development tools prior to receipt by a final consumer for the purpose of data or system compromise. Applications often depend on external software to function properly. Popular open source projects that are used as dependencies in many applications may be targeted as a means to add malicious code to users of the dependency.",
        "id": "2365",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Compromise Software Dependencies and Development Tools",
        "techniqueid": "T1195.001"
    },
    {
        "description": "Adversaries may manipulate application software prior to receipt by a final consumer for the purpose of data or system compromise. Supply chain compromise of software can take place in a number of ways, including manipulation of the application source code, manipulation of the update/distribution mechanism for that software, or replacing compiled releases with a modified version.",
        "id": "2366",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Compromise Software Supply Chain",
        "techniqueid": "T1195.002"
    },
    {
        "description": "Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g.?Bash History), operating system or application-specific repositories (e.g.?Credentials in Registry), or other specialized files/artifacts (e.g.?Private Keys).",
        "id": "2367",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Unsecured Credentials",
        "techniqueid": "T1552"
    },
    {
        "description": "Adversaries may attempt to find unsecured credentials in Group Policy Preferences (GPP). GPP are tools that allow administrators to create domain policies with embedded credentials. These policies allow administrators to set local accounts.",
        "id": "2368",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Group Policy Preferences",
        "techniqueid": "T1552.006"
    },
    {
        "description": "Adversaries may \"pass the hash\" using stolen password hashes to move laterally within an environment, bypassing normal system access controls. Pass the hash (PtH) is a method of authenticating as a user without having access to the user's cleartext password. This method bypasses standard authentication steps that require a cleartext password, moving directly into the portion of the authentication that uses the password hash. In this technique, valid password hashes for the account being used are captured using a Credential Access technique. Captured hashes are used with PtH to authenticate as that user. Once authenticated, PtH may be used to perform actions on local or remote systems.",
        "id": "2369",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Pass the Hash",
        "techniqueid": "T1550.002"
    },
    {
        "description": "Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.",
        "id": "2370",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Bypass User Account Control",
        "techniqueid": "T1548.002"
    },
    {
        "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppInit DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the?AppInit_DLLs?value in the Registry keys?HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows?or?HKEY_LOCAL_MACHINE\\Software\\Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion\\Windows?are loaded by user32.dll into every process that loads user32.dll. In practice this is nearly every program, since user32.dll is a very common library.",
        "id": "2371",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "AppInit DLLs",
        "techniqueid": "T1546.010"
    },
    {
        "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims. The Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time. For example, the application shimming feature allows developers to apply fixes to applications (without rewriting code) that were created for Windows XP so that it will work with Windows 10.",
        "id": "2372",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Application Shimming",
        "techniqueid": "T1546.011"
    },
    {
        "description": "Adversaries may attempt to take advantage of a weakness in an Internet-facing computer or program using software, data, or commands in order to cause unintended or unanticipated behavior. The weakness in the system can be a bug, a glitch, or a design vulnerability. These applications are often websites, but can include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other applications with Internet accessible open sockets, such as web servers and related services. Depending on the flaw being exploited this may include?Exploitation for Defense Evasion.",
        "id": "2373",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Exploit Public-Facing Application",
        "techniqueid": "T1190"
    },
    {
        "description": "Adversaries may exploit software vulnerabilities in an attempt to collect credentials. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.?Credentialing and authentication mechanisms may be targeted for exploitation by adversaries as a means to gain access to useful credentials or circumvent the process to gain access to systems. One example of this is MS14-068, which targets Kerberos and can be used to forge Kerberos tickets using domain user permissions. Exploitation for credential access may also result in Privilege Escalation depending on the process targeted or credentials obtained.",
        "id": "2374",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Exploitation for Credential Access",
        "techniqueid": "T1212"
    },
    {
        "description": "Adversaries may exploit a system or application vulnerability to bypass security features. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.?Vulnerabilities may exist in defensive security software that can be used to disable or circumvent them.",
        "id": "2375",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Exploitation for Defense Evasion",
        "techniqueid": "T1211"
    },
    {
        "description": "Adversaries may exploit software vulnerabilities in an attempt to collect elevate privileges. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Security constructs such as permission levels will often hinder access to information and use of certain techniques, so adversaries will likely need to perform privilege escalation to include use of software exploitation to circumvent those restrictions.",
        "id": "2376",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Exploitation for Privilege Escalation",
        "techniqueid": "T1068"
    },
    {
        "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.?A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.",
        "id": "2377",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Exploitation of Remote Services",
        "techniqueid": "T1210"
    },
    {
        "description": "Adversaries may overwrite or corrupt the flash memory contents of system BIOS or other firmware in devices attached to a system in order to render them inoperable or unable to boot. Firmware is software that is loaded and executed from non-volatile memory on hardware devices in order to initialize and manage device functionality. These devices could include the motherboard, hard drive, or video cards.",
        "id": "2378",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Firmware Corruption",
        "techniqueid": "T1495"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.",
        "id": "2379",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Hijack Execution Flow",
        "techniqueid": "T1574"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the library manifest used to load DLLs. Adversaries may take advantage of vague references in the library manifest of a program by replacing a legitimate library with a malicious one, causing the operating system to load their malicious library when it is called for by the victim program.",
        "id": "2380",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "DLL Side-Loading",
        "techniqueid": "T1574.002"
    },
    {
        "description": "Adversaries may leverage Microsoft Office-based applications for persistence between startups. Microsoft Office is a fairly common application suite on Windows-based operating systems within an enterprise network. There are multiple mechanisms that can be used with Office for persistence when an Office-based application is started; this can include the use of Office Template Macros and add-ins.",
        "id": "2381",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Office Application Startup",
        "techniqueid": "T1137"
    },
    {
        "description": "Adversaries may abuse Microsoft Outlook rules to obtain persistence on a compromised system. Outlook rules allow a user to define automated behavior to manage email messages. A benign rule might, for example, automatically move an email to a particular folder in Outlook if it contains specific words from a specific sender. Malicious Outlook rules can be created that can trigger code execution when an adversary sends a specifically crafted email to that user.",
        "id": "2382",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Outlook Rules",
        "techniqueid": "T1137.005"
    },
    {
        "description": "Adversaries may abuse Microsoft Outlook forms to obtain persistence on a compromised system. Outlook forms are used as templates for presentation and functionality in Outlook messages. Custom Outlook forms can be created that will execute code when a specifically crafted email is sent by an adversary utilizing the same custom Outlook form.",
        "id": "2383",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Outlook Forms",
        "techniqueid": "T1137.003"
    },
    {
        "description": "Adversaries may abuse Microsoft Outlook's Home Page feature to obtain persistence on a compromised system. Outlook Home Page is a legacy feature used to customize the presentation of Outlook folders. This feature allows for an internal or external URL to be loaded and presented whenever a folder is opened. A malicious HTML page can be crafted that will execute code when loaded by Outlook Home Page.",
        "id": "2384",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Outlook Home Page",
        "techniqueid": "T1137.004"
    },
    {
        "description": "Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control.",
        "id": "2385",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Pre-OS Boot",
        "techniqueid": "T1542"
    },
    {
        "description": "Adversaries may modify system firmware to persist on systems.The BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer.",
        "id": "2386",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "System Firmware",
        "techniqueid": "T1542.001"
    },
    {
        "description": "Adversaries may gain access to and use third-party software suites installed within an enterprise network, such as administration, monitoring, and deployment systems, to move laterally through the network. Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, VNC, HBSS, Altiris, etc.).",
        "id": "2387",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Software Deployment Tools",
        "techniqueid": "T1072"
    },
    {
        "description": "Adversaries may manipulate products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise.",
        "id": "2388",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Supply Chain Compromise",
        "techniqueid": "T1195"
    },
    {
        "description": "Adversaries may manipulate software dependencies and development tools prior to receipt by a final consumer for the purpose of data or system compromise. Applications often depend on external software to function properly. Popular open source projects that are used as dependencies in many applications may be targeted as a means to add malicious code to users of the dependency.",
        "id": "2389",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Compromise Software Dependencies and Development Tools",
        "techniqueid": "T1195.001"
    },
    {
        "description": "Adversaries may manipulate application software prior to receipt by a final consumer for the purpose of data or system compromise. Supply chain compromise of software can take place in a number of ways, including manipulation of the application source code, manipulation of the update/distribution mechanism for that software, or replacing compiled releases with a modified version.",
        "id": "2390",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Compromise Software Supply Chain",
        "techniqueid": "T1195.002"
    },
    {
        "description": "Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g.?Bash History), operating system or application-specific repositories (e.g.?Credentials in Registry), or other specialized files/artifacts (e.g.?Private Keys).",
        "id": "2391",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Unsecured Credentials",
        "techniqueid": "T1552"
    },
    {
        "description": "Adversaries may attempt to find unsecured credentials in Group Policy Preferences (GPP). GPP are tools that allow administrators to create domain policies with embedded credentials. These policies allow administrators to set local accounts.",
        "id": "2392",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Group Policy Preferences",
        "techniqueid": "T1552.006"
    },
    {
        "description": "Adversaries may \"pass the hash\" using stolen password hashes to move laterally within an environment, bypassing normal system access controls. Pass the hash (PtH) is a method of authenticating as a user without having access to the user's cleartext password. This method bypasses standard authentication steps that require a cleartext password, moving directly into the portion of the authentication that uses the password hash. In this technique, valid password hashes for the account being used are captured using a Credential Access technique. Captured hashes are used with PtH to authenticate as that user. Once authenticated, PtH may be used to perform actions on local or remote systems.",
        "id": "2393",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Pass the Hash",
        "techniqueid": "T1550.002"
    },
    {
        "description": "Adversaries may gain access to a system through a user visiting a website over the normal course of browsing. With this technique, the user's web browser is typically targeted for exploitation, but adversaries may also use compromised websites for non-exploitation behavior such as acquiring?Application Access Token.",
        "id": "2394",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Drive-by Compromise",
        "techniqueid": "T1189"
    },
    {
        "description": "Adversaries may attempt to take advantage of a weakness in an Internet-facing computer or program using software, data, or commands in order to cause unintended or unanticipated behavior. The weakness in the system can be a bug, a glitch, or a design vulnerability. These applications are often websites, but can include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other applications with Internet accessible open sockets, such as web servers and related services. Depending on the flaw being exploited this may include?Exploitation for Defense Evasion.",
        "id": "2395",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Exploit Public-Facing Application",
        "techniqueid": "T1190"
    },
    {
        "description": "Adversaries may exploit software vulnerabilities in an attempt to collect credentials. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.?Credentialing and authentication mechanisms may be targeted for exploitation by adversaries as a means to gain access to useful credentials or circumvent the process to gain access to systems. One example of this is MS14-068, which targets Kerberos and can be used to forge Kerberos tickets using domain user permissions. Exploitation for credential access may also result in Privilege Escalation depending on the process targeted or credentials obtained.",
        "id": "2396",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Exploitation for Credential Access",
        "techniqueid": "T1212"
    },
    {
        "description": "Adversaries may exploit a system or application vulnerability to bypass security features. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.?Vulnerabilities may exist in defensive security software that can be used to disable or circumvent them.",
        "id": "2397",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Exploitation for Defense Evasion",
        "techniqueid": "T1211"
    },
    {
        "description": "Adversaries may exploit software vulnerabilities in an attempt to collect elevate privileges. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Security constructs such as permission levels will often hinder access to information and use of certain techniques, so adversaries will likely need to perform privilege escalation to include use of software exploitation to circumvent those restrictions.",
        "id": "2398",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Exploitation for Privilege Escalation",
        "techniqueid": "T1068"
    },
    {
        "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.?A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.",
        "id": "2399",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Exploitation of Remote Services",
        "techniqueid": "T1210"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.",
        "id": "2400",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Hijack Execution Flow",
        "techniqueid": "T1574"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the library manifest used to load DLLs. Adversaries may take advantage of vague references in the library manifest of a program by replacing a legitimate library with a malicious one, causing the operating system to load their malicious library when it is called for by the victim program.",
        "id": "2401",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "DLL Side-Loading",
        "techniqueid": "T1574.002"
    },
    {
        "description": "Adversaries may leverage Microsoft Office-based applications for persistence between startups. Microsoft Office is a fairly common application suite on Windows-based operating systems within an enterprise network. There are multiple mechanisms that can be used with Office for persistence when an Office-based application is started; this can include the use of Office Template Macros and add-ins.",
        "id": "2402",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Office Application Startup",
        "techniqueid": "T1137"
    },
    {
        "description": "Adversaries may abuse Microsoft Outlook rules to obtain persistence on a compromised system. Outlook rules allow a user to define automated behavior to manage email messages. A benign rule might, for example, automatically move an email to a particular folder in Outlook if it contains specific words from a specific sender. Malicious Outlook rules can be created that can trigger code execution when an adversary sends a specifically crafted email to that user.",
        "id": "2403",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Outlook Rules",
        "techniqueid": "T1137.005"
    },
    {
        "description": "Adversaries may abuse Microsoft Outlook forms to obtain persistence on a compromised system. Outlook forms are used as templates for presentation and functionality in Outlook messages. Custom Outlook forms can be created that will execute code when a specifically crafted email is sent by an adversary utilizing the same custom Outlook form.",
        "id": "2404",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Outlook Forms",
        "techniqueid": "T1137.003"
    },
    {
        "description": "Adversaries may abuse Microsoft Outlook's Home Page feature to obtain persistence on a compromised system. Outlook Home Page is a legacy feature used to customize the presentation of Outlook folders. This feature allows for an internal or external URL to be loaded and presented whenever a folder is opened. A malicious HTML page can be crafted that will execute code when loaded by Outlook Home Page.",
        "id": "2405",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Outlook Home Page",
        "techniqueid": "T1137.004"
    },
    {
        "description": "Adversaries may gain access to and use third-party software suites installed within an enterprise network, such as administration, monitoring, and deployment systems, to move laterally through the network. Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, VNC, HBSS, Altiris, etc.).",
        "id": "2406",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Software Deployment Tools",
        "techniqueid": "T1072"
    },
    {
        "description": "Adversaries may manipulate products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise.",
        "id": "2407",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Supply Chain Compromise",
        "techniqueid": "T1195"
    },
    {
        "description": "Adversaries may manipulate software dependencies and development tools prior to receipt by a final consumer for the purpose of data or system compromise. Applications often depend on external software to function properly. Popular open source projects that are used as dependencies in many applications may be targeted as a means to add malicious code to users of the dependency.",
        "id": "2408",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Compromise Software Dependencies and Development Tools",
        "techniqueid": "T1195.001"
    },
    {
        "description": "Adversaries may manipulate application software prior to receipt by a final consumer for the purpose of data or system compromise. Supply chain compromise of software can take place in a number of ways, including manipulation of the application source code, manipulation of the update/distribution mechanism for that software, or replacing compiled releases with a modified version.",
        "id": "2409",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Compromise Software Supply Chain",
        "techniqueid": "T1195.002"
    },
    {
        "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.?A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.",
        "id": "2410",
        "mitigation": "Vulnerability Scanning",
        "mitigationid": "M1016",
        "technique": "Exploitation of Remote Services",
        "techniqueid": "T1210"
    },
    {
        "description": "Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.",
        "id": "2411",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Bypass User Account Control",
        "techniqueid": "T1548.002"
    },
    {
        "description": "Adversaries may gain access to a system through a user visiting a website over the normal course of browsing. With this technique, the user's web browser is typically targeted for exploitation, but adversaries may also use compromised websites for non-exploitation behavior such as acquiring?Application Access Token.",
        "id": "2412",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Drive-by Compromise",
        "techniqueid": "T1189"
    },
    {
        "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppInit DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the?AppInit_DLLs?value in the Registry keys?HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows?or?HKEY_LOCAL_MACHINE\\Software\\Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion\\Windows?are loaded by user32.dll into every process that loads user32.dll. In practice this is nearly every program, since user32.dll is a very common library.",
        "id": "2413",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "AppInit DLLs",
        "techniqueid": "T1546.010"
    },
    {
        "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims. The Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time. For example, the application shimming feature allows developers to apply fixes to applications (without rewriting code) that were created for Windows XP so that it will work with Windows 10.",
        "id": "2414",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Application Shimming",
        "techniqueid": "T1546.011"
    },
    {
        "description": "Adversaries may exploit software vulnerabilities in an attempt to collect credentials. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.?Credentialing and authentication mechanisms may be targeted for exploitation by adversaries as a means to gain access to useful credentials or circumvent the process to gain access to systems. One example of this is MS14-068, which targets Kerberos and can be used to forge Kerberos tickets using domain user permissions. Exploitation for credential access may also result in Privilege Escalation depending on the process targeted or credentials obtained.",
        "id": "2415",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Exploitation for Credential Access",
        "techniqueid": "T1212"
    },
    {
        "description": "Adversaries may exploit a system or application vulnerability to bypass security features. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.?Vulnerabilities may exist in defensive security software that can be used to disable or circumvent them.",
        "id": "2416",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Exploitation for Defense Evasion",
        "techniqueid": "T1211"
    },
    {
        "description": "Adversaries may exploit software vulnerabilities in an attempt to collect elevate privileges. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Security constructs such as permission levels will often hinder access to information and use of certain techniques, so adversaries will likely need to perform privilege escalation to include use of software exploitation to circumvent those restrictions.",
        "id": "2417",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Exploitation for Privilege Escalation",
        "techniqueid": "T1068"
    },
    {
        "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.?A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.",
        "id": "2418",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Exploitation of Remote Services",
        "techniqueid": "T1210"
    },
    {
        "description": "Adversaries may overwrite or corrupt the flash memory contents of system BIOS or other firmware in devices attached to a system in order to render them inoperable or unable to boot. Firmware is software that is loaded and executed from non-volatile memory on hardware devices in order to initialize and manage device functionality. These devices could include the motherboard, hard drive, or video cards.",
        "id": "2419",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Firmware Corruption",
        "techniqueid": "T1495"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.",
        "id": "2420",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Hijack Execution Flow",
        "techniqueid": "T1574"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the library manifest used to load DLLs. Adversaries may take advantage of vague references in the library manifest of a program by replacing a legitimate library with a malicious one, causing the operating system to load their malicious library when it is called for by the victim program.",
        "id": "2421",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "DLL Side-Loading",
        "techniqueid": "T1574.002"
    },
    {
        "description": "Adversaries may leverage Microsoft Office-based applications for persistence between startups. Microsoft Office is a fairly common application suite on Windows-based operating systems within an enterprise network. There are multiple mechanisms that can be used with Office for persistence when an Office-based application is started; this can include the use of Office Template Macros and add-ins.",
        "id": "2422",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Office Application Startup",
        "techniqueid": "T1137"
    },
    {
        "description": "Adversaries may abuse Microsoft Outlook rules to obtain persistence on a compromised system. Outlook rules allow a user to define automated behavior to manage email messages. A benign rule might, for example, automatically move an email to a particular folder in Outlook if it contains specific words from a specific sender. Malicious Outlook rules can be created that can trigger code execution when an adversary sends a specifically crafted email to that user.",
        "id": "2423",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Outlook Rules",
        "techniqueid": "T1137.005"
    },
    {
        "description": "Adversaries may abuse Microsoft Outlook forms to obtain persistence on a compromised system. Outlook forms are used as templates for presentation and functionality in Outlook messages. Custom Outlook forms can be created that will execute code when a specifically crafted email is sent by an adversary utilizing the same custom Outlook form.",
        "id": "2424",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Outlook Forms",
        "techniqueid": "T1137.003"
    },
    {
        "description": "Adversaries may abuse Microsoft Outlook's Home Page feature to obtain persistence on a compromised system. Outlook Home Page is a legacy feature used to customize the presentation of Outlook folders. This feature allows for an internal or external URL to be loaded and presented whenever a folder is opened. A malicious HTML page can be crafted that will execute code when loaded by Outlook Home Page.",
        "id": "2425",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Outlook Home Page",
        "techniqueid": "T1137.004"
    },
    {
        "description": "Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control.",
        "id": "2426",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Pre-OS Boot",
        "techniqueid": "T1542"
    },
    {
        "description": "Adversaries may modify system firmware to persist on systems.The BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer.",
        "id": "2427",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "System Firmware",
        "techniqueid": "T1542.001"
    },
    {
        "description": "Adversaries may gain access to and use third-party software suites installed within an enterprise network, such as administration, monitoring, and deployment systems, to move laterally through the network. Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, VNC, HBSS, Altiris, etc.).",
        "id": "2428",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Software Deployment Tools",
        "techniqueid": "T1072"
    },
    {
        "description": "Adversaries may manipulate products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise.",
        "id": "2429",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Supply Chain Compromise",
        "techniqueid": "T1195"
    },
    {
        "description": "Adversaries may manipulate software dependencies and development tools prior to receipt by a final consumer for the purpose of data or system compromise. Applications often depend on external software to function properly. Popular open source projects that are used as dependencies in many applications may be targeted as a means to add malicious code to users of the dependency.",
        "id": "2430",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Compromise Software Dependencies and Development Tools",
        "techniqueid": "T1195.001"
    },
    {
        "description": "Adversaries may manipulate application software prior to receipt by a final consumer for the purpose of data or system compromise. Supply chain compromise of software can take place in a number of ways, including manipulation of the application source code, manipulation of the update/distribution mechanism for that software, or replacing compiled releases with a modified version.",
        "id": "2431",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Compromise Software Supply Chain",
        "techniqueid": "T1195.002"
    },
    {
        "description": "Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g.?Bash History), operating system or application-specific repositories (e.g.?Credentials in Registry), or other specialized files/artifacts (e.g.?Private Keys).",
        "id": "2432",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Unsecured Credentials",
        "techniqueid": "T1552"
    },
    {
        "description": "Adversaries may attempt to find unsecured credentials in Group Policy Preferences (GPP). GPP are tools that allow administrators to create domain policies with embedded credentials. These policies allow administrators to set local accounts.",
        "id": "2433",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Group Policy Preferences",
        "techniqueid": "T1552.006"
    },
    {
        "description": "Adversaries may \"pass the hash\" using stolen password hashes to move laterally within an environment, bypassing normal system access controls. Pass the hash (PtH) is a method of authenticating as a user without having access to the user's cleartext password. This method bypasses standard authentication steps that require a cleartext password, moving directly into the portion of the authentication that uses the password hash. In this technique, valid password hashes for the account being used are captured using a Credential Access technique. Captured hashes are used with PtH to authenticate as that user. Once authenticated, PtH may be used to perform actions on local or remote systems.",
        "id": "2434",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Pass the Hash",
        "techniqueid": "T1550.002"
    },
    {
        "description": "Adversaries may attempt to take advantage of a weakness in an Internet-facing computer or program using software, data, or commands in order to cause unintended or unanticipated behavior. The weakness in the system can be a bug, a glitch, or a design vulnerability. These applications are often websites, but can include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other applications with Internet accessible open sockets, such as web servers and related services. Depending on the flaw being exploited this may include?Exploitation for Defense Evasion.",
        "id": "2435",
        "mitigation": "Vulnerability Scanning",
        "mitigationid": "M1016",
        "technique": "Exploit Public-Facing Application",
        "techniqueid": "T1190"
    },
    {
        "description": "Adversaries may collect data related to managed devices from configuration repositories. Configuration repositories are used by management systems in order to configure, manage, and control data on remote systems. Configuration repositories may also facilitate remote access and administration of devices.",
        "id": "2436",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Data from Configuration Repository",
        "techniqueid": "T1602"
    },
    {
        "description": "Adversaries may target the Management Information Base (MIB) to collect and/or mine valuable information in a network managed using Simple Network Management Protocol (SNMP).",
        "id": "2437",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "SNMP (MIB Dump)",
        "techniqueid": "T1602.001"
    },
    {
        "description": "Adversaries may access network configuration files to collect sensitive data about the device and the network. The network configuration is a file containing parameters that determine the operation of the device. The device typically stores an in-memory copy of the configuration while operating, and a separate configuration on non-volatile storage to load after device reset. Adversaries can inspect the configuration files to reveal information about the target network and its layout, the network device and its software, or identifying legitimate accounts and credentials for later use.",
        "id": "2438",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Network Device Configuration Dump",
        "techniqueid": "T1602.002"
    },
    {
        "description": "Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.",
        "id": "2439",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Endpoint Denial of Service",
        "techniqueid": "T1499"
    },
    {
        "description": "Adversaries may target the operating system (OS) for a DoS attack, since the (OS) is responsible for managing the finite resources on a system. These attacks do not need to exhaust the actual resources on a system since they can simply exhaust the limits that an OS self-imposes to prevent the entire system from being overwhelmed by excessive demands on its capacity.",
        "id": "2440",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "OS Exhaustion Flood",
        "techniqueid": "T1499.001"
    },
    {
        "description": "Adversaries may target the different network services provided by systems to conduct a DoS. Adversaries often target DNS and web services, however others have been targeted as well. Web server software can be attacked through a variety of means, some of which apply generally while others are specific to the software being used to provide the service.",
        "id": "2441",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Service Exhaustion Flood",
        "techniqueid": "T1499.002"
    },
    {
        "description": "Adversaries may target resource intensive features of web applications to cause a denial of service (DoS). Specific features in web applications may be highly resource intensive. Repeated requests to those features may be able to exhaust system resources and deny access to the application or the server itself.",
        "id": "2442",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Application Exhaustion Flood",
        "techniqueid": "T1499.003"
    },
    {
        "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent DoS condition.",
        "id": "2443",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Application or System Exploitation",
        "techniqueid": "T1499.004"
    },
    {
        "description": "Adversaries may steal data by exfiltrating it over a different protocol than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.",
        "id": "2444",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Exfiltration Over Alternative Protocol",
        "techniqueid": "T1048"
    },
    {
        "description": "Adversaries may steal data by exfiltrating it over a symmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.",
        "id": "2445",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Exfiltration Over Symmetric Encrypted Non-C2 Protocol",
        "techniqueid": "T1048.001"
    },
    {
        "description": "Adversaries may steal data by exfiltrating it over an asymmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.",
        "id": "2446",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Exfiltration Over Asymmetric Encrypted Non-C2 Protocol",
        "techniqueid": "T1048.002"
    },
    {
        "description": "Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.",
        "id": "2447",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol",
        "techniqueid": "T1048.003"
    },
    {
        "description": "Adversaries may gather credential material by invoking or forcing a user to automatically provide authentication information through a mechanism in which they can intercept.",
        "id": "2448",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Forced Authentication",
        "techniqueid": "T1187"
    },
    {
        "description": "Adversaries may transfer tools or other files between systems in a compromised environment. Files may be copied from one system to another to stage adversary tools or other files over the course of an operation. Adversaries may copy files laterally between internal victim systems to support lateral movement using inherent file sharing protocols such as file sharing over SMB to connected network shares or with authenticated connections with?SMB/Windows Admin Shares?or?Remote Desktop Protocol. Files can also be copied over on Mac and Linux with native tools like scp, rsync, and sftp.",
        "id": "2449",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Lateral Tool Transfer",
        "techniqueid": "T1570"
    },
    {
        "description": "Adversaries may attempt to position themselves between two or more networked devices using a man-in-the-middle (MiTM) technique to support follow-on behaviors such as?Network Sniffing?or?Transmitted Data Manipulation. By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.",
        "id": "2450",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Man-in-the-Middle",
        "techniqueid": "T1557"
    },
    {
        "description": "By responding to LLMNR/NBT-NS network traffic, adversaries may spoof an authoritative source for name resolution to force communication with an adversary controlled system. This activity may be used to collect or relay authentication materials.",
        "id": "2451",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "LLMNR/NBT-NS Poisoning and SMB Relay",
        "techniqueid": "T1557.001"
    },
    {
        "description": "Adversaries may perform Network Denial of Service (DoS) attacks to degrade or block the availability of targeted resources to users. Network DoS can be performed by exhausting the network bandwidth services rely on. Example resources include specific websites, email services, DNS, and web-based applications. Adversaries have been observed conducting network DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.",
        "id": "2452",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Network Denial of Service",
        "techniqueid": "T1498"
    },
    {
        "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target.?Direct Network Flood?are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.",
        "id": "2453",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Direct Network Flood",
        "techniqueid": "T1498.001"
    },
    {
        "description": "Adversaries may attempt to cause a denial of service by reflecting a high-volume of network traffic to a target. This type of Network DoS takes advantage of a third-party server intermediary that hosts and will respond to a given spoofed source IP address. This third-party server is commonly termed a reflector. An adversary accomplishes a reflection attack by sending packets to reflectors with the spoofed address of the victim. Similar to Direct Network Floods, more than one system may be used to conduct the attack, or a botnet may be used. Likewise, one or more reflector may be used to focus traffic on the target.",
        "id": "2454",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Reflection Amplification",
        "techniqueid": "T1498.002"
    },
    {
        "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).",
        "id": "2455",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Non-Application Layer Protocol",
        "techniqueid": "T1095"
    },
    {
        "description": "An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks. These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment. Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries.",
        "id": "2456",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Remote Access Software",
        "techniqueid": "T1219"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to remotely control machines using Virtual Network Computing (VNC). The adversary may then perform actions as the logged-on user.",
        "id": "2457",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "VNC",
        "techniqueid": "T1021.005"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user.",
        "id": "2458",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "SMB/Windows Admin Shares",
        "techniqueid": "T1021.002"
    },
    {
        "description": "Adversaries may abuse verclsid.exe to proxy execution of malicious code. Verclsid.exe is known as the Extension CLSID Verification Host and is responsible for verifying each shell extension before they are used by Windows Explorer or the Windows Shell.",
        "id": "2459",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Verclsid",
        "techniqueid": "T1218.012"
    },
    {
        "description": "Adversaries may modify the SSH?authorized_keys?file to maintain persistence on a victim host. Linux distributions and macOS commonly use key-based authentication to secure the authentication process of SSH sessions for remote management. The?authorized_keys?file in SSH specifies the SSH keys that can be used for logging into the user account for which the file is configured. This file is usually found in the user's home directory under?<user-home>/.ssh/authorized_keys. Users may edit the system��s SSH config file to modify the directives PubkeyAuthentication and RSAAuthentication to the value \"yes\" to ensure public key and RSA authentication are enabled. The SSH config file is usually located under?/etc/ssh/sshd_config.",
        "id": "2460",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "SSH Authorized Keys",
        "techniqueid": "T1098.004"
    },
    {
        "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.?A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.",
        "id": "2461",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Exploitation of Remote Services",
        "techniqueid": "T1210"
    },
    {
        "description": "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as?Windows Remote Management?can also be used externally.",
        "id": "2462",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "External Remote Services",
        "techniqueid": "T1133"
    },
    {
        "description": "Adversaries may attempt to position themselves between two or more networked devices using a man-in-the-middle (MiTM) technique to support follow-on behaviors such as?Network Sniffing?or?Transmitted Data Manipulation. By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.",
        "id": "2463",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Man-in-the-Middle",
        "techniqueid": "T1557"
    },
    {
        "description": "By responding to LLMNR/NBT-NS network traffic, adversaries may spoof an authoritative source for name resolution to force communication with an adversary controlled system. This activity may be used to collect or relay authentication materials.",
        "id": "2464",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "LLMNR/NBT-NS Poisoning and SMB Relay",
        "techniqueid": "T1557.001"
    },
    {
        "description": "Adversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such as?Network Sniffing?or?Transmitted Data Manipulation.",
        "id": "2465",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "ARP Cache Poisoning",
        "techniqueid": "T1557.002"
    },
    {
        "description": "Adversaries may attempt to get a listing of services running on remote hosts, including those that may be vulnerable to remote software exploitation. Methods to acquire this information include port scans and vulnerability scans using tools that are brought onto a system.",
        "id": "2466",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Network Service Scanning",
        "techniqueid": "T1046"
    },
    {
        "description": "Adversaries may take control of preexisting sessions with remote services to move laterally in an environment. Users may use valid credentials to log into a service specifically designed to accept remote connections, such as telnet, SSH, and RDP. When a user logs into a service, a session will be established that will allow them to maintain a continuous interaction with that service.",
        "id": "2467",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Remote Service Session Hijacking",
        "techniqueid": "T1563"
    },
    {
        "description": "Adversaries may hijack a legitimate user��s remote desktop session to move laterally within an environment. Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).",
        "id": "2468",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "RDP Hijacking",
        "techniqueid": "T1563.002"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.",
        "id": "2469",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Remote Desktop Protocol",
        "techniqueid": "T1021.001"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into remote machines using Secure Shell (SSH). The adversary may then perform actions as the logged-on user.",
        "id": "2470",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "SSH",
        "techniqueid": "T1021.004"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to remotely control machines using Virtual Network Computing (VNC). The adversary may then perform actions as the logged-on user.",
        "id": "2471",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "VNC",
        "techniqueid": "T1021.005"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to interact with remote systems using Windows Remote Management (WinRM). The adversary may then perform actions as the logged-on user.",
        "id": "2472",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Windows Remote Management",
        "techniqueid": "T1021.006"
    },
    {
        "description": "Adversaries may attempt to take advantage of a weakness in an Internet-facing computer or program using software, data, or commands in order to cause unintended or unanticipated behavior. The weakness in the system can be a bug, a glitch, or a design vulnerability. These applications are often websites, but can include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other applications with Internet accessible open sockets, such as web servers and related services. Depending on the flaw being exploited this may include?Exploitation for Defense Evasion.",
        "id": "2473",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Exploit Public-Facing Application",
        "techniqueid": "T1190"
    },
    {
        "description": "Adversaries may attempt to take advantage of a weakness in an Internet-facing computer or program using software, data, or commands in order to cause unintended or unanticipated behavior. The weakness in the system can be a bug, a glitch, or a design vulnerability. These applications are often websites, but can include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other applications with Internet accessible open sockets, such as web servers and related services. Depending on the flaw being exploited this may include?Exploitation for Defense Evasion.",
        "id": "2474",
        "mitigation": "Vulnerability Scanning",
        "mitigationid": "M1016",
        "technique": "Exploit Public-Facing Application",
        "techniqueid": "T1190"
    },
    {
        "description": "Adversaries may target the Management Information Base (MIB) to collect and/or mine valuable information in a network managed using Simple Network Management Protocol (SNMP).",
        "id": "2475",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "SNMP (MIB Dump)",
        "techniqueid": "T1602.001"
    },
    {
        "description": "Adversaries may access network configuration files to collect sensitive data about the device and the network. The network configuration is a file containing parameters that determine the operation of the device. The device typically stores an in-memory copy of the configuration while operating, and a separate configuration on non-volatile storage to load after device reset. Adversaries can inspect the configuration files to reveal information about the target network and its layout, the network device and its software, or identifying legitimate accounts and credentials for later use.",
        "id": "2476",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Network Device Configuration Dump",
        "techniqueid": "T1602.002"
    },
    {
        "description": "Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.",
        "id": "2477",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Endpoint Denial of Service",
        "techniqueid": "T1499"
    },
    {
        "description": "Adversaries may target the operating system (OS) for a DoS attack, since the (OS) is responsible for managing the finite resources on a system. These attacks do not need to exhaust the actual resources on a system since they can simply exhaust the limits that an OS self-imposes to prevent the entire system from being overwhelmed by excessive demands on its capacity.",
        "id": "2478",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "OS Exhaustion Flood",
        "techniqueid": "T1499.001"
    },
    {
        "description": "Adversaries may target the different network services provided by systems to conduct a DoS. Adversaries often target DNS and web services, however others have been targeted as well. Web server software can be attacked through a variety of means, some of which apply generally while others are specific to the software being used to provide the service.",
        "id": "2479",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Service Exhaustion Flood",
        "techniqueid": "T1499.002"
    },
    {
        "description": "Adversaries may target resource intensive features of web applications to cause a denial of service (DoS). Specific features in web applications may be highly resource intensive. Repeated requests to those features may be able to exhaust system resources and deny access to the application or the server itself.",
        "id": "2480",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Application Exhaustion Flood",
        "techniqueid": "T1499.003"
    },
    {
        "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent DoS condition.",
        "id": "2481",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Application or System Exploitation",
        "techniqueid": "T1499.004"
    },
    {
        "description": "Adversaries may steal data by exfiltrating it over a different protocol than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.",
        "id": "2482",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Exfiltration Over Alternative Protocol",
        "techniqueid": "T1048"
    },
    {
        "description": "Adversaries may steal data by exfiltrating it over a symmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.",
        "id": "2483",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Exfiltration Over Symmetric Encrypted Non-C2 Protocol",
        "techniqueid": "T1048.001"
    },
    {
        "description": "Adversaries may steal data by exfiltrating it over an asymmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.",
        "id": "2484",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Exfiltration Over Asymmetric Encrypted Non-C2 Protocol",
        "techniqueid": "T1048.002"
    },
    {
        "description": "Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.",
        "id": "2485",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol",
        "techniqueid": "T1048.003"
    },
    {
        "description": "Adversaries may gather credential material by invoking or forcing a user to automatically provide authentication information through a mechanism in which they can intercept.",
        "id": "2486",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Forced Authentication",
        "techniqueid": "T1187"
    },
    {
        "description": "Adversaries may transfer tools or other files between systems in a compromised environment. Files may be copied from one system to another to stage adversary tools or other files over the course of an operation. Adversaries may copy files laterally between internal victim systems to support lateral movement using inherent file sharing protocols such as file sharing over SMB to connected network shares or with authenticated connections with?SMB/Windows Admin Shares?or?Remote Desktop Protocol. Files can also be copied over on Mac and Linux with native tools like scp, rsync, and sftp.",
        "id": "2487",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Lateral Tool Transfer",
        "techniqueid": "T1570"
    },
    {
        "description": "Adversaries may attempt to position themselves between two or more networked devices using a man-in-the-middle (MiTM) technique to support follow-on behaviors such as?Network Sniffing?or?Transmitted Data Manipulation. By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.",
        "id": "2488",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Man-in-the-Middle",
        "techniqueid": "T1557"
    },
    {
        "description": "By responding to LLMNR/NBT-NS network traffic, adversaries may spoof an authoritative source for name resolution to force communication with an adversary controlled system. This activity may be used to collect or relay authentication materials.",
        "id": "2489",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "LLMNR/NBT-NS Poisoning and SMB Relay",
        "techniqueid": "T1557.001"
    },
    {
        "description": "Adversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such as?Network Sniffing?or?Transmitted Data Manipulation.",
        "id": "2490",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "ARP Cache Poisoning",
        "techniqueid": "T1557.002"
    },
    {
        "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target.?Direct Network Flood?are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.",
        "id": "2491",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Direct Network Flood",
        "techniqueid": "T1498.001"
    },
    {
        "description": "Adversaries may attempt to cause a denial of service by reflecting a high-volume of network traffic to a target. This type of Network DoS takes advantage of a third-party server intermediary that hosts and will respond to a given spoofed source IP address. This third-party server is commonly termed a reflector. An adversary accomplishes a reflection attack by sending packets to reflectors with the spoofed address of the victim. Similar to Direct Network Floods, more than one system may be used to conduct the attack, or a botnet may be used. Likewise, one or more reflector may be used to focus traffic on the target.",
        "id": "2492",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Reflection Amplification",
        "techniqueid": "T1498.002"
    },
    {
        "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).",
        "id": "2493",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Non-Application Layer Protocol",
        "techniqueid": "T1095"
    },
    {
        "description": "Adversaries may tunnel network communications to and from a victim system within a separate protocol to avoid detection/network filtering and/or enable access to otherwise unreachable systems. Tunneling involves explicitly encapsulating a protocol within another. This behavior may conceal malicious traffic by blending in with existing traffic and/or provide an outer layer of encryption (similar to a VPN). Tunneling could also enable routing of network packets that would otherwise not reach their intended destination, such as SMB, RDP, or other traffic that would be filtered by network appliances or not routed over the Internet.",
        "id": "2494",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Protocol Tunneling",
        "techniqueid": "T1572"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to remotely control machines using Virtual Network Computing (VNC). The adversary may then perform actions as the logged-on user.",
        "id": "2495",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "VNC",
        "techniqueid": "T1021.005"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user.",
        "id": "2496",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "SMB/Windows Admin Shares",
        "techniqueid": "T1021.002"
    },
    {
        "description": "Adversaries may abuse verclsid.exe to proxy execution of malicious code. Verclsid.exe is known as the Extension CLSID Verification Host and is responsible for verifying each shell extension before they are used by Windows Explorer or the Windows Shell.",
        "id": "2497",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Verclsid",
        "techniqueid": "T1218.012"
    },
    {
        "description": "Adversaries may use traffic signaling to hide open ports or other malicious functionality used for persistence or command and control. Traffic signaling involves the use of a magic value or sequence that must be sent to a system to trigger a special response, such as opening a closed port or executing a malicious task. This may take the form of sending a series of packets with certain characteristics before a port will be opened that the adversary can use for command and control. Usually this series of packets consists of attempted connections to a predefined sequence of closed ports (i.e.?Port Knocking), but can involve unusual flags, specific strings, or other unique characteristics. After the sequence is completed, opening a port may be accomplished by the host-based firewall, but could also be implemented by custom software.",
        "id": "2498",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Traffic Signaling",
        "techniqueid": "T1205"
    },
    {
        "description": "Adversaries may modify plist files to automatically run an application when a user logs in. Starting in Mac OS X 10.7 (Lion), users can specify certain applications to be re-opened when a user logs into their machine after reboot. While this is usually done via a Graphical User Interface (GUI) on an app-by-app basis, there are property list files (plist) that contain this information as well located at?~/Library/Preferences/com.apple.loginwindow.plist?and?~/Library/Preferences/ByHost/com.apple.loginwindow.* .plist.",
        "id": "2499",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Re-opened Applications",
        "techniqueid": "T1547.007"
    },
    {
        "description": "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as?Windows Remote Management?can also be used externally.",
        "id": "2500",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "External Remote Services",
        "techniqueid": "T1133"
    },
    {
        "description": "Adversaries may carry out malicious operations using a virtual instance to avoid detection. A wide variety of virtualization technologies exist that allow for the emulation of a computer or computing environment. By running malicious code inside of a virtual instance, adversaries can hide artifacts associated with their behavior from security tools that are unable to monitor activity inside the virtual instance. Additionally, depending on the virtual networking implementation (ex: bridged adapter), network traffic generated by the virtual instance can be difficult to trace back to the compromised host as the IP address and hostname might not match known values.",
        "id": "2501",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Run Virtual Instance",
        "techniqueid": "T1564.006"
    },
    {
        "description": "By responding to LLMNR/NBT-NS network traffic, adversaries may spoof an authoritative source for name resolution to force communication with an adversary controlled system. This activity may be used to collect or relay authentication materials.",
        "id": "2502",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "LLMNR/NBT-NS Poisoning and SMB Relay",
        "techniqueid": "T1557.001"
    },
    {
        "description": "Adversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such as?Network Sniffing?or?Transmitted Data Manipulation.",
        "id": "2503",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "ARP Cache Poisoning",
        "techniqueid": "T1557.002"
    },
    {
        "description": "Adversaries may attempt to get a listing of services running on remote hosts, including those that may be vulnerable to remote software exploitation. Methods to acquire this information include port scans and vulnerability scans using tools that are brought onto a system.",
        "id": "2504",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Network Service Scanning",
        "techniqueid": "T1046"
    },
    {
        "description": "Adversaries may leverage Microsoft Office-based applications for persistence between startups. Microsoft Office is a fairly common application suite on Windows-based operating systems within an enterprise network. There are multiple mechanisms that can be used with Office for persistence when an Office-based application is started; this can include the use of Office Template Macros and add-ins.",
        "id": "2505",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Office Application Startup",
        "techniqueid": "T1137"
    },
    {
        "description": "Adversaries may hijack a legitimate user's SSH session to move laterally within an environment. Secure Shell (SSH) is a standard means of remote access on Linux and macOS systems. It allows a user to connect to another system via an encrypted tunnel, commonly authenticating through a password, certificate or the use of an asymmetric encryption key pair.",
        "id": "2506",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "SSH Hijacking",
        "techniqueid": "T1563.001"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.",
        "id": "2507",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Remote Desktop Protocol",
        "techniqueid": "T1021.001"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to interact with remote machines by taking advantage of Distributed Component Object Model (DCOM). The adversary may then perform actions as the logged-on user.",
        "id": "2508",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Distributed Component Object Model",
        "techniqueid": "T1021.003"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to remotely control machines using Virtual Network Computing (VNC). The adversary may then perform actions as the logged-on user.",
        "id": "2509",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "VNC",
        "techniqueid": "T1021.005"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to interact with remote systems using Windows Remote Management (WinRM). The adversary may then perform actions as the logged-on user.",
        "id": "2510",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Windows Remote Management",
        "techniqueid": "T1021.006"
    },
    {
        "description": "Adversaries may move onto systems, possibly those on disconnected or air-gapped networks, by copying malware to removable media and taking advantage of Autorun features when the media is inserted into a system and executes. In the case of Lateral Movement, this may occur through modification of executable files stored on removable media or by copying malware and renaming it to look like a legitimate file to trick users into executing it on a separate system. In the case of Initial Access, this may occur through manual manipulation of the media, modification of systems used to initially format the media, or modification to the media's firmware itself.",
        "id": "2511",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Replication Through Removable Media",
        "techniqueid": "T1091"
    },
    {
        "description": "Adversaries may attempt to take advantage of a weakness in an Internet-facing computer or program using software, data, or commands in order to cause unintended or unanticipated behavior. The weakness in the system can be a bug, a glitch, or a design vulnerability. These applications are often websites, but can include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other applications with Internet accessible open sockets, such as web servers and related services. Depending on the flaw being exploited this may include?Exploitation for Defense Evasion.",
        "id": "2512",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Exploit Public-Facing Application",
        "techniqueid": "T1190"
    },
    {
        "description": "An adversary may disable cloud logging capabilities and integrations to limit what data is collected on their activities and avoid detection.",
        "id": "2513",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Disable Cloud Logs",
        "techniqueid": "T1562.008"
    },
    {
        "description": "Adversaries may abuse netbooting to load an unauthorized network device operating system from a Trivial File Transfer Protocol (TFTP) server. TFTP boot (netbooting) is commonly used by network administrators to load configuration-controlled network device images from a centralized management server. Netbooting is one option in the boot sequence and can be used to centralize, manage, and control device images.",
        "id": "2514",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "TFTP Boot",
        "techniqueid": "T1542.005"
    },
    {
        "description": "Adversaries may delete or alter generated artifacts on a host system, including logs or captured files such as quarantined malware. Locations and format of logs are platform or product-specific, however standard operating system logs are captured as Windows events or Linux/macOS files such as?Bash History?and /var/log/*.",
        "id": "2515",
        "mitigation": "Remote Data Storage",
        "mitigationid": "M1029",
        "technique": "Indicator Removal on Host",
        "techniqueid": "T1070"
    },
    {
        "description": "Adversaries may clear Windows Event Logs to hide the activity of an intrusion. Windows Event Logs are a record of a computer's alerts and notifications. There are three system-defined sources of events: System, Application, and Security, with five event types: Error, Warning, Information, Success Audit, and Failure Audit.",
        "id": "2516",
        "mitigation": "Remote Data Storage",
        "mitigationid": "M1029",
        "technique": "Clear Windows Event Logs",
        "techniqueid": "T1070.001"
    },
    {
        "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the?/var/log/?directory. Subfolders in this directory categorize logs by their related functions, such as:",
        "id": "2517",
        "mitigation": "Remote Data Storage",
        "mitigationid": "M1029",
        "technique": "Clear Linux or Mac System Logs",
        "techniqueid": "T1070.002"
    },
    {
        "description": "Adversaries may abuse the?at?utility to perform task scheduling for initial or recurring execution of malicious code. The?at?command within Linux operating systems enables administrators to schedule tasks.",
        "id": "2518",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "At (Linux)",
        "techniqueid": "T1053.001"
    },
    {
        "description": "Adversaries may abuse the?Launchd?daemon to perform task scheduling for initial or recurring execution of malicious code. The?launchd?daemon, native to macOS, is responsible for loading and maintaining services within the operating system. This process loads the parameters for each launch-on-demand system-level daemon from the property list (plist) files found in?/System/Library/LaunchDaemons?and?/Library/LaunchDaemons?. These LaunchDaemons have property list files which point to the executables that will be launched .",
        "id": "2519",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Launchd",
        "techniqueid": "T1053.004"
    },
    {
        "description": "Adversaries may abuse the?cron?utility to perform task scheduling for initial or recurring execution of malicious code. The?cron?utility is a time-based job scheduler for Unix-like operating systems. The?crontab?file contains the schedule of cron entries to be run and the specified times for execution. Any?crontab?files are stored in operating system-specific file paths.",
        "id": "2520",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Cron",
        "techniqueid": "T1053.003"
    },
    {
        "description": "An adversary may disable cloud logging capabilities and integrations to limit what data is collected on their activities and avoid detection.",
        "id": "2521",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Disable Cloud Logs",
        "techniqueid": "T1562.008"
    },
    {
        "description": "Adversaries may abuse netbooting to load an unauthorized network device operating system from a Trivial File Transfer Protocol (TFTP) server. TFTP boot (netbooting) is commonly used by network administrators to load configuration-controlled network device images from a centralized management server. Netbooting is one option in the boot sequence and can be used to centralize, manage, and control device images.",
        "id": "2522",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "TFTP Boot",
        "techniqueid": "T1542.005"
    },
    {
        "description": "Adversaries may delete or alter generated artifacts on a host system, including logs or captured files such as quarantined malware. Locations and format of logs are platform or product-specific, however standard operating system logs are captured as Windows events or Linux/macOS files such as?Bash History?and /var/log/*.",
        "id": "2523",
        "mitigation": "Remote Data Storage",
        "mitigationid": "M1029",
        "technique": "Indicator Removal on Host",
        "techniqueid": "T1070"
    },
    {
        "description": "Adversaries may clear Windows Event Logs to hide the activity of an intrusion. Windows Event Logs are a record of a computer's alerts and notifications. There are three system-defined sources of events: System, Application, and Security, with five event types: Error, Warning, Information, Success Audit, and Failure Audit.",
        "id": "2524",
        "mitigation": "Remote Data Storage",
        "mitigationid": "M1029",
        "technique": "Clear Windows Event Logs",
        "techniqueid": "T1070.001"
    },
    {
        "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the?/var/log/?directory. Subfolders in this directory categorize logs by their related functions, such as:",
        "id": "2525",
        "mitigation": "Remote Data Storage",
        "mitigationid": "M1029",
        "technique": "Clear Linux or Mac System Logs",
        "techniqueid": "T1070.002"
    },
    {
        "description": "Adversaries may abuse the?at?utility to perform task scheduling for initial or recurring execution of malicious code. The?at?command within Linux operating systems enables administrators to schedule tasks.",
        "id": "2526",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "At (Linux)",
        "techniqueid": "T1053.001"
    },
    {
        "description": "Adversaries may abuse the?Launchd?daemon to perform task scheduling for initial or recurring execution of malicious code. The?launchd?daemon, native to macOS, is responsible for loading and maintaining services within the operating system. This process loads the parameters for each launch-on-demand system-level daemon from the property list (plist) files found in?/System/Library/LaunchDaemons?and?/Library/LaunchDaemons?. These LaunchDaemons have property list files which point to the executables that will be launched .",
        "id": "2527",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Launchd",
        "techniqueid": "T1053.004"
    },
    {
        "description": "Adversaries may abuse the?cron?utility to perform task scheduling for initial or recurring execution of malicious code. The?cron?utility is a time-based job scheduler for Unix-like operating systems. The?crontab?file contains the schedule of cron entries to be run and the specified times for execution. Any?crontab?files are stored in operating system-specific file paths.",
        "id": "2528",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Cron",
        "techniqueid": "T1053.003"
    },
    {
        "description": "An adversary may disable cloud logging capabilities and integrations to limit what data is collected on their activities and avoid detection.",
        "id": "2529",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Disable Cloud Logs",
        "techniqueid": "T1562.008"
    },
    {
        "description": "Adversaries may abuse netbooting to load an unauthorized network device operating system from a Trivial File Transfer Protocol (TFTP) server. TFTP boot (netbooting) is commonly used by network administrators to load configuration-controlled network device images from a centralized management server. Netbooting is one option in the boot sequence and can be used to centralize, manage, and control device images.",
        "id": "2530",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "TFTP Boot",
        "techniqueid": "T1542.005"
    },
    {
        "description": "Adversaries may delete or alter generated artifacts on a host system, including logs or captured files such as quarantined malware. Locations and format of logs are platform or product-specific, however standard operating system logs are captured as Windows events or Linux/macOS files such as?Bash History?and /var/log/*.",
        "id": "2531",
        "mitigation": "Remote Data Storage",
        "mitigationid": "M1029",
        "technique": "Indicator Removal on Host",
        "techniqueid": "T1070"
    },
    {
        "description": "Adversaries may clear Windows Event Logs to hide the activity of an intrusion. Windows Event Logs are a record of a computer's alerts and notifications. There are three system-defined sources of events: System, Application, and Security, with five event types: Error, Warning, Information, Success Audit, and Failure Audit.",
        "id": "2532",
        "mitigation": "Remote Data Storage",
        "mitigationid": "M1029",
        "technique": "Clear Windows Event Logs",
        "techniqueid": "T1070.001"
    },
    {
        "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the?/var/log/?directory. Subfolders in this directory categorize logs by their related functions, such as:",
        "id": "2533",
        "mitigation": "Remote Data Storage",
        "mitigationid": "M1029",
        "technique": "Clear Linux or Mac System Logs",
        "techniqueid": "T1070.002"
    },
    {
        "description": "Adversaries may abuse the?at.exe?utility to perform task scheduling for initial or recurring execution of malicious code. The?at?utility exists as an executable within Windows for scheduling tasks at a specified time and date. Using?at?requires that the Task Scheduler service be running, and the user to be logged on as a member of the local Administrators group.",
        "id": "2534",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "At (Windows)",
        "techniqueid": "T1053.002"
    },
    {
        "description": "Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The?schtasks?can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task.",
        "id": "2535",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Scheduled Task",
        "techniqueid": "T1053.005"
    },
    {
        "description": "Adversaries may abuse the?at?utility to perform task scheduling for initial or recurring execution of malicious code. The?at?command within Linux operating systems enables administrators to schedule tasks.",
        "id": "2536",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "At (Linux)",
        "techniqueid": "T1053.001"
    },
    {
        "description": "Adversaries may abuse the?at?utility to perform task scheduling for initial or recurring execution of malicious code. The?at?command within Linux operating systems enables administrators to schedule tasks.",
        "id": "2537",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "At (Linux)",
        "techniqueid": "T1053.001"
    },
    {
        "description": "Adversaries may abuse the?Launchd?daemon to perform task scheduling for initial or recurring execution of malicious code. The?launchd?daemon, native to macOS, is responsible for loading and maintaining services within the operating system. This process loads the parameters for each launch-on-demand system-level daemon from the property list (plist) files found in?/System/Library/LaunchDaemons?and?/Library/LaunchDaemons?. These LaunchDaemons have property list files which point to the executables that will be launched .",
        "id": "2538",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Launchd",
        "techniqueid": "T1053.004"
    },
    {
        "description": "Adversaries may abuse the?cron?utility to perform task scheduling for initial or recurring execution of malicious code. The?cron?utility is a time-based job scheduler for Unix-like operating systems. The?crontab?file contains the schedule of cron entries to be run and the specified times for execution. Any?crontab?files are stored in operating system-specific file paths.",
        "id": "2539",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Cron",
        "techniqueid": "T1053.003"
    },
    {
        "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity. By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making.",
        "id": "2540",
        "mitigation": "Remote Data Storage",
        "mitigationid": "M1029",
        "technique": "Stored Data Manipulation",
        "techniqueid": "T1565.001"
    },
    {
        "description": "Adversaries may delete or alter generated artifacts on a host system, including logs or captured files such as quarantined malware. Locations and format of logs are platform or product-specific, however standard operating system logs are captured as Windows events or Linux/macOS files such as?Bash History?and /var/log/*.",
        "id": "2541",
        "mitigation": "Remote Data Storage",
        "mitigationid": "M1029",
        "technique": "Indicator Removal on Host",
        "techniqueid": "T1070"
    },
    {
        "description": "Adversaries may clear Windows Event Logs to hide the activity of an intrusion. Windows Event Logs are a record of a computer's alerts and notifications. There are three system-defined sources of events: System, Application, and Security, with five event types: Error, Warning, Information, Success Audit, and Failure Audit.",
        "id": "2542",
        "mitigation": "Remote Data Storage",
        "mitigationid": "M1029",
        "technique": "Clear Windows Event Logs",
        "techniqueid": "T1070.001"
    },
    {
        "description": "Adversaries may abuse the?at?utility to perform task scheduling for initial or recurring execution of malicious code. The?at?command within Linux operating systems enables administrators to schedule tasks.",
        "id": "2543",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "At (Linux)",
        "techniqueid": "T1053.001"
    },
    {
        "description": "Adversaries may abuse the?Launchd?daemon to perform task scheduling for initial or recurring execution of malicious code. The?launchd?daemon, native to macOS, is responsible for loading and maintaining services within the operating system. This process loads the parameters for each launch-on-demand system-level daemon from the property list (plist) files found in?/System/Library/LaunchDaemons?and?/Library/LaunchDaemons?. These LaunchDaemons have property list files which point to the executables that will be launched .",
        "id": "2544",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Launchd",
        "techniqueid": "T1053.004"
    },
    {
        "description": "Adversaries may abuse the?cron?utility to perform task scheduling for initial or recurring execution of malicious code. The?cron?utility is a time-based job scheduler for Unix-like operating systems. The?crontab?file contains the schedule of cron entries to be run and the specified times for execution. Any?crontab?files are stored in operating system-specific file paths.",
        "id": "2545",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Cron",
        "techniqueid": "T1053.003"
    },
    {
        "description": "Adversaries may delete or alter generated artifacts on a host system, including logs or captured files such as quarantined malware. Locations and format of logs are platform or product-specific, however standard operating system logs are captured as Windows events or Linux/macOS files such as?Bash History?and /var/log/*.",
        "id": "2546",
        "mitigation": "Remote Data Storage",
        "mitigationid": "M1029",
        "technique": "Indicator Removal on Host",
        "techniqueid": "T1070"
    },
    {
        "description": "Adversaries may clear Windows Event Logs to hide the activity of an intrusion. Windows Event Logs are a record of a computer's alerts and notifications. There are three system-defined sources of events: System, Application, and Security, with five event types: Error, Warning, Information, Success Audit, and Failure Audit.",
        "id": "2547",
        "mitigation": "Remote Data Storage",
        "mitigationid": "M1029",
        "technique": "Clear Windows Event Logs",
        "techniqueid": "T1070.001"
    },
    {
        "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the?/var/log/?directory. Subfolders in this directory categorize logs by their related functions, such as:",
        "id": "2548",
        "mitigation": "Remote Data Storage",
        "mitigationid": "M1029",
        "technique": "Clear Linux or Mac System Logs",
        "techniqueid": "T1070.002"
    },
    {
        "description": "Adversaries may abuse the?at?utility to perform task scheduling for initial or recurring execution of malicious code. The?at?command within Linux operating systems enables administrators to schedule tasks.",
        "id": "2549",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "At (Linux)",
        "techniqueid": "T1053.001"
    },
    {
        "description": "Adversaries may abuse the?Launchd?daemon to perform task scheduling for initial or recurring execution of malicious code. The?launchd?daemon, native to macOS, is responsible for loading and maintaining services within the operating system. This process loads the parameters for each launch-on-demand system-level daemon from the property list (plist) files found in?/System/Library/LaunchDaemons?and?/Library/LaunchDaemons?. These LaunchDaemons have property list files which point to the executables that will be launched .",
        "id": "2550",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Launchd",
        "techniqueid": "T1053.004"
    },
    {
        "description": "Adversaries may abuse the?cron?utility to perform task scheduling for initial or recurring execution of malicious code. The?cron?utility is a time-based job scheduler for Unix-like operating systems. The?crontab?file contains the schedule of cron entries to be run and the specified times for execution. Any?crontab?files are stored in operating system-specific file paths.",
        "id": "2551",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Cron",
        "techniqueid": "T1053.003"
    },
    {
        "description": "Adversaries may abuse the?at?utility to perform task scheduling for initial or recurring execution of malicious code. The?at?command within Linux operating systems enables administrators to schedule tasks.",
        "id": "2552",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "At (Linux)",
        "techniqueid": "T1053.001"
    },
    {
        "description": "Adversaries may abuse the?Launchd?daemon to perform task scheduling for initial or recurring execution of malicious code. The?launchd?daemon, native to macOS, is responsible for loading and maintaining services within the operating system. This process loads the parameters for each launch-on-demand system-level daemon from the property list (plist) files found in?/System/Library/LaunchDaemons?and?/Library/LaunchDaemons?. These LaunchDaemons have property list files which point to the executables that will be launched .",
        "id": "2553",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Launchd",
        "techniqueid": "T1053.004"
    },
    {
        "description": "Adversaries may abuse the?cron?utility to perform task scheduling for initial or recurring execution of malicious code. The?cron?utility is a time-based job scheduler for Unix-like operating systems. The?crontab?file contains the schedule of cron entries to be run and the specified times for execution. Any?crontab?files are stored in operating system-specific file paths.",
        "id": "2554",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Cron",
        "techniqueid": "T1053.003"
    },
    {
        "description": "Adversaries may gain access to a system through a user visiting a website over the normal course of browsing. With this technique, the user's web browser is typically targeted for exploitation, but adversaries may also use compromised websites for non-exploitation behavior such as acquiring?Application Access Token.",
        "id": "2555",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Drive-by Compromise",
        "techniqueid": "T1189"
    },
    {
        "description": "Adversaries may dynamically establish connections to command and control infrastructure to evade common detections and remediations. This may be achieved by using malware that shares a common algorithm with the infrastructure the adversary uses to receive the malware's communications. These calculations can be used to dynamically adjust parameters such as the domain name, IP address, or port number the malware uses for command and control.",
        "id": "2556",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "Dynamic Resolution",
        "techniqueid": "T1568"
    },
    {
        "description": "Adversaries may make use of Domain Generation Algorithms (DGAs) to dynamically identify a destination domain for command and control traffic rather than relying on a list of static IP addresses or domains. This has the advantage of making it much harder for defenders block, track, or take over the command and control channel, as there potentially could be thousands of domains that malware can check for instructions.",
        "id": "2557",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "Domain Generation Algorithms",
        "techniqueid": "T1568.002"
    },
    {
        "description": "Adversaries may communicate using the Domain Name System (DNS) application layer protocol to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.",
        "id": "2558",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "DNS",
        "techniqueid": "T1071.004"
    },
    {
        "description": "Adversaries may communicate using the Domain Name System (DNS) application layer protocol to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.",
        "id": "2559",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "DNS",
        "techniqueid": "T1071.004"
    },
    {
        "description": "Adversaries may steal data by exfiltrating it over a different protocol than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.",
        "id": "2560",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Exfiltration Over Alternative Protocol",
        "techniqueid": "T1048"
    },
    {
        "description": "Adversaries may steal data by exfiltrating it over a symmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.",
        "id": "2561",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Exfiltration Over Symmetric Encrypted Non-C2 Protocol",
        "techniqueid": "T1048.001"
    },
    {
        "description": "Adversaries may steal data by exfiltrating it over an asymmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.",
        "id": "2562",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Exfiltration Over Asymmetric Encrypted Non-C2 Protocol",
        "techniqueid": "T1048.002"
    },
    {
        "description": "Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.",
        "id": "2563",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol",
        "techniqueid": "T1048.003"
    },
    {
        "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of?Unix Shell?while Windows installations include the?Windows Command Shell?and?PowerShell.",
        "id": "2564",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "Command and Scripting Interpreter",
        "techniqueid": "T1059"
    },
    {
        "description": "Adversaries may abuse JavaScript and/or JScript for execution. JavaScript (JS) is a platform-agnostic scripting language (compiled just-in-time at runtime) commonly associated with scripts in webpages, though JS can be executed in runtime environments outside the browser.",
        "id": "2565",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "JavaScript/JScript",
        "techniqueid": "T1059.007"
    },
    {
        "description": "Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as?Component Object Model?and the?Native API?through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.",
        "id": "2566",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "Visual Basic",
        "techniqueid": "T1059.005"
    },
    {
        "description": "Adversaries may gain access to a system through a user visiting a website over the normal course of browsing. With this technique, the user's web browser is typically targeted for exploitation, but adversaries may also use compromised websites for non-exploitation behavior such as acquiring?Application Access Token.",
        "id": "2567",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "Drive-by Compromise",
        "techniqueid": "T1189"
    },
    {
        "description": "Adversaries may use an existing, legitimate external Web service to exfiltrate data rather than their primary command and control channel. Popular Web services acting as an exfiltration mechanism may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to compromise. Firewall rules may also already exist to permit traffic to these services.",
        "id": "2568",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "Exfiltration Over Web Service",
        "techniqueid": "T1567"
    },
    {
        "description": "Adversaries may exfiltrate data to a code repository rather than over their primary command and control channel. Code repositories are often accessible via an API (ex: https://api.github.com). Access to these APIs are often over HTTPS, which gives the adversary an additional level of protection.",
        "id": "2569",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "Exfiltration to Code Repository",
        "techniqueid": "T1567.001"
    },
    {
        "description": "Adversaries may exfiltrate data to a cloud storage service rather than over their primary command and control channel. Cloud storage services allow for the storage, edit, and retrieval of data from a remote cloud storage server over the Internet.",
        "id": "2570",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "Exfiltration to Cloud Storage",
        "techniqueid": "T1567.002"
    },
    {
        "description": "Adversaries may send phishing messages to gain access to victim systems. All forms of phishing are electronically delivered social engineering. Phishing can be targeted, known as spearphishing. In spearphishing, a specific individual, company, or industry will be targeted by the adversary. More generally, adversaries can conduct non-targeted phishing, such as in mass malware spam campaigns.",
        "id": "2571",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "Phishing",
        "techniqueid": "T1566"
    },
    {
        "description": "Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon?User Execution?to gain execution.",
        "id": "2572",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "Spearphishing Attachment",
        "techniqueid": "T1566.001"
    },
    {
        "description": "Adversaries may send spearphishing emails with a malicious link in an attempt to gain access to victim systems. Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments.",
        "id": "2573",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "Spearphishing Link",
        "techniqueid": "T1566.002"
    },
    {
        "description": "Adversaries may send spearphishing messages via third-party services in an attempt to gain access to victim systems. Spearphishing via service is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of third party services rather than directly via enterprise email channels.",
        "id": "2574",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "Spearphishing via Service",
        "techniqueid": "T1566.003"
    },
    {
        "description": "Adversaries may abuse Compiled HTML files (.chm) to conceal malicious code. CHM files are commonly distributed as part of the Microsoft HTML Help system. CHM files are compressed compilations of various content such as HTML documents, images, and scripting/web related programming languages such VBA, JScript, Java, and ActiveX. CHM content is displayed using underlying components of the Internet Explorer browser loaded by the HTML Help executable program (hh.exe).",
        "id": "2575",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "Compiled HTML File",
        "techniqueid": "T1218.001"
    },
    {
        "description": "An adversary may rely upon specific actions by a user in order to gain execution. Users may be subjected to social engineering to get them to execute malicious code by, for example, opening a malicious document file or link. These user actions will typically be observed as follow-on behavior from forms of?Phishing.",
        "id": "2576",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "User Execution",
        "techniqueid": "T1204"
    },
    {
        "description": "An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from?Spearphishing Link. Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via?Exploitation for Client Execution. Links may also lead users to download files that require execution via?Malicious File.",
        "id": "2577",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "Malicious Link",
        "techniqueid": "T1204.001"
    },
    {
        "description": "Adversaries may use an existing, legitimate external Web service as a means for relaying data to/from a compromised system. Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.",
        "id": "2578",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "Web Service",
        "techniqueid": "T1102"
    },
    {
        "description": "Adversaries may use an existing, legitimate external Web service to host information that points to additional command and control (C2) infrastructure. Adversaries may post content, known as a dead drop resolver, on Web services with embedded (and often obfuscated/encoded) domains or IP addresses. Once infected, victims will reach out to and be redirected by these resolvers.",
        "id": "2579",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "Dead Drop Resolver",
        "techniqueid": "T1102.001"
    },
    {
        "description": "Adversaries may use an existing, legitimate external Web service as a means for sending commands to and receiving output from a compromised system over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems can then send the output from those commands back over that Web service channel. The return traffic may occur in a variety of ways, depending on the Web service being utilized. For example, the return traffic may take the form of the compromised system posting a comment on a forum, issuing a pull request to development project, updating a document hosted on a Web service, or by sending a Tweet.",
        "id": "2580",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "Bidirectional Communication",
        "techniqueid": "T1102.002"
    },
    {
        "description": "Adversaries may use an existing, legitimate external Web service as a means for sending commands to a compromised system without receiving return output over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems may opt to send the output from those commands back over a different C2 channel, including to another distinct Web service. Alternatively, compromised systems may return no output at all in cases where adversaries want to send instructions to systems and do not want a response.",
        "id": "2581",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "One-Way Communication",
        "techniqueid": "T1102.003"
    },
    {
        "description": "Adversaries may communicate using the Domain Name System (DNS) application layer protocol to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.",
        "id": "2582",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "DNS",
        "techniqueid": "T1071.004"
    },
    {
        "description": "Adversaries may tunnel network communications to and from a victim system within a separate protocol to avoid detection/network filtering and/or enable access to otherwise unreachable systems. Tunneling involves explicitly encapsulating a protocol within another. This behavior may conceal malicious traffic by blending in with existing traffic and/or provide an outer layer of encryption (similar to a VPN). Tunneling could also enable routing of network packets that would otherwise not reach their intended destination, such as SMB, RDP, or other traffic that would be filtered by network appliances or not routed over the Internet.",
        "id": "2583",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Protocol Tunneling",
        "techniqueid": "T1572"
    },
    {
        "description": "Adversaries may use a connection proxy to direct network traffic between systems or act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including?HTRAN, ZXProxy, and ZXPortMap. Adversaries use these types of proxies to manage command and control communications, reduce the number of simultaneous outbound network connections, provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between victims to avoid suspicion. Adversaries may chain together multiple proxies to further disguise the source of malicious traffic.",
        "id": "2584",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Proxy",
        "techniqueid": "T1090"
    },
    {
        "description": "To disguise the source of malicious traffic, adversaries may chain together multiple proxies. Typically, a defender will be able to identify the last proxy traffic traversed before it enters their network; the defender may or may not be able to identify any previous proxies before the last-hop proxy. This technique makes identifying the original source of the malicious traffic even more difficult by requiring the defender to trace malicious traffic through several proxies to identify its source. A particular variant of this behavior is to use onion routing networks, such as the publicly available TOR network.",
        "id": "2585",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Multi-hop Proxy",
        "techniqueid": "T1090.003"
    },
    {
        "description": "An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks. These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment. Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries.",
        "id": "2586",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Remote Access Software",
        "techniqueid": "T1219"
    },
    {
        "description": "Adversaries may abuse Internet browser extensions to establish persistence access to victim systems. Browser extensions or plugins are small programs that can add functionality and customize aspects of Internet browsers. They can be installed directly or through a browser's app store and generally have access and permissions to everything that the browser can access.",
        "id": "2587",
        "mitigation": "Limit Software Installation",
        "mitigationid": "M1033",
        "technique": "Browser Extensions",
        "techniqueid": "T1176"
    },
    {
        "description": "Adversaries may abuse Internet browser extensions to establish persistence access to victim systems. Browser extensions or plugins are small programs that can add functionality and customize aspects of Internet browsers. They can be installed directly or through a browser's app store and generally have access and permissions to everything that the browser can access.",
        "id": "2588",
        "mitigation": "Execution Prevention",
        "mitigationid": "M1038",
        "technique": "Browser Extensions",
        "techniqueid": "T1176"
    },
    {
        "description": "Adversaries may leverage Microsoft Office-based applications for persistence between startups. Microsoft Office is a fairly common application suite on Windows-based operating systems within an enterprise network. There are multiple mechanisms that can be used with Office for persistence when an Office-based application is started; this can include the use of Office Template Macros and add-ins.",
        "id": "2589",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Office Application Startup",
        "techniqueid": "T1137"
    },
    {
        "description": "Adversaries may abuse Microsoft Office templates to obtain persistence on a compromised system. Microsoft Office contains templates that are part of common Office applications and are used to customize styles. The base templates within the application are used each time an application starts.",
        "id": "2590",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Office Template Macros",
        "techniqueid": "T1137.001"
    },
    {
        "description": "Adversaries may abuse Internet browser extensions to establish persistence access to victim systems. Browser extensions or plugins are small programs that can add functionality and customize aspects of Internet browsers. They can be installed directly or through a browser's app store and generally have access and permissions to everything that the browser can access.",
        "id": "2591",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Browser Extensions",
        "techniqueid": "T1176"
    },
    {
        "description": "",
        "id": "2592",
        "mitigation": "",
        "mitigationid": "",
        "technique": "",
        "techniqueid": ""
    },
    {
        "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of?Unix Shell?while Windows installations include the?Windows Command Shell?and?PowerShell.",
        "id": "2593",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "Command and Scripting Interpreter",
        "techniqueid": "T1059"
    },
    {
        "description": "Adversaries may abuse JavaScript and/or JScript for execution. JavaScript (JS) is a platform-agnostic scripting language (compiled just-in-time at runtime) commonly associated with scripts in webpages, though JS can be executed in runtime environments outside the browser.",
        "id": "2594",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "JavaScript/JScript",
        "techniqueid": "T1059.007"
    },
    {
        "description": "Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as?Component Object Model?and the?Native API?through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.",
        "id": "2595",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "Visual Basic",
        "techniqueid": "T1059.005"
    },
    {
        "description": "Adversaries may gain access to a system through a user visiting a website over the normal course of browsing. With this technique, the user's web browser is typically targeted for exploitation, but adversaries may also use compromised websites for non-exploitation behavior such as acquiring?Application Access Token.",
        "id": "2596",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "Drive-by Compromise",
        "techniqueid": "T1189"
    },
    {
        "description": "Adversaries may send phishing messages to gain access to victim systems. All forms of phishing are electronically delivered social engineering. Phishing can be targeted, known as spearphishing. In spearphishing, a specific individual, company, or industry will be targeted by the adversary. More generally, adversaries can conduct non-targeted phishing, such as in mass malware spam campaigns.",
        "id": "2597",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "Phishing",
        "techniqueid": "T1566"
    },
    {
        "description": "Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon?User Execution?to gain execution.",
        "id": "2598",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "Spearphishing Attachment",
        "techniqueid": "T1566.001"
    },
    {
        "description": "Adversaries may abuse Compiled HTML files (.chm) to conceal malicious code. CHM files are commonly distributed as part of the Microsoft HTML Help system. CHM files are compressed compilations of various content such as HTML documents, images, and scripting/web related programming languages such VBA, JScript, Java, and ActiveX. CHM content is displayed using underlying components of the Internet Explorer browser loaded by the HTML Help executable program (hh.exe).",
        "id": "2599",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "Compiled HTML File",
        "techniqueid": "T1218.001"
    },
    {
        "description": "An adversary may rely upon specific actions by a user in order to gain execution. Users may be subjected to social engineering to get them to execute malicious code by, for example, opening a malicious document file or link. These user actions will typically be observed as follow-on behavior from forms of?Phishing.",
        "id": "2600",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "User Execution",
        "techniqueid": "T1204"
    },
    {
        "description": "An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from?Spearphishing Link. Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via?Exploitation for Client Execution. Links may also lead users to download files that require execution via?Malicious File.",
        "id": "2601",
        "mitigation": "Restrict Web-Based Content",
        "mitigationid": "M1021",
        "technique": "Malicious Link",
        "techniqueid": "T1204.001"
    },
    {
        "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of?Unix Shell?while Windows installations include the?Windows Command Shell?and?PowerShell.",
        "id": "2602",
        "mitigation": "Antivirus/Antimalware",
        "mitigationid": "M1049",
        "technique": "Command and Scripting Interpreter",
        "techniqueid": "T1059"
    },
    {
        "description": "Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as?Component Object Model?and the?Native API?through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.",
        "id": "2603",
        "mitigation": "Antivirus/Antimalware",
        "mitigationid": "M1049",
        "technique": "Visual Basic",
        "techniqueid": "T1059.005"
    },
    {
        "description": "Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the?Start-Process?cmdlet which can be used to run an executable and the?Invoke-Command?cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).",
        "id": "2604",
        "mitigation": "Antivirus/Antimalware",
        "mitigationid": "M1049",
        "technique": "PowerShell",
        "techniqueid": "T1059.001"
    },
    {
        "description": "Adversaries may abuse Python commands and scripts for execution. Python is a very popular scripting/programming language, with capabilities to perform many functions. Python can be executed interactively from the command-line (via the?python.exe?interpreter) or via scripts (.py) that can be written and distributed to different systems. Python code can also be compiled into binary executables.",
        "id": "2605",
        "mitigation": "Antivirus/Antimalware",
        "mitigationid": "M1049",
        "technique": "Python",
        "techniqueid": "T1059.006"
    },
    {
        "description": "Adversaries may modify the kernel to automatically execute programs on system boot. Loadable Kernel Modules (LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. ?",
        "id": "2606",
        "mitigation": "Antivirus/Antimalware",
        "mitigationid": "M1049",
        "technique": "Kernel Modules and Extensions",
        "techniqueid": "T1547.006"
    },
    {
        "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of?Unix Shell?while Windows installations include the?Windows Command Shell?and?PowerShell.",
        "id": "2607",
        "mitigation": "Antivirus/Antimalware",
        "mitigationid": "M1049",
        "technique": "Command and Scripting Interpreter",
        "techniqueid": "T1059"
    },
    {
        "description": "Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as?Component Object Model?and the?Native API?through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.",
        "id": "2608",
        "mitigation": "Antivirus/Antimalware",
        "mitigationid": "M1049",
        "technique": "Visual Basic",
        "techniqueid": "T1059.005"
    },
    {
        "description": "Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the?Start-Process?cmdlet which can be used to run an executable and the?Invoke-Command?cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).",
        "id": "2609",
        "mitigation": "Antivirus/Antimalware",
        "mitigationid": "M1049",
        "technique": "PowerShell",
        "techniqueid": "T1059.001"
    },
    {
        "description": "Adversaries may abuse Python commands and scripts for execution. Python is a very popular scripting/programming language, with capabilities to perform many functions. Python can be executed interactively from the command-line (via the?python.exe?interpreter) or via scripts (.py) that can be written and distributed to different systems. Python code can also be compiled into binary executables.",
        "id": "2610",
        "mitigation": "Antivirus/Antimalware",
        "mitigationid": "M1049",
        "technique": "Python",
        "techniqueid": "T1059.006"
    },
    {
        "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses.",
        "id": "2611",
        "mitigation": "Antivirus/Antimalware",
        "mitigationid": "M1049",
        "technique": "Obfuscated Files or Information",
        "techniqueid": "T1027"
    },
    {
        "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code.",
        "id": "2612",
        "mitigation": "Antivirus/Antimalware",
        "mitigationid": "M1049",
        "technique": "Software Packing",
        "techniqueid": "T1027.002"
    },
    {
        "description": "Adversaries may modify the kernel to automatically execute programs on system boot. Loadable Kernel Modules (LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. ?",
        "id": "2613",
        "mitigation": "Antivirus/Antimalware",
        "mitigationid": "M1049",
        "technique": "Kernel Modules and Extensions",
        "techniqueid": "T1547.006"
    },
    {
        "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of?Unix Shell?while Windows installations include the?Windows Command Shell?and?PowerShell.",
        "id": "2614",
        "mitigation": "Antivirus/Antimalware",
        "mitigationid": "M1049",
        "technique": "Command and Scripting Interpreter",
        "techniqueid": "T1059"
    },
    {
        "description": "Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as?Component Object Model?and the?Native API?through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.",
        "id": "2615",
        "mitigation": "Antivirus/Antimalware",
        "mitigationid": "M1049",
        "technique": "Visual Basic",
        "techniqueid": "T1059.005"
    },
    {
        "description": "Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the?Start-Process?cmdlet which can be used to run an executable and the?Invoke-Command?cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).",
        "id": "2616",
        "mitigation": "Antivirus/Antimalware",
        "mitigationid": "M1049",
        "technique": "PowerShell",
        "techniqueid": "T1059.001"
    },
    {
        "description": "Adversaries may abuse Python commands and scripts for execution. Python is a very popular scripting/programming language, with capabilities to perform many functions. Python can be executed interactively from the command-line (via the?python.exe?interpreter) or via scripts (.py) that can be written and distributed to different systems. Python code can also be compiled into binary executables.",
        "id": "2617",
        "mitigation": "Antivirus/Antimalware",
        "mitigationid": "M1049",
        "technique": "Python",
        "techniqueid": "T1059.006"
    },
    {
        "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses.",
        "id": "2618",
        "mitigation": "Antivirus/Antimalware",
        "mitigationid": "M1049",
        "technique": "Obfuscated Files or Information",
        "techniqueid": "T1027"
    },
    {
        "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code.",
        "id": "2619",
        "mitigation": "Antivirus/Antimalware",
        "mitigationid": "M1049",
        "technique": "Software Packing",
        "techniqueid": "T1027.002"
    },
    {
        "description": "Adversaries can perform command and control between compromised hosts on potentially disconnected networks using removable media to transfer commands from system to system. Both systems would need to be compromised, with the likelihood that an Internet-connected system was compromised first and the second through lateral movement by?Replication Through Removable Media. Commands and files would be relayed from the disconnected system to the Internet-connected system to which the adversary has direct access.",
        "id": "2620",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Communication Through Removable Media",
        "techniqueid": "T1092"
    },
    {
        "description": "Adversaries may attempt to exfiltrate data via a physical medium, such as a removable drive. In certain circumstances, such as an air-gapped network compromise, exfiltration could occur via a physical medium or device introduced by a user. Such media could be an external hard drive, USB drive, cellular phone, MP3 player, or other removable storage and processing device. The physical medium or device could be used as the final exfiltration point or to hop between otherwise disconnected systems.",
        "id": "2621",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Exfiltration Over Physical Medium",
        "techniqueid": "T1052"
    },
    {
        "description": "Adversaries may attempt to exfiltrate data over a USB connected physical device. In certain circumstances, such as an air-gapped network compromise, exfiltration could occur via a USB device introduced by a user. The USB device could be used as the final exfiltration point or to hop between otherwise disconnected systems.",
        "id": "2622",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Exfiltration over USB",
        "techniqueid": "T1052.001"
    },
    {
        "description": "Adversaries may move onto systems, possibly those on disconnected or air-gapped networks, by copying malware to removable media and taking advantage of Autorun features when the media is inserted into a system and executes. In the case of Lateral Movement, this may occur through modification of executable files stored on removable media or by copying malware and renaming it to look like a legitimate file to trick users into executing it on a separate system. In the case of Initial Access, this may occur through manual manipulation of the media, modification of systems used to initially format the media, or modification to the media's firmware itself.",
        "id": "2623",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Replication Through Removable Media",
        "techniqueid": "T1091"
    },
    {
        "description": "Adversaries may gain access to a system through a user visiting a website over the normal course of browsing. With this technique, the user's web browser is typically targeted for exploitation, but adversaries may also use compromised websites for non-exploitation behavior such as acquiring?Application Access Token.",
        "id": "2624",
        "mitigation": "Exploit Protection",
        "mitigationid": "M1050",
        "technique": "Drive-by Compromise",
        "techniqueid": "T1189"
    },
    {
        "description": "Adversaries may attempt to take advantage of a weakness in an Internet-facing computer or program using software, data, or commands in order to cause unintended or unanticipated behavior. The weakness in the system can be a bug, a glitch, or a design vulnerability. These applications are often websites, but can include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other applications with Internet accessible open sockets, such as web servers and related services. Depending on the flaw being exploited this may include?Exploitation for Defense Evasion.",
        "id": "2625",
        "mitigation": "Exploit Protection",
        "mitigationid": "M1050",
        "technique": "Exploit Public-Facing Application",
        "techniqueid": "T1190"
    },
    {
        "description": "Adversaries may exploit software vulnerabilities in client applications to execute code. Vulnerabilities can exist in software due to unsecure coding practices that can lead to unanticipated behavior. Adversaries can take advantage of certain vulnerabilities through targeted exploitation for the purpose of arbitrary code execution. Oftentimes the most valuable exploits to an offensive toolkit are those that can be used to obtain code execution on a remote system because they can be used to gain access to that system. Users will expect to see files related to the applications they commonly used to do work, so they are a useful target for exploit research and development because of their high utility.",
        "id": "2626",
        "mitigation": "Exploit Protection",
        "mitigationid": "M1050",
        "technique": "Exploitation for Client Execution",
        "techniqueid": "T1203"
    },
    {
        "description": "Adversaries may exploit software vulnerabilities in an attempt to collect credentials. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.?Credentialing and authentication mechanisms may be targeted for exploitation by adversaries as a means to gain access to useful credentials or circumvent the process to gain access to systems. One example of this is MS14-068, which targets Kerberos and can be used to forge Kerberos tickets using domain user permissions. Exploitation for credential access may also result in Privilege Escalation depending on the process targeted or credentials obtained.",
        "id": "2627",
        "mitigation": "Exploit Protection",
        "mitigationid": "M1050",
        "technique": "Exploitation for Credential Access",
        "techniqueid": "T1212"
    },
    {
        "description": "Adversaries may exploit a system or application vulnerability to bypass security features. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.?Vulnerabilities may exist in defensive security software that can be used to disable or circumvent them.",
        "id": "2628",
        "mitigation": "Exploit Protection",
        "mitigationid": "M1050",
        "technique": "Exploitation for Defense Evasion",
        "techniqueid": "T1211"
    },
    {
        "description": "Adversaries may exploit software vulnerabilities in an attempt to collect elevate privileges. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Security constructs such as permission levels will often hinder access to information and use of certain techniques, so adversaries will likely need to perform privilege escalation to include use of software exploitation to circumvent those restrictions.",
        "id": "2629",
        "mitigation": "Exploit Protection",
        "mitigationid": "M1050",
        "technique": "Exploitation for Privilege Escalation",
        "techniqueid": "T1068"
    },
    {
        "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.?A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.",
        "id": "2630",
        "mitigation": "Exploit Protection",
        "mitigationid": "M1050",
        "technique": "Exploitation of Remote Services",
        "techniqueid": "T1210"
    },
    {
        "description": "Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed binaries. Binaries signed with trusted digital certificates can execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files.",
        "id": "2631",
        "mitigation": "Exploit Protection",
        "mitigationid": "M1050",
        "technique": "Signed Binary Proxy Execution",
        "techniqueid": "T1218"
    },
    {
        "description": "Adversaries may abuse rundll32.exe to proxy execution of malicious code. Using rundll32.exe, vice executing directly (i.e.?Shared Modules), may avoid triggering security tools that may not monitor execution of the rundll32.exe process because of allowlists or false positives from normal operations. Rundll32.exe is commonly associated with executing DLL payloads.",
        "id": "2632",
        "mitigation": "Exploit Protection",
        "mitigationid": "M1050",
        "technique": "Rundll32",
        "techniqueid": "T1218.011"
    },
    {
        "description": "Adversaries may abuse Regsvr32.exe to proxy execution of malicious code. Regsvr32.exe is a command-line program used to register and unregister object linking and embedding controls, including dynamic link libraries (DLLs), on Windows systems. Regsvr32.exe is also a Microsoft signed binary.",
        "id": "2633",
        "mitigation": "Exploit Protection",
        "mitigationid": "M1050",
        "technique": "Regsvr32",
        "techniqueid": "T1218.010"
    },
    {
        "description": "Adversaries may deliver payloads to remote systems by adding content to shared storage locations, such as network drives or internal code repositories. Content stored on network drives or in other shared locations may be tainted by adding malicious programs, scripts, or exploit code to otherwise valid files. Once a user opens the shared tainted content, the malicious portion can be executed to run the adversary's code on a remote system. Adversaries may use tainted shared content to move laterally.",
        "id": "2634",
        "mitigation": "Exploit Protection",
        "mitigationid": "M1050",
        "technique": "Taint Shared Content",
        "techniqueid": "T1080"
    },
    {
        "description": "Adversaries may modify the kernel to automatically execute programs on system boot. Loadable Kernel Modules (LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. ?",
        "id": "2635",
        "mitigation": "Antivirus/Antimalware",
        "mitigationid": "M1049",
        "technique": "Kernel Modules and Extensions",
        "techniqueid": "T1547.006"
    },
    {
        "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of?Unix Shell?while Windows installations include the?Windows Command Shell?and?PowerShell.",
        "id": "2636",
        "mitigation": "Antivirus/Antimalware",
        "mitigationid": "M1049",
        "technique": "Command and Scripting Interpreter",
        "techniqueid": "T1059"
    },
    {
        "description": "Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as?Component Object Model?and the?Native API?through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.",
        "id": "2637",
        "mitigation": "Antivirus/Antimalware",
        "mitigationid": "M1049",
        "technique": "Visual Basic",
        "techniqueid": "T1059.005"
    },
    {
        "description": "Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the?Start-Process?cmdlet which can be used to run an executable and the?Invoke-Command?cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).",
        "id": "2638",
        "mitigation": "Antivirus/Antimalware",
        "mitigationid": "M1049",
        "technique": "PowerShell",
        "techniqueid": "T1059.001"
    },
    {
        "description": "Adversaries may abuse Python commands and scripts for execution. Python is a very popular scripting/programming language, with capabilities to perform many functions. Python can be executed interactively from the command-line (via the?python.exe?interpreter) or via scripts (.py) that can be written and distributed to different systems. Python code can also be compiled into binary executables.",
        "id": "2639",
        "mitigation": "Antivirus/Antimalware",
        "mitigationid": "M1049",
        "technique": "Python",
        "techniqueid": "T1059.006"
    },
    {
        "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses.",
        "id": "2640",
        "mitigation": "Antivirus/Antimalware",
        "mitigationid": "M1049",
        "technique": "Obfuscated Files or Information",
        "techniqueid": "T1027"
    },
    {
        "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code.",
        "id": "2641",
        "mitigation": "Antivirus/Antimalware",
        "mitigationid": "M1049",
        "technique": "Software Packing",
        "techniqueid": "T1027.002"
    },
    {
        "description": "Adversaries may insert, delete, or manipulate data in order to manipulate external outcomes or hide activity. By manipulating data, adversaries may attempt to affect a business process, organizational understanding, or decision making.",
        "id": "2642",
        "mitigation": "Remote Data Storage",
        "mitigationid": "M1029",
        "technique": "Data Manipulation",
        "techniqueid": "T1565"
    },
    {
        "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity. By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making.",
        "id": "2643",
        "mitigation": "Remote Data Storage",
        "mitigationid": "M1029",
        "technique": "Stored Data Manipulation",
        "techniqueid": "T1565.001"
    },
    {
        "description": "Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources. Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives. Common operating system file deletion commands such as?del?and?rm?often only remove pointers to files without wiping the contents of the files themselves, making the files recoverable by proper forensic methodology. This behavior is distinct from?Disk Content Wipe?and?Disk Structure Wipe?because individual files are destroyed rather than sections of a storage disk or the disk's logical structure.",
        "id": "2644",
        "mitigation": "Data Backup",
        "mitigationid": "M1053",
        "technique": "Data Destruction",
        "techniqueid": "T1485"
    },
    {
        "description": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted. In the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.",
        "id": "2645",
        "mitigation": "Data Backup",
        "mitigationid": "M1053",
        "technique": "Data Encrypted for Impact",
        "techniqueid": "T1486"
    },
    {
        "description": "Adversaries may modify visual content available internally or externally to an enterprise network. Reasons for?Defacement?include delivering messaging, intimidation, or claiming (possibly false) credit for an intrusion. Disturbing or offensive images may be used as a part of?Defacement?in order to cause user discomfort, or to pressure compliance with accompanying messages.",
        "id": "2646",
        "mitigation": "Data Backup",
        "mitigationid": "M1053",
        "technique": "Defacement",
        "techniqueid": "T1491"
    },
    {
        "description": "An adversary may deface systems internal to an organization in an attempt to intimidate or mislead users. This may take the form of modifications to internal websites, or directly to user systems with the replacement of the desktop wallpaper. Disturbing or offensive images may be used as a part of?Internal Defacement?in order to cause user discomfort, or to pressure compliance with accompanying messages. Since internally defacing systems exposes an adversary's presence, it often takes place after other intrusion goals have been accomplished.",
        "id": "2647",
        "mitigation": "Data Backup",
        "mitigationid": "M1053",
        "technique": "Internal Defacement",
        "techniqueid": "T1491.001"
    },
    {
        "description": "An adversary may deface systems external to an organization in an attempt to deliver messaging, intimidate, or otherwise mislead an organization or users. Externally-facing websites are a common victim of defacement; often targeted by adversary and hacktivist groups in order to push a political message or spread propaganda.?External Defacement?may be used as a catalyst to trigger events, or as a response to actions taken by an organization or government. Similarly, website defacement may also be used as setup, or a precursor, for future attacks such as?Drive-by Compromise.",
        "id": "2648",
        "mitigation": "Data Backup",
        "mitigationid": "M1053",
        "technique": "External Defacement",
        "techniqueid": "T1491.002"
    },
    {
        "description": "Adversaries may wipe or corrupt raw disk data on specific systems or in large numbers in a network to interrupt availability to system and network resources. With direct write access to a disk, adversaries may attempt to overwrite portions of disk data. Adversaries may opt to wipe arbitrary portions of disk data and/or wipe disk structures like the master boot record (MBR). A complete wipe of all disk sectors may be attempted.",
        "id": "2649",
        "mitigation": "Data Backup",
        "mitigationid": "M1053",
        "technique": "Disk Wipe",
        "techniqueid": "T1561"
    },
    {
        "description": "Adversaries may erase the contents of storage devices on specific systems or in large numbers in a network to interrupt availability to system and network resources.",
        "id": "2650",
        "mitigation": "Data Backup",
        "mitigationid": "M1053",
        "technique": "Disk Content Wipe",
        "techniqueid": "T1561.001"
    },
    {
        "description": "Adversaries may corrupt or wipe the disk data structures on a hard drive necessary to boot a system; targeting specific critical systems or in large numbers in a network to interrupt availability to system and network resources.",
        "id": "2651",
        "mitigation": "Data Backup",
        "mitigationid": "M1053",
        "technique": "Disk Structure Wipe",
        "techniqueid": "T1561.002"
    },
    {
        "description": "Adversaries may delete or remove built-in operating system data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery. Operating systems may contain features that can help fix corrupted systems, such as a backup catalog, volume shadow copies, and automatic repair features. Adversaries may disable or delete system recovery features to augment the effects of?Data Destruction?and?Data Encrypted for Impact.",
        "id": "2652",
        "mitigation": "Data Backup",
        "mitigationid": "M1053",
        "technique": "Inhibit System Recovery",
        "techniqueid": "T1490"
    },
    {
        "description": "Adversaries may insert, delete, or manipulate data in order to manipulate external outcomes or hide activity. By manipulating data, adversaries may attempt to affect a business process, organizational understanding, or decision making.",
        "id": "2653",
        "mitigation": "Remote Data Storage",
        "mitigationid": "M1029",
        "technique": "Data Manipulation",
        "techniqueid": "T1565"
    },
    {
        "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity. By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making.",
        "id": "2654",
        "mitigation": "Remote Data Storage",
        "mitigationid": "M1029",
        "technique": "Stored Data Manipulation",
        "techniqueid": "T1565.001"
    },
    {
        "description": "Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources. Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives. Common operating system file deletion commands such as?del?and?rm?often only remove pointers to files without wiping the contents of the files themselves, making the files recoverable by proper forensic methodology. This behavior is distinct from?Disk Content Wipe?and?Disk Structure Wipe?because individual files are destroyed rather than sections of a storage disk or the disk's logical structure.",
        "id": "2655",
        "mitigation": "Data Backup",
        "mitigationid": "M1053",
        "technique": "Data Destruction",
        "techniqueid": "T1485"
    },
    {
        "description": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted. In the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.",
        "id": "2656",
        "mitigation": "Data Backup",
        "mitigationid": "M1053",
        "technique": "Data Encrypted for Impact",
        "techniqueid": "T1486"
    },
    {
        "description": "Adversaries may modify visual content available internally or externally to an enterprise network. Reasons for?Defacement?include delivering messaging, intimidation, or claiming (possibly false) credit for an intrusion. Disturbing or offensive images may be used as a part of?Defacement?in order to cause user discomfort, or to pressure compliance with accompanying messages.",
        "id": "2657",
        "mitigation": "Data Backup",
        "mitigationid": "M1053",
        "technique": "Defacement",
        "techniqueid": "T1491"
    },
    {
        "description": "An adversary may deface systems internal to an organization in an attempt to intimidate or mislead users. This may take the form of modifications to internal websites, or directly to user systems with the replacement of the desktop wallpaper. Disturbing or offensive images may be used as a part of?Internal Defacement?in order to cause user discomfort, or to pressure compliance with accompanying messages. Since internally defacing systems exposes an adversary's presence, it often takes place after other intrusion goals have been accomplished.",
        "id": "2658",
        "mitigation": "Data Backup",
        "mitigationid": "M1053",
        "technique": "Internal Defacement",
        "techniqueid": "T1491.001"
    },
    {
        "description": "An adversary may deface systems external to an organization in an attempt to deliver messaging, intimidate, or otherwise mislead an organization or users. Externally-facing websites are a common victim of defacement; often targeted by adversary and hacktivist groups in order to push a political message or spread propaganda.?External Defacement?may be used as a catalyst to trigger events, or as a response to actions taken by an organization or government. Similarly, website defacement may also be used as setup, or a precursor, for future attacks such as?Drive-by Compromise.",
        "id": "2659",
        "mitigation": "Data Backup",
        "mitigationid": "M1053",
        "technique": "External Defacement",
        "techniqueid": "T1491.002"
    },
    {
        "description": "Adversaries may wipe or corrupt raw disk data on specific systems or in large numbers in a network to interrupt availability to system and network resources. With direct write access to a disk, adversaries may attempt to overwrite portions of disk data. Adversaries may opt to wipe arbitrary portions of disk data and/or wipe disk structures like the master boot record (MBR). A complete wipe of all disk sectors may be attempted.",
        "id": "2660",
        "mitigation": "Data Backup",
        "mitigationid": "M1053",
        "technique": "Disk Wipe",
        "techniqueid": "T1561"
    },
    {
        "description": "Adversaries may erase the contents of storage devices on specific systems or in large numbers in a network to interrupt availability to system and network resources.",
        "id": "2661",
        "mitigation": "Data Backup",
        "mitigationid": "M1053",
        "technique": "Disk Content Wipe",
        "techniqueid": "T1561.001"
    },
    {
        "description": "Adversaries may corrupt or wipe the disk data structures on a hard drive necessary to boot a system; targeting specific critical systems or in large numbers in a network to interrupt availability to system and network resources.",
        "id": "2662",
        "mitigation": "Data Backup",
        "mitigationid": "M1053",
        "technique": "Disk Structure Wipe",
        "techniqueid": "T1561.002"
    },
    {
        "description": "Adversaries may delete or remove built-in operating system data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery. Operating systems may contain features that can help fix corrupted systems, such as a backup catalog, volume shadow copies, and automatic repair features. Adversaries may disable or delete system recovery features to augment the effects of?Data Destruction?and?Data Encrypted for Impact.",
        "id": "2663",
        "mitigation": "Data Backup",
        "mitigationid": "M1053",
        "technique": "Inhibit System Recovery",
        "techniqueid": "T1490"
    },
    {
        "description": "Adversaries may insert, delete, or manipulate data in order to manipulate external outcomes or hide activity. By manipulating data, adversaries may attempt to affect a business process, organizational understanding, or decision making.",
        "id": "2664",
        "mitigation": "Remote Data Storage",
        "mitigationid": "M1029",
        "technique": "Data Manipulation",
        "techniqueid": "T1565"
    },
    {
        "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity. By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making.",
        "id": "2665",
        "mitigation": "Remote Data Storage",
        "mitigationid": "M1029",
        "technique": "Stored Data Manipulation",
        "techniqueid": "T1565.001"
    },
    {
        "description": "Adversaries may manipulate accounts to maintain access to victim systems. Account manipulation may consist of any action that preserves adversary access to a compromised account, such as modifying credentials or permission groups. These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials. In order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain.",
        "id": "2666",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Account Manipulation",
        "techniqueid": "T1098"
    },
    {
        "description": "Adversaries may add adversary-controlled credentials to a cloud account to maintain persistent access to victim accounts and instances within the environment.",
        "id": "2667",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Additional Cloud Credentials",
        "techniqueid": "T1098.001"
    },
    {
        "description": "Adversaries may create an account to maintain access to victim systems. With a sufficient level of access, creating such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.",
        "id": "2668",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Create Account",
        "techniqueid": "T1136"
    },
    {
        "description": "Adversaries may create a domain account to maintain access to victim systems. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover user, administrator, and service accounts. With a sufficient level of access, the?net user /add /domain?command can be used to create a domain account.",
        "id": "2669",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Domain Account",
        "techniqueid": "T1136.002"
    },
    {
        "description": "Adversaries may create a cloud account to maintain access to victim systems. With a sufficient level of access, such accounts may be used to establish secondary credentialed access that does not require persistent remote access tools to be deployed on the system.",
        "id": "2670",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Cloud Account",
        "techniqueid": "T1136.003"
    },
    {
        "description": "Adversaries may insert, delete, or manipulate data in order to manipulate external outcomes or hide activity. By manipulating data, adversaries may attempt to affect a business process, organizational understanding, or decision making.",
        "id": "2671",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Data Manipulation",
        "techniqueid": "T1565"
    },
    {
        "description": "Adversaries may modify systems in order to manipulate the data as it is accessed and displayed to an end user. By manipulating runtime data, adversaries may attempt to affect a business process, organizational understanding, and decision making.",
        "id": "2672",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Runtime Data Manipulation",
        "techniqueid": "T1565.003"
    },
    {
        "description": "Adversaries may attempt to gather information on domain trust relationships that may be used to identify lateral movement opportunities in Windows multi-domain/forest environments. Domain trusts provide a mechanism for a domain to allow access to resources based on the authentication procedures of another domain. Domain trusts allow the users of the trusted domain to access resources in the trusting domain. The information discovered may help the adversary conduct?SID-History Injection,?Pass the Ticket, and?Kerberoasting. Domain trusts can be enumerated using the?DSEnumerateDomainTrusts()?Win32 API call, .NET methods, and LDAP. The Windows utility?Nltest?is known to be used by adversaries to enumerate domain trusts.",
        "id": "2673",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Domain Trust Discovery",
        "techniqueid": "T1482"
    },
    {
        "description": "Adversaries may access data objects from improperly secured cloud storage.",
        "id": "2674",
        "mitigation": "Encrypt Sensitive Information",
        "mitigationid": "M1041",
        "technique": "Data from Cloud Storage Object",
        "techniqueid": "T1530"
    },
    {
        "description": "Adversaries may insert, delete, or manipulate data in order to manipulate external outcomes or hide activity. By manipulating data, adversaries may attempt to affect a business process, organizational understanding, or decision making.",
        "id": "2675",
        "mitigation": "Encrypt Sensitive Information",
        "mitigationid": "M1041",
        "technique": "Data Manipulation",
        "techniqueid": "T1565"
    },
    {
        "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity. By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making.",
        "id": "2676",
        "mitigation": "Encrypt Sensitive Information",
        "mitigationid": "M1041",
        "technique": "Stored Data Manipulation",
        "techniqueid": "T1565.001"
    },
    {
        "description": "Adversaries may alter data en route to storage or other systems in order to manipulate external outcomes or hide activity. By manipulating transmitted data, adversaries may attempt to affect a business process, organizational understanding, and decision making.",
        "id": "2677",
        "mitigation": "Encrypt Sensitive Information",
        "mitigationid": "M1041",
        "technique": "Transmitted Data Manipulation",
        "techniqueid": "T1565.002"
    },
    {
        "description": "Adversaries may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password, from the operating system and software. Credentials can then be used to perform?Lateral Movement?and access restricted information.",
        "id": "2678",
        "mitigation": "Encrypt Sensitive Information",
        "mitigationid": "M1041",
        "technique": "OS Credential Dumping",
        "techniqueid": "T1003"
    },
    {
        "description": "Adversaries may attempt to access or create a copy of the Active Directory domain database in order to steal credential information, as well as obtain other information about domain members such as devices, users, and access rights. By default, the NTDS file (NTDS.dit) is located in?%SystemRoot%\\NTDS\\Ntds.dit?of a domain controller.",
        "id": "2679",
        "mitigation": "Encrypt Sensitive Information",
        "mitigationid": "M1041",
        "technique": "NTDS",
        "techniqueid": "T1003.003"
    },
    {
        "description": "Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g.?Bash History), operating system or application-specific repositories (e.g.?Credentials in Registry), or other specialized files/artifacts (e.g.?Private Keys).",
        "id": "2680",
        "mitigation": "Encrypt Sensitive Information",
        "mitigationid": "M1041",
        "technique": "Unsecured Credentials",
        "techniqueid": "T1552"
    },
    {
        "description": "Adversaries may search for private key certificate files on compromised systems for insecurely stored credentials. Private cryptographic keys and certificates are used for authentication, encryption/decryption, and digital signatures. Common key and certificate file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, .pfx, .cer, .p7b, .asc.",
        "id": "2681",
        "mitigation": "Encrypt Sensitive Information",
        "mitigationid": "M1041",
        "technique": "Private Keys",
        "techniqueid": "T1552.004"
    },
    {
        "description": "Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources. Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives. Common operating system file deletion commands such as?del?and?rm?often only remove pointers to files without wiping the contents of the files themselves, making the files recoverable by proper forensic methodology. This behavior is distinct from?Disk Content Wipe?and?Disk Structure Wipe?because individual files are destroyed rather than sections of a storage disk or the disk's logical structure.",
        "id": "2682",
        "mitigation": "Data Backup",
        "mitigationid": "M1053",
        "technique": "Data Destruction",
        "techniqueid": "T1485"
    },
    {
        "description": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted. In the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.",
        "id": "2683",
        "mitigation": "Data Backup",
        "mitigationid": "M1053",
        "technique": "Data Encrypted for Impact",
        "techniqueid": "T1486"
    },
    {
        "description": "Adversaries may modify visual content available internally or externally to an enterprise network. Reasons for?Defacement?include delivering messaging, intimidation, or claiming (possibly false) credit for an intrusion. Disturbing or offensive images may be used as a part of?Defacement?in order to cause user discomfort, or to pressure compliance with accompanying messages.",
        "id": "2684",
        "mitigation": "Data Backup",
        "mitigationid": "M1053",
        "technique": "Defacement",
        "techniqueid": "T1491"
    },
    {
        "description": "An adversary may deface systems internal to an organization in an attempt to intimidate or mislead users. This may take the form of modifications to internal websites, or directly to user systems with the replacement of the desktop wallpaper. Disturbing or offensive images may be used as a part of?Internal Defacement?in order to cause user discomfort, or to pressure compliance with accompanying messages. Since internally defacing systems exposes an adversary's presence, it often takes place after other intrusion goals have been accomplished.",
        "id": "2685",
        "mitigation": "Data Backup",
        "mitigationid": "M1053",
        "technique": "Internal Defacement",
        "techniqueid": "T1491.001"
    },
    {
        "description": "An adversary may deface systems external to an organization in an attempt to deliver messaging, intimidate, or otherwise mislead an organization or users. Externally-facing websites are a common victim of defacement; often targeted by adversary and hacktivist groups in order to push a political message or spread propaganda.?External Defacement?may be used as a catalyst to trigger events, or as a response to actions taken by an organization or government. Similarly, website defacement may also be used as setup, or a precursor, for future attacks such as?Drive-by Compromise.",
        "id": "2686",
        "mitigation": "Data Backup",
        "mitigationid": "M1053",
        "technique": "External Defacement",
        "techniqueid": "T1491.002"
    },
    {
        "description": "Adversaries may wipe or corrupt raw disk data on specific systems or in large numbers in a network to interrupt availability to system and network resources. With direct write access to a disk, adversaries may attempt to overwrite portions of disk data. Adversaries may opt to wipe arbitrary portions of disk data and/or wipe disk structures like the master boot record (MBR). A complete wipe of all disk sectors may be attempted.",
        "id": "2687",
        "mitigation": "Data Backup",
        "mitigationid": "M1053",
        "technique": "Disk Wipe",
        "techniqueid": "T1561"
    },
    {
        "description": "Adversaries may erase the contents of storage devices on specific systems or in large numbers in a network to interrupt availability to system and network resources.",
        "id": "2688",
        "mitigation": "Data Backup",
        "mitigationid": "M1053",
        "technique": "Disk Content Wipe",
        "techniqueid": "T1561.001"
    },
    {
        "description": "Adversaries may corrupt or wipe the disk data structures on a hard drive necessary to boot a system; targeting specific critical systems or in large numbers in a network to interrupt availability to system and network resources.",
        "id": "2689",
        "mitigation": "Data Backup",
        "mitigationid": "M1053",
        "technique": "Disk Structure Wipe",
        "techniqueid": "T1561.002"
    },
    {
        "description": "Adversaries may delete or remove built-in operating system data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery. Operating systems may contain features that can help fix corrupted systems, such as a backup catalog, volume shadow copies, and automatic repair features. Adversaries may disable or delete system recovery features to augment the effects of?Data Destruction?and?Data Encrypted for Impact.",
        "id": "2690",
        "mitigation": "Data Backup",
        "mitigationid": "M1053",
        "technique": "Inhibit System Recovery",
        "techniqueid": "T1490"
    },
    {
        "description": "Once established within a system or network, an adversary may use automated techniques for collecting internal data. Methods for performing this technique could include use of a?Command and Scripting Interpreter?to search for and copy information fitting set criteria such as file type, location, or name at specific time intervals. This functionality could also be built into remote access tools.",
        "id": "2691",
        "mitigation": "Remote Data Storage",
        "mitigationid": "M1029",
        "technique": "Automated Collection",
        "techniqueid": "T1119"
    },
    {
        "description": "Adversaries may insert, delete, or manipulate data in order to manipulate external outcomes or hide activity. By manipulating data, adversaries may attempt to affect a business process, organizational understanding, or decision making.",
        "id": "2692",
        "mitigation": "Remote Data Storage",
        "mitigationid": "M1029",
        "technique": "Data Manipulation",
        "techniqueid": "T1565"
    },
    {
        "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity. By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making.",
        "id": "2693",
        "mitigation": "Remote Data Storage",
        "mitigationid": "M1029",
        "technique": "Stored Data Manipulation",
        "techniqueid": "T1565.001"
    },
    {
        "description": "Adversaries may manipulate accounts to maintain access to victim systems. Account manipulation may consist of any action that preserves adversary access to a compromised account, such as modifying credentials or permission groups. These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials. In order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain.",
        "id": "2694",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Account Manipulation",
        "techniqueid": "T1098"
    },
    {
        "description": "Adversaries may add adversary-controlled credentials to a cloud account to maintain persistent access to victim accounts and instances within the environment.",
        "id": "2695",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Additional Cloud Credentials",
        "techniqueid": "T1098.001"
    },
    {
        "description": "Adversaries may create an account to maintain access to victim systems. With a sufficient level of access, creating such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.",
        "id": "2696",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Create Account",
        "techniqueid": "T1136"
    },
    {
        "description": "Adversaries may create a domain account to maintain access to victim systems. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover user, administrator, and service accounts. With a sufficient level of access, the?net user /add /domain?command can be used to create a domain account.",
        "id": "2697",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Domain Account",
        "techniqueid": "T1136.002"
    },
    {
        "description": "Adversaries may create a cloud account to maintain access to victim systems. With a sufficient level of access, such accounts may be used to establish secondary credentialed access that does not require persistent remote access tools to be deployed on the system.",
        "id": "2698",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Cloud Account",
        "techniqueid": "T1136.003"
    },
    {
        "description": "Adversaries may insert, delete, or manipulate data in order to manipulate external outcomes or hide activity. By manipulating data, adversaries may attempt to affect a business process, organizational understanding, or decision making.",
        "id": "2699",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Data Manipulation",
        "techniqueid": "T1565"
    },
    {
        "description": "Adversaries may modify systems in order to manipulate the data as it is accessed and displayed to an end user. By manipulating runtime data, adversaries may attempt to affect a business process, organizational understanding, and decision making.",
        "id": "2700",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Runtime Data Manipulation",
        "techniqueid": "T1565.003"
    },
    {
        "description": "Adversaries may attempt to gather information on domain trust relationships that may be used to identify lateral movement opportunities in Windows multi-domain/forest environments. Domain trusts provide a mechanism for a domain to allow access to resources based on the authentication procedures of another domain. Domain trusts allow the users of the trusted domain to access resources in the trusting domain. The information discovered may help the adversary conduct?SID-History Injection,?Pass the Ticket, and?Kerberoasting. Domain trusts can be enumerated using the?DSEnumerateDomainTrusts()?Win32 API call, .NET methods, and LDAP. The Windows utility?Nltest?is known to be used by adversaries to enumerate domain trusts.",
        "id": "2701",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Domain Trust Discovery",
        "techniqueid": "T1482"
    },
    {
        "description": "Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources. Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives. Common operating system file deletion commands such as?del?and?rm?often only remove pointers to files without wiping the contents of the files themselves, making the files recoverable by proper forensic methodology. This behavior is distinct from?Disk Content Wipe?and?Disk Structure Wipe?because individual files are destroyed rather than sections of a storage disk or the disk's logical structure.",
        "id": "2702",
        "mitigation": "Data Backup",
        "mitigationid": "M1053",
        "technique": "Data Destruction",
        "techniqueid": "T1485"
    },
    {
        "description": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted. In the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.",
        "id": "2703",
        "mitigation": "Data Backup",
        "mitigationid": "M1053",
        "technique": "Data Encrypted for Impact",
        "techniqueid": "T1486"
    },
    {
        "description": "Adversaries may modify visual content available internally or externally to an enterprise network. Reasons for?Defacement?include delivering messaging, intimidation, or claiming (possibly false) credit for an intrusion. Disturbing or offensive images may be used as a part of?Defacement?in order to cause user discomfort, or to pressure compliance with accompanying messages.",
        "id": "2704",
        "mitigation": "Data Backup",
        "mitigationid": "M1053",
        "technique": "Defacement",
        "techniqueid": "T1491"
    },
    {
        "description": "An adversary may deface systems internal to an organization in an attempt to intimidate or mislead users. This may take the form of modifications to internal websites, or directly to user systems with the replacement of the desktop wallpaper. Disturbing or offensive images may be used as a part of?Internal Defacement?in order to cause user discomfort, or to pressure compliance with accompanying messages. Since internally defacing systems exposes an adversary's presence, it often takes place after other intrusion goals have been accomplished.",
        "id": "2705",
        "mitigation": "Data Backup",
        "mitigationid": "M1053",
        "technique": "Internal Defacement",
        "techniqueid": "T1491.001"
    },
    {
        "description": "An adversary may deface systems external to an organization in an attempt to deliver messaging, intimidate, or otherwise mislead an organization or users. Externally-facing websites are a common victim of defacement; often targeted by adversary and hacktivist groups in order to push a political message or spread propaganda.?External Defacement?may be used as a catalyst to trigger events, or as a response to actions taken by an organization or government. Similarly, website defacement may also be used as setup, or a precursor, for future attacks such as?Drive-by Compromise.",
        "id": "2706",
        "mitigation": "Data Backup",
        "mitigationid": "M1053",
        "technique": "External Defacement",
        "techniqueid": "T1491.002"
    },
    {
        "description": "Adversaries may wipe or corrupt raw disk data on specific systems or in large numbers in a network to interrupt availability to system and network resources. With direct write access to a disk, adversaries may attempt to overwrite portions of disk data. Adversaries may opt to wipe arbitrary portions of disk data and/or wipe disk structures like the master boot record (MBR). A complete wipe of all disk sectors may be attempted.",
        "id": "2707",
        "mitigation": "Data Backup",
        "mitigationid": "M1053",
        "technique": "Disk Wipe",
        "techniqueid": "T1561"
    },
    {
        "description": "Adversaries may erase the contents of storage devices on specific systems or in large numbers in a network to interrupt availability to system and network resources.",
        "id": "2708",
        "mitigation": "Data Backup",
        "mitigationid": "M1053",
        "technique": "Disk Content Wipe",
        "techniqueid": "T1561.001"
    },
    {
        "description": "Adversaries may corrupt or wipe the disk data structures on a hard drive necessary to boot a system; targeting specific critical systems or in large numbers in a network to interrupt availability to system and network resources.",
        "id": "2709",
        "mitigation": "Data Backup",
        "mitigationid": "M1053",
        "technique": "Disk Structure Wipe",
        "techniqueid": "T1561.002"
    },
    {
        "description": "Adversaries may delete or remove built-in operating system data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery. Operating systems may contain features that can help fix corrupted systems, such as a backup catalog, volume shadow copies, and automatic repair features. Adversaries may disable or delete system recovery features to augment the effects of?Data Destruction?and?Data Encrypted for Impact.",
        "id": "2710",
        "mitigation": "Data Backup",
        "mitigationid": "M1053",
        "technique": "Inhibit System Recovery",
        "techniqueid": "T1490"
    },
    {
        "description": "Adversaries may insert, delete, or manipulate data in order to manipulate external outcomes or hide activity. By manipulating data, adversaries may attempt to affect a business process, organizational understanding, or decision making.",
        "id": "2711",
        "mitigation": "Remote Data Storage",
        "mitigationid": "M1029",
        "technique": "Data Manipulation",
        "techniqueid": "T1565"
    },
    {
        "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity. By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making.",
        "id": "2712",
        "mitigation": "Remote Data Storage",
        "mitigationid": "M1029",
        "technique": "Stored Data Manipulation",
        "techniqueid": "T1565.001"
    },
    {
        "description": "Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources. Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives. Common operating system file deletion commands such as?del?and?rm?often only remove pointers to files without wiping the contents of the files themselves, making the files recoverable by proper forensic methodology. This behavior is distinct from?Disk Content Wipe?and?Disk Structure Wipe?because individual files are destroyed rather than sections of a storage disk or the disk's logical structure.",
        "id": "2713",
        "mitigation": "Data Backup",
        "mitigationid": "M1053",
        "technique": "Data Destruction",
        "techniqueid": "T1485"
    },
    {
        "description": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted. In the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.",
        "id": "2714",
        "mitigation": "Data Backup",
        "mitigationid": "M1053",
        "technique": "Data Encrypted for Impact",
        "techniqueid": "T1486"
    },
    {
        "description": "Adversaries may modify visual content available internally or externally to an enterprise network. Reasons for?Defacement?include delivering messaging, intimidation, or claiming (possibly false) credit for an intrusion. Disturbing or offensive images may be used as a part of?Defacement?in order to cause user discomfort, or to pressure compliance with accompanying messages.",
        "id": "2715",
        "mitigation": "Data Backup",
        "mitigationid": "M1053",
        "technique": "Defacement",
        "techniqueid": "T1491"
    },
    {
        "description": "An adversary may deface systems internal to an organization in an attempt to intimidate or mislead users. This may take the form of modifications to internal websites, or directly to user systems with the replacement of the desktop wallpaper. Disturbing or offensive images may be used as a part of?Internal Defacement?in order to cause user discomfort, or to pressure compliance with accompanying messages. Since internally defacing systems exposes an adversary's presence, it often takes place after other intrusion goals have been accomplished.",
        "id": "2716",
        "mitigation": "Data Backup",
        "mitigationid": "M1053",
        "technique": "Internal Defacement",
        "techniqueid": "T1491.001"
    },
    {
        "description": "An adversary may deface systems external to an organization in an attempt to deliver messaging, intimidate, or otherwise mislead an organization or users. Externally-facing websites are a common victim of defacement; often targeted by adversary and hacktivist groups in order to push a political message or spread propaganda.?External Defacement?may be used as a catalyst to trigger events, or as a response to actions taken by an organization or government. Similarly, website defacement may also be used as setup, or a precursor, for future attacks such as?Drive-by Compromise.",
        "id": "2717",
        "mitigation": "Data Backup",
        "mitigationid": "M1053",
        "technique": "External Defacement",
        "techniqueid": "T1491.002"
    },
    {
        "description": "Adversaries may wipe or corrupt raw disk data on specific systems or in large numbers in a network to interrupt availability to system and network resources. With direct write access to a disk, adversaries may attempt to overwrite portions of disk data. Adversaries may opt to wipe arbitrary portions of disk data and/or wipe disk structures like the master boot record (MBR). A complete wipe of all disk sectors may be attempted.",
        "id": "2718",
        "mitigation": "Data Backup",
        "mitigationid": "M1053",
        "technique": "Disk Wipe",
        "techniqueid": "T1561"
    },
    {
        "description": "Adversaries may erase the contents of storage devices on specific systems or in large numbers in a network to interrupt availability to system and network resources.",
        "id": "2719",
        "mitigation": "Data Backup",
        "mitigationid": "M1053",
        "technique": "Disk Content Wipe",
        "techniqueid": "T1561.001"
    },
    {
        "description": "Adversaries may corrupt or wipe the disk data structures on a hard drive necessary to boot a system; targeting specific critical systems or in large numbers in a network to interrupt availability to system and network resources.",
        "id": "2720",
        "mitigation": "Data Backup",
        "mitigationid": "M1053",
        "technique": "Disk Structure Wipe",
        "techniqueid": "T1561.002"
    },
    {
        "description": "Adversaries may delete or remove built-in operating system data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery. Operating systems may contain features that can help fix corrupted systems, such as a backup catalog, volume shadow copies, and automatic repair features. Adversaries may disable or delete system recovery features to augment the effects of?Data Destruction?and?Data Encrypted for Impact.",
        "id": "2721",
        "mitigation": "Data Backup",
        "mitigationid": "M1053",
        "technique": "Inhibit System Recovery",
        "techniqueid": "T1490"
    },
    {
        "description": "Adversaries may collect data related to managed devices from configuration repositories. Configuration repositories are used by management systems in order to configure, manage, and control data on remote systems. Configuration repositories may also facilitate remote access and administration of devices.",
        "id": "2722",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Data from Configuration Repository",
        "techniqueid": "T1602"
    },
    {
        "description": "Adversaries may target the Management Information Base (MIB) to collect and/or mine valuable information in a network managed using Simple Network Management Protocol (SNMP).",
        "id": "2723",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "SNMP (MIB Dump)",
        "techniqueid": "T1602.001"
    },
    {
        "description": "Adversaries may access network configuration files to collect sensitive data about the device and the network. The network configuration is a file containing parameters that determine the operation of the device. The device typically stores an in-memory copy of the configuration while operating, and a separate configuration on non-volatile storage to load after device reset. Adversaries can inspect the configuration files to reveal information about the target network and its layout, the network device and its software, or identifying legitimate accounts and credentials for later use.",
        "id": "2724",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Network Device Configuration Dump",
        "techniqueid": "T1602.002"
    },
    {
        "description": "Adversaries may attempt to take advantage of a weakness in an Internet-facing computer or program using software, data, or commands in order to cause unintended or unanticipated behavior. The weakness in the system can be a bug, a glitch, or a design vulnerability. These applications are often websites, but can include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other applications with Internet accessible open sockets, such as web servers and related services. Depending on the flaw being exploited this may include?Exploitation for Defense Evasion.",
        "id": "2725",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Exploit Public-Facing Application",
        "techniqueid": "T1190"
    },
    {
        "description": "Adversaries may abuse scripting or built-in command line interpreters (CLI) on network devices to execute malicious command and payloads. The CLI is the primary means through which users and administrators interact with the device in order to view system information, modify device operations, or perform diagnostic and administrative functions. CLIs typically contain various permission levels required for different commands.",
        "id": "2726",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Network Device CLI",
        "techniqueid": "T1059.008"
    },
    {
        "description": "Adversaries may abuse scripting or built-in command line interpreters (CLI) on network devices to execute malicious command and payloads. The CLI is the primary means through which users and administrators interact with the device in order to view system information, modify device operations, or perform diagnostic and administrative functions. CLIs typically contain various permission levels required for different commands.",
        "id": "2727",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Network Device CLI",
        "techniqueid": "T1059.008"
    },
    {
        "description": "Adversaries may attempt to take advantage of a weakness in an Internet-facing computer or program using software, data, or commands in order to cause unintended or unanticipated behavior. The weakness in the system can be a bug, a glitch, or a design vulnerability. These applications are often websites, but can include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other applications with Internet accessible open sockets, such as web servers and related services. Depending on the flaw being exploited this may include?Exploitation for Defense Evasion.",
        "id": "2728",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Exploit Public-Facing Application",
        "techniqueid": "T1190"
    },
    {
        "description": "Adversaries may install code on externally facing portals, such as a VPN login page, to capture and transmit credentials of users who attempt to log into the service. For example, a compromised login page may log provided user credentials before logging the user in to the service.",
        "id": "2729",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Web Portal Capture",
        "techniqueid": "T1056.003"
    },
    {
        "description": "Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows or pluggable authentication modules (PAM) on Unix-based systems, responsible for gathering, storing, and validating credentials.",
        "id": "2730",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Modify Authentication Process",
        "techniqueid": "T1556"
    },
    {
        "description": "Adversaries may use?Patch System Image?to hard code a password in the operating system, thus bypassing of native authentication mechanisms for local accounts on network devices.",
        "id": "2731",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Network Device Authentication",
        "techniqueid": "T1556.004"
    },
    {
        "description": "Adversaries may make changes to the operating system of embedded network devices to weaken defenses and provide new capabilities for themselves. On such devices, the operating systems are typically monolithic and most of the device functionality and capabilities are contained within a single file.",
        "id": "2732",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Modify System Image",
        "techniqueid": "T1601"
    },
    {
        "description": "Adversaries may modify the operating system of a network device to introduce new capabilities or weaken existing defenses. Some network devices are built with a monolithic architecture, where the entire operating system and most of the functionality of the device is contained within a single file. Adversaries may change this file in storage, to be loaded in a future boot, or in memory during runtime.",
        "id": "2733",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Patch System Image",
        "techniqueid": "T1601.001"
    },
    {
        "description": "Adversaries may install an older version of the operating system of a network device to weaken security. Older operating system versions on network devices often have weaker encryption ciphers and, in general, fewer/less updated defensive features.",
        "id": "2734",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Downgrade System Image",
        "techniqueid": "T1601.002"
    },
    {
        "description": "Adversaries may bridge network boundaries by compromising perimeter network devices. Breaching these devices may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.",
        "id": "2735",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Network Boundary Bridging",
        "techniqueid": "T1599"
    },
    {
        "description": "Adversaries may bridge network boundaries by modifying a network device��s Network Address Translation (NAT) configuration. Malicious modifications to NAT may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.",
        "id": "2736",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Network Address Translation Traversal",
        "techniqueid": "T1599.001"
    },
    {
        "description": "Adversaries may manipulate accounts to maintain access to victim systems. Account manipulation may consist of any action that preserves adversary access to a compromised account, such as modifying credentials or permission groups. These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials. In order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain.",
        "id": "2737",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Account Manipulation",
        "techniqueid": "T1098"
    },
    {
        "description": "Adversaries may add adversary-controlled credentials to a cloud account to maintain persistent access to victim accounts and instances within the environment.",
        "id": "2738",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Additional Cloud Credentials",
        "techniqueid": "T1098.001"
    },
    {
        "description": "Adversaries may create an account to maintain access to victim systems. With a sufficient level of access, creating such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.",
        "id": "2739",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Create Account",
        "techniqueid": "T1136"
    },
    {
        "description": "Adversaries may create a domain account to maintain access to victim systems. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover user, administrator, and service accounts. With a sufficient level of access, the?net user /add /domain?command can be used to create a domain account.",
        "id": "2740",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Domain Account",
        "techniqueid": "T1136.002"
    },
    {
        "description": "Adversaries may create a cloud account to maintain access to victim systems. With a sufficient level of access, such accounts may be used to establish secondary credentialed access that does not require persistent remote access tools to be deployed on the system.",
        "id": "2741",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Cloud Account",
        "techniqueid": "T1136.003"
    },
    {
        "description": "Adversaries may collect data related to managed devices from configuration repositories. Configuration repositories are used by management systems in order to configure, manage, and control data on remote systems. Configuration repositories may also facilitate remote access and administration of devices.",
        "id": "2742",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Data from Configuration Repository",
        "techniqueid": "T1602"
    },
    {
        "description": "Adversaries may target the Management Information Base (MIB) to collect and/or mine valuable information in a network managed using Simple Network Management Protocol (SNMP).",
        "id": "2743",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "SNMP (MIB Dump)",
        "techniqueid": "T1602.001"
    },
    {
        "description": "Adversaries may access network configuration files to collect sensitive data about the device and the network. The network configuration is a file containing parameters that determine the operation of the device. The device typically stores an in-memory copy of the configuration while operating, and a separate configuration on non-volatile storage to load after device reset. Adversaries can inspect the configuration files to reveal information about the target network and its layout, the network device and its software, or identifying legitimate accounts and credentials for later use.",
        "id": "2744",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Network Device Configuration Dump",
        "techniqueid": "T1602.002"
    },
    {
        "description": "Adversaries may insert, delete, or manipulate data in order to manipulate external outcomes or hide activity. By manipulating data, adversaries may attempt to affect a business process, organizational understanding, or decision making.",
        "id": "2745",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Data Manipulation",
        "techniqueid": "T1565"
    },
    {
        "description": "Adversaries may modify systems in order to manipulate the data as it is accessed and displayed to an end user. By manipulating runtime data, adversaries may attempt to affect a business process, organizational understanding, and decision making.",
        "id": "2746",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Runtime Data Manipulation",
        "techniqueid": "T1565.003"
    },
    {
        "description": "Adversaries may attempt to gather information on domain trust relationships that may be used to identify lateral movement opportunities in Windows multi-domain/forest environments. Domain trusts provide a mechanism for a domain to allow access to resources based on the authentication procedures of another domain. Domain trusts allow the users of the trusted domain to access resources in the trusting domain. The information discovered may help the adversary conduct?SID-History Injection,?Pass the Ticket, and?Kerberoasting. Domain trusts can be enumerated using the?DSEnumerateDomainTrusts()?Win32 API call, .NET methods, and LDAP. The Windows utility?Nltest?is known to be used by adversaries to enumerate domain trusts.",
        "id": "2747",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Domain Trust Discovery",
        "techniqueid": "T1482"
    },
    {
        "description": "Adversaries may steal data by exfiltrating it over a different protocol than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.",
        "id": "2748",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Exfiltration Over Alternative Protocol",
        "techniqueid": "T1048"
    },
    {
        "description": "Adversaries may steal data by exfiltrating it over a symmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.",
        "id": "2749",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Exfiltration Over Symmetric Encrypted Non-C2 Protocol",
        "techniqueid": "T1048.001"
    },
    {
        "description": "Adversaries may steal data by exfiltrating it over an asymmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.",
        "id": "2750",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Exfiltration Over Asymmetric Encrypted Non-C2 Protocol",
        "techniqueid": "T1048.002"
    },
    {
        "description": "Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.",
        "id": "2751",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol",
        "techniqueid": "T1048.003"
    },
    {
        "description": "Adversaries may attempt to take advantage of a weakness in an Internet-facing computer or program using software, data, or commands in order to cause unintended or unanticipated behavior. The weakness in the system can be a bug, a glitch, or a design vulnerability. These applications are often websites, but can include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other applications with Internet accessible open sockets, such as web servers and related services. Depending on the flaw being exploited this may include?Exploitation for Defense Evasion.",
        "id": "2752",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Exploit Public-Facing Application",
        "techniqueid": "T1190"
    },
    {
        "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.?A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.",
        "id": "2753",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Exploitation of Remote Services",
        "techniqueid": "T1210"
    },
    {
        "description": "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as?Windows Remote Management?can also be used externally.",
        "id": "2754",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "External Remote Services",
        "techniqueid": "T1133"
    },
    {
        "description": "Adversaries may attempt to position themselves between two or more networked devices using a man-in-the-middle (MiTM) technique to support follow-on behaviors such as?Network Sniffing?or?Transmitted Data Manipulation. By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.",
        "id": "2755",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Man-in-the-Middle",
        "techniqueid": "T1557"
    },
    {
        "description": "By responding to LLMNR/NBT-NS network traffic, adversaries may spoof an authoritative source for name resolution to force communication with an adversary controlled system. This activity may be used to collect or relay authentication materials.",
        "id": "2756",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "LLMNR/NBT-NS Poisoning and SMB Relay",
        "techniqueid": "T1557.001"
    },
    {
        "description": "Adversaries may attempt to get a listing of services running on remote hosts, including those that may be vulnerable to remote software exploitation. Methods to acquire this information include port scans and vulnerability scans using tools that are brought onto a system.",
        "id": "2757",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Network Service Scanning",
        "techniqueid": "T1046"
    },
    {
        "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).",
        "id": "2758",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Non-Application Layer Protocol",
        "techniqueid": "T1095"
    },
    {
        "description": "Adversaries may communicate using a protocol and port paring that are typically not associated. For example, HTTPS over port 8088 or port 587 as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data.",
        "id": "2759",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Non-Standard Port",
        "techniqueid": "T1571"
    },
    {
        "description": "Adversaries may take control of preexisting sessions with remote services to move laterally in an environment. Users may use valid credentials to log into a service specifically designed to accept remote connections, such as telnet, SSH, and RDP. When a user logs into a service, a session will be established that will allow them to maintain a continuous interaction with that service.",
        "id": "2760",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Remote Service Session Hijacking",
        "techniqueid": "T1563"
    },
    {
        "description": "Adversaries may hijack a legitimate user��s remote desktop session to move laterally within an environment. Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).",
        "id": "2761",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "RDP Hijacking",
        "techniqueid": "T1563.002"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.",
        "id": "2762",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Remote Desktop Protocol",
        "techniqueid": "T1021.001"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to interact with remote machines by taking advantage of Distributed Component Object Model (DCOM). The adversary may then perform actions as the logged-on user.",
        "id": "2763",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Distributed Component Object Model",
        "techniqueid": "T1021.003"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to interact with remote systems using Windows Remote Management (WinRM). The adversary may then perform actions as the logged-on user.",
        "id": "2764",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Windows Remote Management",
        "techniqueid": "T1021.006"
    },
    {
        "description": "Adversaries may stop or disable services on a system to render those services unavailable to legitimate users. Stopping critical services can inhibit or stop response to an incident or aid in the adversary's overall objectives to cause damage to the environment.",
        "id": "2765",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Service Stop",
        "techniqueid": "T1489"
    },
    {
        "description": "Adversaries may gain access to and use third-party software suites installed within an enterprise network, such as administration, monitoring, and deployment systems, to move laterally through the network. Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, VNC, HBSS, Altiris, etc.).",
        "id": "2766",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Software Deployment Tools",
        "techniqueid": "T1072"
    },
    {
        "description": "Adversaries may breach or otherwise leverage organizations who have access to intended victims. Access through trusted third party relationship exploits an existing connection that may not be protected or receives less scrutiny than standard mechanisms of gaining access to a network.",
        "id": "2767",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Trusted Relationship",
        "techniqueid": "T1199"
    },
    {
        "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by accessibility features. Windows contains accessibility features that may be launched with a key combination before a user has logged in (ex: when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system.",
        "id": "2768",
        "mitigation": "Limit Access to Resource Over Network",
        "mitigationid": "M1035",
        "technique": "Accessibility Features",
        "techniqueid": "T1546.008"
    },
    {
        "description": "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as?Windows Remote Management?can also be used externally.",
        "id": "2769",
        "mitigation": "Limit Access to Resource Over Network",
        "mitigationid": "M1035",
        "technique": "External Remote Services",
        "techniqueid": "T1133"
    },
    {
        "description": "Adversaries may introduce computer accessories, computers, or networking hardware into a system or network that can be used as a vector to gain access. While public references of usage by APT groups are scarce, many penetration testers leverage hardware additions for initial access. Commercial and open source products are leveraged with capabilities such as passive network tapping , man-in-the middle encryption breaking , keystroke injection , kernel memory reading via DMA , adding new wireless access to an existing network , and others.",
        "id": "2770",
        "mitigation": "Limit Access to Resource Over Network",
        "mitigationid": "M1035",
        "technique": "Hardware Additions",
        "techniqueid": "T1200"
    },
    {
        "description": "Adversaries may attempt to position themselves between two or more networked devices using a man-in-the-middle (MiTM) technique to support follow-on behaviors such as?Network Sniffing?or?Transmitted Data Manipulation. By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.",
        "id": "2771",
        "mitigation": "Limit Access to Resource Over Network",
        "mitigationid": "M1035",
        "technique": "Man-in-the-Middle",
        "techniqueid": "T1557"
    },
    {
        "description": "Adversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such as?Network Sniffing?or?Transmitted Data Manipulation.",
        "id": "2772",
        "mitigation": "Limit Access to Resource Over Network",
        "mitigationid": "M1035",
        "technique": "ARP Cache Poisoning",
        "techniqueid": "T1557.002"
    },
    {
        "description": "Adversaries may abuse netbooting to load an unauthorized network device operating system from a Trivial File Transfer Protocol (TFTP) server. TFTP boot (netbooting) is commonly used by network administrators to load configuration-controlled network device images from a centralized management server. Netbooting is one option in the boot sequence and can be used to centralize, manage, and control device images.",
        "id": "2773",
        "mitigation": "Limit Access to Resource Over Network",
        "mitigationid": "M1035",
        "technique": "TFTP Boot",
        "techniqueid": "T1542.005"
    },
    {
        "description": "Adversaries may hijack a legitimate user��s remote desktop session to move laterally within an environment. Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).",
        "id": "2774",
        "mitigation": "Limit Access to Resource Over Network",
        "mitigationid": "M1035",
        "technique": "RDP Hijacking",
        "techniqueid": "T1563.002"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.",
        "id": "2775",
        "mitigation": "Limit Access to Resource Over Network",
        "mitigationid": "M1035",
        "technique": "Remote Desktop Protocol",
        "techniqueid": "T1021.001"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user.",
        "id": "2776",
        "mitigation": "Limit Access to Resource Over Network",
        "mitigationid": "M1035",
        "technique": "SMB/Windows Admin Shares",
        "techniqueid": "T1021.002"
    },
    {
        "description": "Adversaries may abuse scripting or built-in command line interpreters (CLI) on network devices to execute malicious command and payloads. The CLI is the primary means through which users and administrators interact with the device in order to view system information, modify device operations, or perform diagnostic and administrative functions. CLIs typically contain various permission levels required for different commands.",
        "id": "2777",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Network Device CLI",
        "techniqueid": "T1059.008"
    },
    {
        "description": "Adversaries may abuse scripting or built-in command line interpreters (CLI) on network devices to execute malicious command and payloads. The CLI is the primary means through which users and administrators interact with the device in order to view system information, modify device operations, or perform diagnostic and administrative functions. CLIs typically contain various permission levels required for different commands.",
        "id": "2778",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Network Device CLI",
        "techniqueid": "T1059.008"
    },
    {
        "description": "Adversaries may abuse netbooting to load an unauthorized network device operating system from a Trivial File Transfer Protocol (TFTP) server. TFTP boot (netbooting) is commonly used by network administrators to load configuration-controlled network device images from a centralized management server. Netbooting is one option in the boot sequence and can be used to centralize, manage, and control device images.",
        "id": "2779",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "TFTP Boot",
        "techniqueid": "T1542.005"
    },
    {
        "description": "Adversaries may introduce computer accessories, computers, or networking hardware into a system or network that can be used as a vector to gain access. While public references of usage by APT groups are scarce, many penetration testers leverage hardware additions for initial access. Commercial and open source products are leveraged with capabilities such as passive network tapping , man-in-the middle encryption breaking , keystroke injection , kernel memory reading via DMA , adding new wireless access to an existing network , and others.",
        "id": "2780",
        "mitigation": "Limit Access to Resource Over Network",
        "mitigationid": "M1035",
        "technique": "Hardware Additions",
        "techniqueid": "T1200"
    },
    {
        "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by accessibility features. Windows contains accessibility features that may be launched with a key combination before a user has logged in (ex: when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system.",
        "id": "2781",
        "mitigation": "Limit Access to Resource Over Network",
        "mitigationid": "M1035",
        "technique": "Accessibility Features",
        "techniqueid": "T1546.008"
    },
    {
        "description": "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as?Windows Remote Management?can also be used externally.",
        "id": "2782",
        "mitigation": "Limit Access to Resource Over Network",
        "mitigationid": "M1035",
        "technique": "External Remote Services",
        "techniqueid": "T1133"
    },
    {
        "description": "Adversaries may hijack a legitimate user��s remote desktop session to move laterally within an environment. Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).",
        "id": "2783",
        "mitigation": "Limit Access to Resource Over Network",
        "mitigationid": "M1035",
        "technique": "RDP Hijacking",
        "techniqueid": "T1563.002"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.",
        "id": "2784",
        "mitigation": "Limit Access to Resource Over Network",
        "mitigationid": "M1035",
        "technique": "Remote Desktop Protocol",
        "techniqueid": "T1021.001"
    },
    {
        "description": "Once established within a system or network, an adversary may use automated techniques for collecting internal data. Methods for performing this technique could include use of a?Command and Scripting Interpreter?to search for and copy information fitting set criteria such as file type, location, or name at specific time intervals. This functionality could also be built into remote access tools.",
        "id": "2785",
        "mitigation": "Remote Data Storage",
        "mitigationid": "M1029",
        "technique": "Automated Collection",
        "techniqueid": "T1119"
    },
    {
        "description": "Adversaries may insert, delete, or manipulate data in order to manipulate external outcomes or hide activity. By manipulating data, adversaries may attempt to affect a business process, organizational understanding, or decision making.",
        "id": "2786",
        "mitigation": "Remote Data Storage",
        "mitigationid": "M1029",
        "technique": "Data Manipulation",
        "techniqueid": "T1565"
    },
    {
        "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity. By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making.",
        "id": "2787",
        "mitigation": "Remote Data Storage",
        "mitigationid": "M1029",
        "technique": "Stored Data Manipulation",
        "techniqueid": "T1565.001"
    },
    {
        "description": "Adversaries may delete or alter generated artifacts on a host system, including logs or captured files such as quarantined malware. Locations and format of logs are platform or product-specific, however standard operating system logs are captured as Windows events or Linux/macOS files such as?Bash History?and /var/log/*.",
        "id": "2788",
        "mitigation": "Remote Data Storage",
        "mitigationid": "M1029",
        "technique": "Indicator Removal on Host",
        "techniqueid": "T1070"
    },
    {
        "description": "Adversaries may clear Windows Event Logs to hide the activity of an intrusion. Windows Event Logs are a record of a computer's alerts and notifications. There are three system-defined sources of events: System, Application, and Security, with five event types: Error, Warning, Information, Success Audit, and Failure Audit.",
        "id": "2789",
        "mitigation": "Remote Data Storage",
        "mitigationid": "M1029",
        "technique": "Clear Windows Event Logs",
        "techniqueid": "T1070.001"
    },
    {
        "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the?/var/log/?directory. Subfolders in this directory categorize logs by their related functions, such as:",
        "id": "2790",
        "mitigation": "Remote Data Storage",
        "mitigationid": "M1029",
        "technique": "Clear Linux or Mac System Logs",
        "techniqueid": "T1070.002"
    },
    {
        "description": "Adversaries may manipulate accounts to maintain access to victim systems. Account manipulation may consist of any action that preserves adversary access to a compromised account, such as modifying credentials or permission groups. These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials. In order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain.",
        "id": "2791",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Account Manipulation",
        "techniqueid": "T1098"
    },
    {
        "description": "Adversaries may add adversary-controlled credentials to a cloud account to maintain persistent access to victim accounts and instances within the environment.",
        "id": "2792",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Additional Cloud Credentials",
        "techniqueid": "T1098.001"
    },
    {
        "description": "Adversaries may create an account to maintain access to victim systems. With a sufficient level of access, creating such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.",
        "id": "2793",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Create Account",
        "techniqueid": "T1136"
    },
    {
        "description": "Adversaries may create a domain account to maintain access to victim systems. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover user, administrator, and service accounts. With a sufficient level of access, the?net user /add /domain?command can be used to create a domain account.",
        "id": "2794",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Domain Account",
        "techniqueid": "T1136.002"
    },
    {
        "description": "Adversaries may create a cloud account to maintain access to victim systems. With a sufficient level of access, such accounts may be used to establish secondary credentialed access that does not require persistent remote access tools to be deployed on the system.",
        "id": "2795",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Cloud Account",
        "techniqueid": "T1136.003"
    },
    {
        "description": "Adversaries may collect data related to managed devices from configuration repositories. Configuration repositories are used by management systems in order to configure, manage, and control data on remote systems. Configuration repositories may also facilitate remote access and administration of devices.",
        "id": "2796",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Data from Configuration Repository",
        "techniqueid": "T1602"
    },
    {
        "description": "Adversaries may target the Management Information Base (MIB) to collect and/or mine valuable information in a network managed using Simple Network Management Protocol (SNMP).",
        "id": "2797",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "SNMP (MIB Dump)",
        "techniqueid": "T1602.001"
    },
    {
        "description": "Adversaries may access network configuration files to collect sensitive data about the device and the network. The network configuration is a file containing parameters that determine the operation of the device. The device typically stores an in-memory copy of the configuration while operating, and a separate configuration on non-volatile storage to load after device reset. Adversaries can inspect the configuration files to reveal information about the target network and its layout, the network device and its software, or identifying legitimate accounts and credentials for later use.",
        "id": "2798",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Network Device Configuration Dump",
        "techniqueid": "T1602.002"
    },
    {
        "description": "Adversaries may insert, delete, or manipulate data in order to manipulate external outcomes or hide activity. By manipulating data, adversaries may attempt to affect a business process, organizational understanding, or decision making.",
        "id": "2799",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Data Manipulation",
        "techniqueid": "T1565"
    },
    {
        "description": "Adversaries may modify systems in order to manipulate the data as it is accessed and displayed to an end user. By manipulating runtime data, adversaries may attempt to affect a business process, organizational understanding, and decision making.",
        "id": "2800",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Runtime Data Manipulation",
        "techniqueid": "T1565.003"
    },
    {
        "description": "Adversaries may attempt to gather information on domain trust relationships that may be used to identify lateral movement opportunities in Windows multi-domain/forest environments. Domain trusts provide a mechanism for a domain to allow access to resources based on the authentication procedures of another domain. Domain trusts allow the users of the trusted domain to access resources in the trusting domain. The information discovered may help the adversary conduct?SID-History Injection,?Pass the Ticket, and?Kerberoasting. Domain trusts can be enumerated using the?DSEnumerateDomainTrusts()?Win32 API call, .NET methods, and LDAP. The Windows utility?Nltest?is known to be used by adversaries to enumerate domain trusts.",
        "id": "2801",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Domain Trust Discovery",
        "techniqueid": "T1482"
    },
    {
        "description": "Adversaries may steal data by exfiltrating it over a different protocol than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.",
        "id": "2802",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Exfiltration Over Alternative Protocol",
        "techniqueid": "T1048"
    },
    {
        "description": "Adversaries may steal data by exfiltrating it over a symmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.",
        "id": "2803",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Exfiltration Over Symmetric Encrypted Non-C2 Protocol",
        "techniqueid": "T1048.001"
    },
    {
        "description": "Adversaries may steal data by exfiltrating it over an asymmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.",
        "id": "2804",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Exfiltration Over Asymmetric Encrypted Non-C2 Protocol",
        "techniqueid": "T1048.002"
    },
    {
        "description": "Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.",
        "id": "2805",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol",
        "techniqueid": "T1048.003"
    },
    {
        "description": "Adversaries may attempt to take advantage of a weakness in an Internet-facing computer or program using software, data, or commands in order to cause unintended or unanticipated behavior. The weakness in the system can be a bug, a glitch, or a design vulnerability. These applications are often websites, but can include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other applications with Internet accessible open sockets, such as web servers and related services. Depending on the flaw being exploited this may include?Exploitation for Defense Evasion.",
        "id": "2806",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Exploit Public-Facing Application",
        "techniqueid": "T1190"
    },
    {
        "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.?A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.",
        "id": "2807",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Exploitation of Remote Services",
        "techniqueid": "T1210"
    },
    {
        "description": "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as?Windows Remote Management?can also be used externally.",
        "id": "2808",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "External Remote Services",
        "techniqueid": "T1133"
    },
    {
        "description": "Adversaries may attempt to position themselves between two or more networked devices using a man-in-the-middle (MiTM) technique to support follow-on behaviors such as?Network Sniffing?or?Transmitted Data Manipulation. By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.",
        "id": "2809",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Man-in-the-Middle",
        "techniqueid": "T1557"
    },
    {
        "description": "By responding to LLMNR/NBT-NS network traffic, adversaries may spoof an authoritative source for name resolution to force communication with an adversary controlled system. This activity may be used to collect or relay authentication materials.",
        "id": "2810",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "LLMNR/NBT-NS Poisoning and SMB Relay",
        "techniqueid": "T1557.001"
    },
    {
        "description": "Adversaries may attempt to get a listing of services running on remote hosts, including those that may be vulnerable to remote software exploitation. Methods to acquire this information include port scans and vulnerability scans using tools that are brought onto a system.",
        "id": "2811",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Network Service Scanning",
        "techniqueid": "T1046"
    },
    {
        "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).",
        "id": "2812",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Non-Application Layer Protocol",
        "techniqueid": "T1095"
    },
    {
        "description": "Adversaries may communicate using a protocol and port paring that are typically not associated. For example, HTTPS over port 8088 or port 587 as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data.",
        "id": "2813",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Non-Standard Port",
        "techniqueid": "T1571"
    },
    {
        "description": "Adversaries may take control of preexisting sessions with remote services to move laterally in an environment. Users may use valid credentials to log into a service specifically designed to accept remote connections, such as telnet, SSH, and RDP. When a user logs into a service, a session will be established that will allow them to maintain a continuous interaction with that service.",
        "id": "2814",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Remote Service Session Hijacking",
        "techniqueid": "T1563"
    },
    {
        "description": "Adversaries may hijack a legitimate user��s remote desktop session to move laterally within an environment. Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).",
        "id": "2815",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "RDP Hijacking",
        "techniqueid": "T1563.002"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.",
        "id": "2816",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Remote Desktop Protocol",
        "techniqueid": "T1021.001"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to interact with remote systems using Windows Remote Management (WinRM). The adversary may then perform actions as the logged-on user.",
        "id": "2817",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Windows Remote Management",
        "techniqueid": "T1021.006"
    },
    {
        "description": "Adversaries may stop or disable services on a system to render those services unavailable to legitimate users. Stopping critical services can inhibit or stop response to an incident or aid in the adversary's overall objectives to cause damage to the environment.",
        "id": "2818",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Service Stop",
        "techniqueid": "T1489"
    },
    {
        "description": "Adversaries may gain access to and use third-party software suites installed within an enterprise network, such as administration, monitoring, and deployment systems, to move laterally through the network. Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, VNC, HBSS, Altiris, etc.).",
        "id": "2819",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Software Deployment Tools",
        "techniqueid": "T1072"
    },
    {
        "description": "Adversaries may breach or otherwise leverage organizations who have access to intended victims. Access through trusted third party relationship exploits an existing connection that may not be protected or receives less scrutiny than standard mechanisms of gaining access to a network.",
        "id": "2820",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Trusted Relationship",
        "techniqueid": "T1199"
    },
    {
        "description": "Adversaries may modify the kernel to automatically execute programs on system boot. Loadable Kernel Modules (LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. ?",
        "id": "2821",
        "mitigation": "Antivirus/Antimalware",
        "mitigationid": "M1049",
        "technique": "Kernel Modules and Extensions",
        "techniqueid": "T1547.006"
    },
    {
        "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of?Unix Shell?while Windows installations include the?Windows Command Shell?and?PowerShell.",
        "id": "2822",
        "mitigation": "Antivirus/Antimalware",
        "mitigationid": "M1049",
        "technique": "Command and Scripting Interpreter",
        "techniqueid": "T1059"
    },
    {
        "description": "Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as?Component Object Model?and the?Native API?through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.",
        "id": "2823",
        "mitigation": "Antivirus/Antimalware",
        "mitigationid": "M1049",
        "technique": "Visual Basic",
        "techniqueid": "T1059.005"
    },
    {
        "description": "Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the?Start-Process?cmdlet which can be used to run an executable and the?Invoke-Command?cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).",
        "id": "2824",
        "mitigation": "Antivirus/Antimalware",
        "mitigationid": "M1049",
        "technique": "PowerShell",
        "techniqueid": "T1059.001"
    },
    {
        "description": "Adversaries may abuse Python commands and scripts for execution. Python is a very popular scripting/programming language, with capabilities to perform many functions. Python can be executed interactively from the command-line (via the?python.exe?interpreter) or via scripts (.py) that can be written and distributed to different systems. Python code can also be compiled into binary executables.",
        "id": "2825",
        "mitigation": "Antivirus/Antimalware",
        "mitigationid": "M1049",
        "technique": "Python",
        "techniqueid": "T1059.006"
    },
    {
        "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses.",
        "id": "2826",
        "mitigation": "Antivirus/Antimalware",
        "mitigationid": "M1049",
        "technique": "Obfuscated Files or Information",
        "techniqueid": "T1027"
    },
    {
        "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code.",
        "id": "2827",
        "mitigation": "Antivirus/Antimalware",
        "mitigationid": "M1049",
        "technique": "Software Packing",
        "techniqueid": "T1027.002"
    },
    {
        "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process.",
        "id": "2828",
        "mitigation": "Behavior Prevention on Endpoint",
        "mitigationid": "M1040",
        "technique": "Process Injection",
        "techniqueid": "T1055"
    },
    {
        "description": "Adversaries may inject dynamic-link libraries (DLLs) into processes in order to evade process-based defenses as well as possibly elevate privileges. DLL injection is a method of executing arbitrary code in the address space of a separate live process.",
        "id": "2829",
        "mitigation": "Behavior Prevention on Endpoint",
        "mitigationid": "M1040",
        "technique": "Dynamic-link Library Injection",
        "techniqueid": "T1055.001"
    },
    {
        "description": "Adversaries may inject portable executables (PE) into processes in order to evade process-based defenses as well as possibly elevate privileges. PE injection is a method of executing arbitrary code in the address space of a separate live process.",
        "id": "2830",
        "mitigation": "Behavior Prevention on Endpoint",
        "mitigationid": "M1040",
        "technique": "Portable Executable Injection",
        "techniqueid": "T1055.002"
    },
    {
        "description": "Adversaries may inject malicious code into suspended and hollowed processes in order to evade process-based defenses. Process hollowing is a method of executing arbitrary code in the address space of a separate live process.",
        "id": "2831",
        "mitigation": "Behavior Prevention on Endpoint",
        "mitigationid": "M1040",
        "technique": "Process Hollowing",
        "techniqueid": "T1055.012"
    },
    {
        "description": "Adversaries may inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. Thread Execution Hijacking is a method of executing arbitrary code in the address space of a separate live process.",
        "id": "2832",
        "mitigation": "Behavior Prevention on Endpoint",
        "mitigationid": "M1040",
        "technique": "Thread Execution Hijacking",
        "techniqueid": "T1055.003"
    },
    {
        "description": "Adversaries may inject malicious code into processes via the asynchronous procedure call (APC) queue in order to evade process-based defenses as well as possibly elevate privileges. APC injection is a method of executing arbitrary code in the address space of a separate live process.",
        "id": "2833",
        "mitigation": "Behavior Prevention on Endpoint",
        "mitigationid": "M1040",
        "technique": "Asynchronous Procedure Call",
        "techniqueid": "T1055.004"
    },
    {
        "description": "Adversaries may inject malicious code into processes via thread local storage (TLS) callbacks in order to evade process-based defenses as well as possibly elevate privileges. TLS callback injection is a method of executing arbitrary code in the address space of a separate live process.",
        "id": "2834",
        "mitigation": "Behavior Prevention on Endpoint",
        "mitigationid": "M1040",
        "technique": "Thread Local Storage",
        "techniqueid": "T1055.005"
    },
    {
        "description": "Adversaries may inject malicious code into processes via ptrace (process trace) system calls in order to evade process-based defenses as well as possibly elevate privileges. Ptrace system call injection is a method of executing arbitrary code in the address space of a separate live process.",
        "id": "2835",
        "mitigation": "Behavior Prevention on Endpoint",
        "mitigationid": "M1040",
        "technique": "Ptrace System Calls",
        "techniqueid": "T1055.008"
    },
    {
        "description": "Adversaries may inject malicious code into processes via the /proc filesystem in order to evade process-based defenses as well as possibly elevate privileges. Proc memory injection is a method of executing arbitrary code in the address space of a separate live process.",
        "id": "2836",
        "mitigation": "Behavior Prevention on Endpoint",
        "mitigationid": "M1040",
        "technique": "Proc Memory",
        "techniqueid": "T1055.009"
    },
    {
        "description": "Adversaries may inject malicious code into process via Extra Window Memory (EWM) in order to evade process-based defenses as well as possibly elevate privileges. EWM injection is a method of executing arbitrary code in the address space of a separate live process.",
        "id": "2837",
        "mitigation": "Behavior Prevention on Endpoint",
        "mitigationid": "M1040",
        "technique": "Extra Window Memory Injection",
        "techniqueid": "T1055.011"
    },
    {
        "description": "Adversaries may inject malicious code into process via process doppelg?nging in order to evade process-based defenses as well as possibly elevate privileges. Process doppelg?nging is a method of executing arbitrary code in the address space of a separate live process.",
        "id": "2838",
        "mitigation": "Behavior Prevention on Endpoint",
        "mitigationid": "M1040",
        "technique": "Process Doppelg?nging",
        "techniqueid": "T1055.013"
    },
    {
        "description": "Adversaries may inject malicious code into processes via VDSO hijacking in order to evade process-based defenses as well as possibly elevate privileges. Virtual dynamic shared object (vdso) hijacking is a method of executing arbitrary code in the address space of a separate live process.",
        "id": "2839",
        "mitigation": "Behavior Prevention on Endpoint",
        "mitigationid": "M1040",
        "technique": "VDSO Hijacking",
        "techniqueid": "T1055.014"
    },
    {
        "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.",
        "id": "2840",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Application Layer Protocol",
        "techniqueid": "T1071"
    },
    {
        "description": "Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.",
        "id": "2841",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Web Protocols",
        "techniqueid": "T1071.001"
    },
    {
        "description": "Adversaries may communicate using application layer protocols associated with transferring files to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.",
        "id": "2842",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "File Transfer Protocols",
        "techniqueid": "T1071.002"
    },
    {
        "description": "Adversaries may communicate using application layer protocols associated with electronic mail delivery to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.",
        "id": "2843",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Mail Protocols",
        "techniqueid": "T1071.003"
    },
    {
        "description": "Adversaries may communicate using the Domain Name System (DNS) application layer protocol to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.",
        "id": "2844",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "DNS",
        "techniqueid": "T1071.004"
    },
    {
        "description": "Adversaries may encode data to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a standard data encoding system. Use of data encoding may adhere to existing protocol specifications and includes use of ASCII, Unicode, Base64, MIME, or other binary-to-text and character encoding systems. Some data encoding systems may also result in data compression, such as gzip.",
        "id": "2845",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Data Encoding",
        "techniqueid": "T1132"
    },
    {
        "description": "Adversaries may encode data with a standard data encoding system to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a standard data encoding system that adheres to existing protocol specifications. Common data encoding schemes include ASCII, Unicode, hexadecimal, Base64, and MIME. Some data encoding systems may also result in data compression, such as gzip.",
        "id": "2846",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Standard Encoding",
        "techniqueid": "T1132.001"
    },
    {
        "description": "Adversaries may encode data with a non-standard data encoding system to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a non-standard data encoding system that diverges from existing protocol specifications. Non-standard data encoding schemes may be based on or related to standard data encoding schemes, such as a modified Base64 encoding for the message body of an HTTP request.",
        "id": "2847",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Non-Standard Encoding",
        "techniqueid": "T1132.002"
    },
    {
        "description": "Adversaries may collect data related to managed devices from configuration repositories. Configuration repositories are used by management systems in order to configure, manage, and control data on remote systems. Configuration repositories may also facilitate remote access and administration of devices.",
        "id": "2848",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Data from Configuration Repository",
        "techniqueid": "T1602"
    },
    {
        "description": "Adversaries may target the Management Information Base (MIB) to collect and/or mine valuable information in a network managed using Simple Network Management Protocol (SNMP).",
        "id": "2849",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "SNMP (MIB Dump)",
        "techniqueid": "T1602.001"
    },
    {
        "description": "Adversaries may access network configuration files to collect sensitive data about the device and the network. The network configuration is a file containing parameters that determine the operation of the device. The device typically stores an in-memory copy of the configuration while operating, and a separate configuration on non-volatile storage to load after device reset. Adversaries can inspect the configuration files to reveal information about the target network and its layout, the network device and its software, or identifying legitimate accounts and credentials for later use.",
        "id": "2850",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Network Device Configuration Dump",
        "techniqueid": "T1602.002"
    },
    {
        "description": "Adversaries may obfuscate command and control traffic to make it more difficult to detect. Command and control (C2) communications are hidden (but not necessarily encrypted) in an attempt to make the content more difficult to discover or decipher and to make the communication less conspicuous and hide commands from being seen. This encompasses many methods, such as adding junk data to protocol traffic, using steganography, or impersonating legitimate protocols.",
        "id": "2851",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Data Obfuscation",
        "techniqueid": "T1001"
    },
    {
        "description": "Adversaries may add junk data to protocols used for command and control to make detection more difficult. By adding random or meaningless data to the protocols used for command and control, adversaries can prevent trivial methods for decoding, deciphering, or otherwise analyzing the traffic. Examples may include appending/prepending data with junk characters or writing junk characters between significant characters.",
        "id": "2852",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Junk Data",
        "techniqueid": "T1001.001"
    },
    {
        "description": "Adversaries may use steganographic techniques to hide command and control traffic to make detection efforts more difficult. Steganographic techniques can be used to hide data in digital messages that are transferred between systems. This hidden information can be used for command and control of compromised systems. In some cases, the passing of files embedded using steganography, such as image or document files, can be used for command and control.",
        "id": "2853",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Steganography",
        "techniqueid": "T1001.002"
    },
    {
        "description": "Adversaries may impersonate legitimate protocols or web service traffic to disguise command and control activity and thwart analysis efforts. By impersonating legitimate protocols or web services, adversaries can make their command and control traffic blend in with legitimate network traffic.",
        "id": "2854",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Protocol Impersonation",
        "techniqueid": "T1001.003"
    },
    {
        "description": "An adversary may exfiltrate data in fixed size chunks instead of whole files or limit packet sizes below certain thresholds. This approach may be used to avoid triggering network data transfer threshold alerts.",
        "id": "2855",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Data Transfer Size Limits",
        "techniqueid": "T1030"
    },
    {
        "description": "Adversaries may dynamically establish connections to command and control infrastructure to evade common detections and remediations. This may be achieved by using malware that shares a common algorithm with the infrastructure the adversary uses to receive the malware's communications. These calculations can be used to dynamically adjust parameters such as the domain name, IP address, or port number the malware uses for command and control.",
        "id": "2856",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Dynamic Resolution",
        "techniqueid": "T1568"
    },
    {
        "description": "Adversaries may make use of Domain Generation Algorithms (DGAs) to dynamically identify a destination domain for command and control traffic rather than relying on a list of static IP addresses or domains. This has the advantage of making it much harder for defenders block, track, or take over the command and control channel, as there potentially could be thousands of domains that malware can check for instructions.",
        "id": "2857",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Domain Generation Algorithms",
        "techniqueid": "T1568.002"
    },
    {
        "description": "Adversaries may employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if secret keys are encoded and/or generated within malware samples/configuration files.",
        "id": "2858",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Encrypted Channel",
        "techniqueid": "T1573"
    },
    {
        "description": "Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.",
        "id": "2859",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Symmetric Cryptography",
        "techniqueid": "T1573.001"
    },
    {
        "description": "Adversaries may employ a known asymmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Asymmetric cryptography, also known as public key cryptography, uses a keypair per party: one public that can be freely distributed, and one private. Due to how the keys are generated, the sender encrypts data with the receiver��s public key and the receiver decrypts the data with their private key. This ensures that only the intended recipient can read the encrypted data. Common public key encryption algorithms include RSA and ElGamal.",
        "id": "2860",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Asymmetric Cryptography",
        "techniqueid": "T1573.002"
    },
    {
        "description": "Adversaries may steal data by exfiltrating it over a different protocol than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.",
        "id": "2861",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Exfiltration Over Alternative Protocol",
        "techniqueid": "T1048"
    },
    {
        "description": "Adversaries may steal data by exfiltrating it over a symmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.",
        "id": "2862",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Exfiltration Over Symmetric Encrypted Non-C2 Protocol",
        "techniqueid": "T1048.001"
    },
    {
        "description": "Adversaries may steal data by exfiltrating it over an asymmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.",
        "id": "2863",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Exfiltration Over Asymmetric Encrypted Non-C2 Protocol",
        "techniqueid": "T1048.002"
    },
    {
        "description": "Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.",
        "id": "2864",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol",
        "techniqueid": "T1048.003"
    },
    {
        "description": "Adversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications.",
        "id": "2865",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Exfiltration Over C2 Channel",
        "techniqueid": "T1041"
    },
    {
        "description": "Adversaries may use fallback or alternate communication channels if the primary channel is compromised or inaccessible in order to maintain reliable command and control and to avoid data transfer thresholds.",
        "id": "2866",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Fallback Channels",
        "techniqueid": "T1008"
    },
    {
        "description": "Adversaries may transfer tools or other files from an external system into a compromised environment. Files may be copied from an external adversary controlled system through the command and control channel to bring tools into the victim network or through alternate protocols with another tool such as FTP. Files can also be copied over on Mac and Linux with native tools like scp, rsync, and sftp.",
        "id": "2867",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Ingress Tool Transfer",
        "techniqueid": "T1105"
    },
    {
        "description": "Adversaries may transfer tools or other files between systems in a compromised environment. Files may be copied from one system to another to stage adversary tools or other files over the course of an operation. Adversaries may copy files laterally between internal victim systems to support lateral movement using inherent file sharing protocols such as file sharing over SMB to connected network shares or with authenticated connections with?SMB/Windows Admin Shares?or?Remote Desktop Protocol. Files can also be copied over on Mac and Linux with native tools like scp, rsync, and sftp.",
        "id": "2868",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Lateral Tool Transfer",
        "techniqueid": "T1570"
    },
    {
        "description": "Adversaries may attempt to position themselves between two or more networked devices using a man-in-the-middle (MiTM) technique to support follow-on behaviors such as?Network Sniffing?or?Transmitted Data Manipulation. By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.",
        "id": "2869",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Man-in-the-Middle",
        "techniqueid": "T1557"
    },
    {
        "description": "By responding to LLMNR/NBT-NS network traffic, adversaries may spoof an authoritative source for name resolution to force communication with an adversary controlled system. This activity may be used to collect or relay authentication materials.",
        "id": "2870",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "LLMNR/NBT-NS Poisoning and SMB Relay",
        "techniqueid": "T1557.001"
    },
    {
        "description": "Adversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such as?Network Sniffing?or?Transmitted Data Manipulation.",
        "id": "2871",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "ARP Cache Poisoning",
        "techniqueid": "T1557.002"
    },
    {
        "description": "Adversaries may create multiple stages for command and control that are employed under different conditions or for certain functions. Use of multiple stages may obfuscate the command and control channel to make detection more difficult.",
        "id": "2872",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Multi-Stage Channels",
        "techniqueid": "T1104"
    },
    {
        "description": "Adversaries may attempt to get a listing of services running on remote hosts, including those that may be vulnerable to remote software exploitation. Methods to acquire this information include port scans and vulnerability scans using tools that are brought onto a system.",
        "id": "2873",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Network Service Scanning",
        "techniqueid": "T1046"
    },
    {
        "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).",
        "id": "2874",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Non-Application Layer Protocol",
        "techniqueid": "T1095"
    },
    {
        "description": "Adversaries may communicate using a protocol and port paring that are typically not associated. For example, HTTPS over port 8088 or port 587 as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data.",
        "id": "2875",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Non-Standard Port",
        "techniqueid": "T1571"
    },
    {
        "description": "Adversaries may send phishing messages to gain access to victim systems. All forms of phishing are electronically delivered social engineering. Phishing can be targeted, known as spearphishing. In spearphishing, a specific individual, company, or industry will be targeted by the adversary. More generally, adversaries can conduct non-targeted phishing, such as in mass malware spam campaigns.",
        "id": "2876",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Phishing",
        "techniqueid": "T1566"
    },
    {
        "description": "Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon?User Execution?to gain execution.",
        "id": "2877",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Spearphishing Attachment",
        "techniqueid": "T1566.001"
    },
    {
        "description": "Adversaries may abuse netbooting to load an unauthorized network device operating system from a Trivial File Transfer Protocol (TFTP) server. TFTP boot (netbooting) is commonly used by network administrators to load configuration-controlled network device images from a centralized management server. Netbooting is one option in the boot sequence and can be used to centralize, manage, and control device images.",
        "id": "2878",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "TFTP Boot",
        "techniqueid": "T1542.005"
    },
    {
        "description": "Adversaries may abuse the ROM Monitor (ROMMON) by loading an unauthorized firmware with adversary code to provide persistent access and manipulate device behavior that is difficult to detect.",
        "id": "2879",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "ROMMONkit",
        "techniqueid": "T1542.004"
    },
    {
        "description": "Adversaries may tunnel network communications to and from a victim system within a separate protocol to avoid detection/network filtering and/or enable access to otherwise unreachable systems. Tunneling involves explicitly encapsulating a protocol within another. This behavior may conceal malicious traffic by blending in with existing traffic and/or provide an outer layer of encryption (similar to a VPN). Tunneling could also enable routing of network packets that would otherwise not reach their intended destination, such as SMB, RDP, or other traffic that would be filtered by network appliances or not routed over the Internet.",
        "id": "2880",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Protocol Tunneling",
        "techniqueid": "T1572"
    },
    {
        "description": "Adversaries may use a connection proxy to direct network traffic between systems or act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including?HTRAN, ZXProxy, and ZXPortMap. Adversaries use these types of proxies to manage command and control communications, reduce the number of simultaneous outbound network connections, provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between victims to avoid suspicion. Adversaries may chain together multiple proxies to further disguise the source of malicious traffic.",
        "id": "2881",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Proxy",
        "techniqueid": "T1090"
    },
    {
        "description": "Adversaries may use an internal proxy to direct command and control traffic between two or more systems in a compromised environment. Many tools exist that enable traffic redirection through proxies or port redirection, including?HTRAN, ZXProxy, and ZXPortMap. Adversaries use internal proxies to manage command and control communications inside a compromised environment, to reduce the number of simultaneous outbound network connections, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between infected systems to avoid suspicion. Internal proxy connections may use common peer-to-peer (p2p) networking protocols, such as SMB, to better blend in with the environment.",
        "id": "2882",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Internal Proxy",
        "techniqueid": "T1090.001"
    },
    {
        "description": "Adversaries may use an external proxy to act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including?HTRAN, ZXProxy, and ZXPortMap. Adversaries use these types of proxies to manage command and control communications, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths to avoid suspicion.",
        "id": "2883",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "External Proxy",
        "techniqueid": "T1090.002"
    },
    {
        "description": "An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks. These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment. Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries.",
        "id": "2884",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Remote Access Software",
        "techniqueid": "T1219"
    },
    {
        "description": "Adversaries may schedule data exfiltration to be performed only at certain times of day or at certain intervals. This could be done to blend traffic patterns with normal activity or availability.",
        "id": "2885",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Scheduled Transfer",
        "techniqueid": "T1029"
    },
    {
        "description": "Adversaries may create or modify references in Office document templates to conceal malicious code or force authentication attempts. Microsoft��s Office Open XML (OOXML) specification defines an XML-based format for Office documents (.docx, xlsx, .pptx) to replace older binary formats (.doc, .xls, .ppt). OOXML files are packed together ZIP archives compromised of various XML files, referred to as parts, containing properties that collectively define how a document is rendered.",
        "id": "2886",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Template Injection",
        "techniqueid": "T1221"
    },
    {
        "description": "An adversary may rely upon specific actions by a user in order to gain execution. Users may be subjected to social engineering to get them to execute malicious code by, for example, opening a malicious document file or link. These user actions will typically be observed as follow-on behavior from forms of?Phishing.",
        "id": "2887",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "User Execution",
        "techniqueid": "T1204"
    },
    {
        "description": "An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from?Spearphishing Link. Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via?Exploitation for Client Execution. Links may also lead users to download files that require execution via?Malicious File.",
        "id": "2888",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Malicious Link",
        "techniqueid": "T1204.001"
    },
    {
        "description": "Adversaries may use an existing, legitimate external Web service as a means for relaying data to/from a compromised system. Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.",
        "id": "2889",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Web Service",
        "techniqueid": "T1102"
    },
    {
        "description": "Adversaries may use an existing, legitimate external Web service to host information that points to additional command and control (C2) infrastructure. Adversaries may post content, known as a dead drop resolver, on Web services with embedded (and often obfuscated/encoded) domains or IP addresses. Once infected, victims will reach out to and be redirected by these resolvers.",
        "id": "2890",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Dead Drop Resolver",
        "techniqueid": "T1102.001"
    },
    {
        "description": "Adversaries may use an existing, legitimate external Web service as a means for sending commands to and receiving output from a compromised system over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems can then send the output from those commands back over that Web service channel. The return traffic may occur in a variety of ways, depending on the Web service being utilized. For example, the return traffic may take the form of the compromised system posting a comment on a forum, issuing a pull request to development project, updating a document hosted on a Web service, or by sending a Tweet.",
        "id": "2891",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Bidirectional Communication",
        "techniqueid": "T1102.002"
    },
    {
        "description": "Adversaries may use an existing, legitimate external Web service as a means for sending commands to a compromised system without receiving return output over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems may opt to send the output from those commands back over a different C2 channel, including to another distinct Web service. Alternatively, compromised systems may return no output at all in cases where adversaries want to send instructions to systems and do not want a response.",
        "id": "2892",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "One-Way Communication",
        "techniqueid": "T1102.003"
    },
    {
        "description": "Adversaries may communicate using the Domain Name System (DNS) application layer protocol to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.",
        "id": "2893",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "DNS",
        "techniqueid": "T1071.004"
    },
    {
        "description": "Adversaries may abuse BITS jobs to persistently execute or clean up after malicious payloads. Windows Background Intelligent Transfer Service (BITS) is a low-bandwidth, asynchronous file transfer mechanism exposed through?Component Object Model?(COM). BITS is commonly used by updaters, messengers, and other applications preferred to operate in the background (using available idle bandwidth) without interrupting other networked applications. File transfer tasks are implemented as BITS jobs, which contain a queue of one or more file operations.",
        "id": "2894",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "BITS Jobs",
        "techniqueid": "T1197"
    },
    {
        "description": "Adversaries may access data objects from improperly secured cloud storage.",
        "id": "2895",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Data from Cloud Storage Object",
        "techniqueid": "T1530"
    },
    {
        "description": "Adversaries may collect data related to managed devices from configuration repositories. Configuration repositories are used by management systems in order to configure, manage, and control data on remote systems. Configuration repositories may also facilitate remote access and administration of devices.",
        "id": "2896",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Data from Configuration Repository",
        "techniqueid": "T1602"
    },
    {
        "description": "Adversaries may target the Management Information Base (MIB) to collect and/or mine valuable information in a network managed using Simple Network Management Protocol (SNMP).",
        "id": "2897",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "SNMP (MIB Dump)",
        "techniqueid": "T1602.001"
    },
    {
        "description": "Adversaries may access network configuration files to collect sensitive data about the device and the network. The network configuration is a file containing parameters that determine the operation of the device. The device typically stores an in-memory copy of the configuration while operating, and a separate configuration on non-volatile storage to load after device reset. Adversaries can inspect the configuration files to reveal information about the target network and its layout, the network device and its software, or identifying legitimate accounts and credentials for later use.",
        "id": "2898",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Network Device Configuration Dump",
        "techniqueid": "T1602.002"
    },
    {
        "description": "Adversaries may steal data by exfiltrating it over a different protocol than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.",
        "id": "2899",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Exfiltration Over Alternative Protocol",
        "techniqueid": "T1048"
    },
    {
        "description": "Adversaries may steal data by exfiltrating it over a symmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.",
        "id": "2900",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Exfiltration Over Symmetric Encrypted Non-C2 Protocol",
        "techniqueid": "T1048.001"
    },
    {
        "description": "Adversaries may steal data by exfiltrating it over an asymmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.",
        "id": "2901",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Exfiltration Over Asymmetric Encrypted Non-C2 Protocol",
        "techniqueid": "T1048.002"
    },
    {
        "description": "Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.",
        "id": "2902",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol",
        "techniqueid": "T1048.003"
    },
    {
        "description": "Adversaries may gather credential material by invoking or forcing a user to automatically provide authentication information through a mechanism in which they can intercept.",
        "id": "2903",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Forced Authentication",
        "techniqueid": "T1187"
    },
    {
        "description": "Adversaries may transfer tools or other files between systems in a compromised environment. Files may be copied from one system to another to stage adversary tools or other files over the course of an operation. Adversaries may copy files laterally between internal victim systems to support lateral movement using inherent file sharing protocols such as file sharing over SMB to connected network shares or with authenticated connections with?SMB/Windows Admin Shares?or?Remote Desktop Protocol. Files can also be copied over on Mac and Linux with native tools like scp, rsync, and sftp.",
        "id": "2904",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Lateral Tool Transfer",
        "techniqueid": "T1570"
    },
    {
        "description": "Adversaries may attempt to position themselves between two or more networked devices using a man-in-the-middle (MiTM) technique to support follow-on behaviors such as?Network Sniffing?or?Transmitted Data Manipulation. By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.",
        "id": "2905",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Man-in-the-Middle",
        "techniqueid": "T1557"
    },
    {
        "description": "Adversaries may bridge network boundaries by compromising perimeter network devices. Breaching these devices may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.",
        "id": "2906",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Network Boundary Bridging",
        "techniqueid": "T1599"
    },
    {
        "description": "Adversaries may bridge network boundaries by modifying a network device��s Network Address Translation (NAT) configuration. Malicious modifications to NAT may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.",
        "id": "2907",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Network Address Translation Traversal",
        "techniqueid": "T1599.001"
    },
    {
        "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).",
        "id": "2908",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Non-Application Layer Protocol",
        "techniqueid": "T1095"
    },
    {
        "description": "Adversaries may tunnel network communications to and from a victim system within a separate protocol to avoid detection/network filtering and/or enable access to otherwise unreachable systems. Tunneling involves explicitly encapsulating a protocol within another. This behavior may conceal malicious traffic by blending in with existing traffic and/or provide an outer layer of encryption (similar to a VPN). Tunneling could also enable routing of network packets that would otherwise not reach their intended destination, such as SMB, RDP, or other traffic that would be filtered by network appliances or not routed over the Internet.",
        "id": "2909",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Protocol Tunneling",
        "techniqueid": "T1572"
    },
    {
        "description": "Adversaries may use a connection proxy to direct network traffic between systems or act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including?HTRAN, ZXProxy, and ZXPortMap. Adversaries use these types of proxies to manage command and control communications, reduce the number of simultaneous outbound network connections, provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between victims to avoid suspicion. Adversaries may chain together multiple proxies to further disguise the source of malicious traffic.",
        "id": "2910",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Proxy",
        "techniqueid": "T1090"
    },
    {
        "description": "To disguise the source of malicious traffic, adversaries may chain together multiple proxies. Typically, a defender will be able to identify the last proxy traffic traversed before it enters their network; the defender may or may not be able to identify any previous proxies before the last-hop proxy. This technique makes identifying the original source of the malicious traffic even more difficult by requiring the defender to trace malicious traffic through several proxies to identify its source. A particular variant of this behavior is to use onion routing networks, such as the publicly available TOR network.",
        "id": "2911",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Multi-hop Proxy",
        "techniqueid": "T1090.003"
    },
    {
        "description": "An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks. These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment. Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries.",
        "id": "2912",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Remote Access Software",
        "techniqueid": "T1219"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to remotely control machines using Virtual Network Computing (VNC). The adversary may then perform actions as the logged-on user.",
        "id": "2913",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "VNC",
        "techniqueid": "T1021.005"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user.",
        "id": "2914",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "SMB/Windows Admin Shares",
        "techniqueid": "T1021.002"
    },
    {
        "description": "Adversaries may abuse verclsid.exe to proxy execution of malicious code. Verclsid.exe is known as the Extension CLSID Verification Host and is responsible for verifying each shell extension before they are used by Windows Explorer or the Windows Shell.",
        "id": "2915",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Verclsid",
        "techniqueid": "T1218.012"
    },
    {
        "description": "Adversaries may use traffic signaling to hide open ports or other malicious functionality used for persistence or command and control. Traffic signaling involves the use of a magic value or sequence that must be sent to a system to trigger a special response, such as opening a closed port or executing a malicious task. This may take the form of sending a series of packets with certain characteristics before a port will be opened that the adversary can use for command and control. Usually this series of packets consists of attempted connections to a predefined sequence of closed ports (i.e.?Port Knocking), but can involve unusual flags, specific strings, or other unique characteristics. After the sequence is completed, opening a port may be accomplished by the host-based firewall, but could also be implemented by custom software.",
        "id": "2916",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Traffic Signaling",
        "techniqueid": "T1205"
    },
    {
        "description": "Adversaries may use port knocking to hide open ports used for persistence or command and control. To enable a port, an adversary sends a series of attempted connections to a predefined sequence of closed ports. After the sequence is completed, opening a port is often accomplished by the host based firewall, but could also be implemented by custom software.",
        "id": "2917",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Port Knocking",
        "techniqueid": "T1205.001"
    },
    {
        "description": "Adversaries may exfiltrate data by transferring the data, including backups of cloud environments, to another cloud account they control on the same service to avoid typical file transfers/downloads and network-based exfiltration detection.",
        "id": "2918",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Transfer Data to Cloud Account",
        "techniqueid": "T1537"
    },
    {
        "description": "Adversaries may attempt to access the Cloud Instance Metadata API to collect credentials and other sensitive data.",
        "id": "2919",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Cloud Instance Metadata API",
        "techniqueid": "T1552.005"
    },
    {
        "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by accessibility features. Windows contains accessibility features that may be launched with a key combination before a user has logged in (ex: when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system.",
        "id": "2920",
        "mitigation": "Limit Access to Resource Over Network",
        "mitigationid": "M1035",
        "technique": "Accessibility Features",
        "techniqueid": "T1546.008"
    },
    {
        "description": "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as?Windows Remote Management?can also be used externally.",
        "id": "2921",
        "mitigation": "Limit Access to Resource Over Network",
        "mitigationid": "M1035",
        "technique": "External Remote Services",
        "techniqueid": "T1133"
    },
    {
        "description": "Adversaries may hijack a legitimate user��s remote desktop session to move laterally within an environment. Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).",
        "id": "2922",
        "mitigation": "Limit Access to Resource Over Network",
        "mitigationid": "M1035",
        "technique": "RDP Hijacking",
        "techniqueid": "T1563.002"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.",
        "id": "2923",
        "mitigation": "Limit Access to Resource Over Network",
        "mitigationid": "M1035",
        "technique": "Remote Desktop Protocol",
        "techniqueid": "T1021.001"
    },
    {
        "description": "Adversaries may modify the kernel to automatically execute programs on system boot. Loadable Kernel Modules (LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. ?",
        "id": "2924",
        "mitigation": "Antivirus/Antimalware",
        "mitigationid": "M1049",
        "technique": "Kernel Modules and Extensions",
        "techniqueid": "T1547.006"
    },
    {
        "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of?Unix Shell?while Windows installations include the?Windows Command Shell?and?PowerShell.",
        "id": "2925",
        "mitigation": "Antivirus/Antimalware",
        "mitigationid": "M1049",
        "technique": "Command and Scripting Interpreter",
        "techniqueid": "T1059"
    },
    {
        "description": "Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as?Component Object Model?and the?Native API?through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.",
        "id": "2926",
        "mitigation": "Antivirus/Antimalware",
        "mitigationid": "M1049",
        "technique": "Visual Basic",
        "techniqueid": "T1059.005"
    },
    {
        "description": "Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the?Start-Process?cmdlet which can be used to run an executable and the?Invoke-Command?cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).",
        "id": "2927",
        "mitigation": "Antivirus/Antimalware",
        "mitigationid": "M1049",
        "technique": "PowerShell",
        "techniqueid": "T1059.001"
    },
    {
        "description": "Adversaries may abuse Python commands and scripts for execution. Python is a very popular scripting/programming language, with capabilities to perform many functions. Python can be executed interactively from the command-line (via the?python.exe?interpreter) or via scripts (.py) that can be written and distributed to different systems. Python code can also be compiled into binary executables.",
        "id": "2928",
        "mitigation": "Antivirus/Antimalware",
        "mitigationid": "M1049",
        "technique": "Python",
        "techniqueid": "T1059.006"
    },
    {
        "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses.",
        "id": "2929",
        "mitigation": "Antivirus/Antimalware",
        "mitigationid": "M1049",
        "technique": "Obfuscated Files or Information",
        "techniqueid": "T1027"
    },
    {
        "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code.",
        "id": "2930",
        "mitigation": "Antivirus/Antimalware",
        "mitigationid": "M1049",
        "technique": "Software Packing",
        "techniqueid": "T1027.002"
    },
    {
        "description": "Adversaries may abuse inter-process communication (IPC) mechanisms for local code or command execution. IPC is typically used by processes to share data, communicate with each other, or synchronize execution. IPC is also commonly used to avoid situations such as deadlocks, which occurs when processes are stuck in a cyclic waiting pattern.",
        "id": "2931",
        "mitigation": "Behavior Prevention on Endpoint",
        "mitigationid": "M1040",
        "technique": "Inter-Process Communication",
        "techniqueid": "T1559"
    },
    {
        "description": "Adversaries may use Windows Dynamic Data Exchange (DDE) to execute arbitrary commands. DDE is a client-server protocol for one-time and/or continuous inter-process communication (IPC) between applications. Once a link is established, applications can autonomously exchange transactions consisting of strings, warm data links (notifications when a data item changes), hot data links (duplications of changes to a data item), and requests for command execution.",
        "id": "2932",
        "mitigation": "Behavior Prevention on Endpoint",
        "mitigationid": "M1040",
        "technique": "Dynamic Data Exchange",
        "techniqueid": "T1559.002"
    },
    {
        "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process.",
        "id": "2933",
        "mitigation": "Behavior Prevention on Endpoint",
        "mitigationid": "M1040",
        "technique": "Process Injection",
        "techniqueid": "T1055"
    },
    {
        "description": "Adversaries may inject dynamic-link libraries (DLLs) into processes in order to evade process-based defenses as well as possibly elevate privileges. DLL injection is a method of executing arbitrary code in the address space of a separate live process.",
        "id": "2934",
        "mitigation": "Behavior Prevention on Endpoint",
        "mitigationid": "M1040",
        "technique": "Dynamic-link Library Injection",
        "techniqueid": "T1055.001"
    },
    {
        "description": "Adversaries may inject portable executables (PE) into processes in order to evade process-based defenses as well as possibly elevate privileges. PE injection is a method of executing arbitrary code in the address space of a separate live process.",
        "id": "2935",
        "mitigation": "Behavior Prevention on Endpoint",
        "mitigationid": "M1040",
        "technique": "Portable Executable Injection",
        "techniqueid": "T1055.002"
    },
    {
        "description": "Adversaries may inject malicious code into suspended and hollowed processes in order to evade process-based defenses. Process hollowing is a method of executing arbitrary code in the address space of a separate live process.",
        "id": "2936",
        "mitigation": "Behavior Prevention on Endpoint",
        "mitigationid": "M1040",
        "technique": "Process Hollowing",
        "techniqueid": "T1055.012"
    },
    {
        "description": "Adversaries may inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. Thread Execution Hijacking is a method of executing arbitrary code in the address space of a separate live process.",
        "id": "2937",
        "mitigation": "Behavior Prevention on Endpoint",
        "mitigationid": "M1040",
        "technique": "Thread Execution Hijacking",
        "techniqueid": "T1055.003"
    },
    {
        "description": "Adversaries may inject malicious code into processes via the asynchronous procedure call (APC) queue in order to evade process-based defenses as well as possibly elevate privileges. APC injection is a method of executing arbitrary code in the address space of a separate live process.",
        "id": "2938",
        "mitigation": "Behavior Prevention on Endpoint",
        "mitigationid": "M1040",
        "technique": "Asynchronous Procedure Call",
        "techniqueid": "T1055.004"
    },
    {
        "description": "Adversaries may inject malicious code into processes via thread local storage (TLS) callbacks in order to evade process-based defenses as well as possibly elevate privileges. TLS callback injection is a method of executing arbitrary code in the address space of a separate live process.",
        "id": "2939",
        "mitigation": "Behavior Prevention on Endpoint",
        "mitigationid": "M1040",
        "technique": "Thread Local Storage",
        "techniqueid": "T1055.005"
    },
    {
        "description": "Adversaries may inject malicious code into processes via ptrace (process trace) system calls in order to evade process-based defenses as well as possibly elevate privileges. Ptrace system call injection is a method of executing arbitrary code in the address space of a separate live process.",
        "id": "2940",
        "mitigation": "Behavior Prevention on Endpoint",
        "mitigationid": "M1040",
        "technique": "Ptrace System Calls",
        "techniqueid": "T1055.008"
    },
    {
        "description": "Adversaries may inject malicious code into processes via the /proc filesystem in order to evade process-based defenses as well as possibly elevate privileges. Proc memory injection is a method of executing arbitrary code in the address space of a separate live process.",
        "id": "2941",
        "mitigation": "Behavior Prevention on Endpoint",
        "mitigationid": "M1040",
        "technique": "Proc Memory",
        "techniqueid": "T1055.009"
    },
    {
        "description": "Adversaries may inject malicious code into process via Extra Window Memory (EWM) in order to evade process-based defenses as well as possibly elevate privileges. EWM injection is a method of executing arbitrary code in the address space of a separate live process.",
        "id": "2942",
        "mitigation": "Behavior Prevention on Endpoint",
        "mitigationid": "M1040",
        "technique": "Extra Window Memory Injection",
        "techniqueid": "T1055.011"
    },
    {
        "description": "Adversaries may inject malicious code into process via process doppelg?nging in order to evade process-based defenses as well as possibly elevate privileges. Process doppelg?nging is a method of executing arbitrary code in the address space of a separate live process.",
        "id": "2943",
        "mitigation": "Behavior Prevention on Endpoint",
        "mitigationid": "M1040",
        "technique": "Process Doppelg?nging",
        "techniqueid": "T1055.013"
    },
    {
        "description": "Adversaries may inject malicious code into processes via VDSO hijacking in order to evade process-based defenses as well as possibly elevate privileges. Virtual dynamic shared object (vdso) hijacking is a method of executing arbitrary code in the address space of a separate live process.",
        "id": "2944",
        "mitigation": "Behavior Prevention on Endpoint",
        "mitigationid": "M1040",
        "technique": "VDSO Hijacking",
        "techniqueid": "T1055.014"
    },
    {
        "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.",
        "id": "2945",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Application Layer Protocol",
        "techniqueid": "T1071"
    },
    {
        "description": "Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.",
        "id": "2946",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Web Protocols",
        "techniqueid": "T1071.001"
    },
    {
        "description": "Adversaries may communicate using application layer protocols associated with transferring files to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.",
        "id": "2947",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "File Transfer Protocols",
        "techniqueid": "T1071.002"
    },
    {
        "description": "Adversaries may communicate using application layer protocols associated with electronic mail delivery to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.",
        "id": "2948",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Mail Protocols",
        "techniqueid": "T1071.003"
    },
    {
        "description": "Adversaries may communicate using the Domain Name System (DNS) application layer protocol to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.",
        "id": "2949",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "DNS",
        "techniqueid": "T1071.004"
    },
    {
        "description": "Adversaries may encode data to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a standard data encoding system. Use of data encoding may adhere to existing protocol specifications and includes use of ASCII, Unicode, Base64, MIME, or other binary-to-text and character encoding systems. Some data encoding systems may also result in data compression, such as gzip.",
        "id": "2950",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Data Encoding",
        "techniqueid": "T1132"
    },
    {
        "description": "Adversaries may encode data with a standard data encoding system to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a standard data encoding system that adheres to existing protocol specifications. Common data encoding schemes include ASCII, Unicode, hexadecimal, Base64, and MIME. Some data encoding systems may also result in data compression, such as gzip.",
        "id": "2951",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Standard Encoding",
        "techniqueid": "T1132.001"
    },
    {
        "description": "Adversaries may encode data with a non-standard data encoding system to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a non-standard data encoding system that diverges from existing protocol specifications. Non-standard data encoding schemes may be based on or related to standard data encoding schemes, such as a modified Base64 encoding for the message body of an HTTP request.",
        "id": "2952",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Non-Standard Encoding",
        "techniqueid": "T1132.002"
    },
    {
        "description": "Adversaries may collect data related to managed devices from configuration repositories. Configuration repositories are used by management systems in order to configure, manage, and control data on remote systems. Configuration repositories may also facilitate remote access and administration of devices.",
        "id": "2953",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Data from Configuration Repository",
        "techniqueid": "T1602"
    },
    {
        "description": "Adversaries may target the Management Information Base (MIB) to collect and/or mine valuable information in a network managed using Simple Network Management Protocol (SNMP).",
        "id": "2954",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "SNMP (MIB Dump)",
        "techniqueid": "T1602.001"
    },
    {
        "description": "Adversaries may access network configuration files to collect sensitive data about the device and the network. The network configuration is a file containing parameters that determine the operation of the device. The device typically stores an in-memory copy of the configuration while operating, and a separate configuration on non-volatile storage to load after device reset. Adversaries can inspect the configuration files to reveal information about the target network and its layout, the network device and its software, or identifying legitimate accounts and credentials for later use.",
        "id": "2955",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Network Device Configuration Dump",
        "techniqueid": "T1602.002"
    },
    {
        "description": "Adversaries may obfuscate command and control traffic to make it more difficult to detect. Command and control (C2) communications are hidden (but not necessarily encrypted) in an attempt to make the content more difficult to discover or decipher and to make the communication less conspicuous and hide commands from being seen. This encompasses many methods, such as adding junk data to protocol traffic, using steganography, or impersonating legitimate protocols.",
        "id": "2956",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Data Obfuscation",
        "techniqueid": "T1001"
    },
    {
        "description": "Adversaries may add junk data to protocols used for command and control to make detection more difficult. By adding random or meaningless data to the protocols used for command and control, adversaries can prevent trivial methods for decoding, deciphering, or otherwise analyzing the traffic. Examples may include appending/prepending data with junk characters or writing junk characters between significant characters.",
        "id": "2957",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Junk Data",
        "techniqueid": "T1001.001"
    },
    {
        "description": "Adversaries may use steganographic techniques to hide command and control traffic to make detection efforts more difficult. Steganographic techniques can be used to hide data in digital messages that are transferred between systems. This hidden information can be used for command and control of compromised systems. In some cases, the passing of files embedded using steganography, such as image or document files, can be used for command and control.",
        "id": "2958",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Steganography",
        "techniqueid": "T1001.002"
    },
    {
        "description": "Adversaries may impersonate legitimate protocols or web service traffic to disguise command and control activity and thwart analysis efforts. By impersonating legitimate protocols or web services, adversaries can make their command and control traffic blend in with legitimate network traffic.",
        "id": "2959",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Protocol Impersonation",
        "techniqueid": "T1001.003"
    },
    {
        "description": "An adversary may exfiltrate data in fixed size chunks instead of whole files or limit packet sizes below certain thresholds. This approach may be used to avoid triggering network data transfer threshold alerts.",
        "id": "2960",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Data Transfer Size Limits",
        "techniqueid": "T1030"
    },
    {
        "description": "Adversaries may dynamically establish connections to command and control infrastructure to evade common detections and remediations. This may be achieved by using malware that shares a common algorithm with the infrastructure the adversary uses to receive the malware's communications. These calculations can be used to dynamically adjust parameters such as the domain name, IP address, or port number the malware uses for command and control.",
        "id": "2961",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Dynamic Resolution",
        "techniqueid": "T1568"
    },
    {
        "description": "Adversaries may make use of Domain Generation Algorithms (DGAs) to dynamically identify a destination domain for command and control traffic rather than relying on a list of static IP addresses or domains. This has the advantage of making it much harder for defenders block, track, or take over the command and control channel, as there potentially could be thousands of domains that malware can check for instructions.",
        "id": "2962",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Domain Generation Algorithms",
        "techniqueid": "T1568.002"
    },
    {
        "description": "Adversaries may employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if secret keys are encoded and/or generated within malware samples/configuration files.",
        "id": "2963",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Encrypted Channel",
        "techniqueid": "T1573"
    },
    {
        "description": "Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.",
        "id": "2964",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Symmetric Cryptography",
        "techniqueid": "T1573.001"
    },
    {
        "description": "Adversaries may employ a known asymmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Asymmetric cryptography, also known as public key cryptography, uses a keypair per party: one public that can be freely distributed, and one private. Due to how the keys are generated, the sender encrypts data with the receiver��s public key and the receiver decrypts the data with their private key. This ensures that only the intended recipient can read the encrypted data. Common public key encryption algorithms include RSA and ElGamal.",
        "id": "2965",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Asymmetric Cryptography",
        "techniqueid": "T1573.002"
    },
    {
        "description": "Adversaries may steal data by exfiltrating it over a different protocol than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.",
        "id": "2966",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Exfiltration Over Alternative Protocol",
        "techniqueid": "T1048"
    },
    {
        "description": "Adversaries may steal data by exfiltrating it over a symmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.",
        "id": "2967",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Exfiltration Over Symmetric Encrypted Non-C2 Protocol",
        "techniqueid": "T1048.001"
    },
    {
        "description": "Adversaries may steal data by exfiltrating it over an asymmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.",
        "id": "2968",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Exfiltration Over Asymmetric Encrypted Non-C2 Protocol",
        "techniqueid": "T1048.002"
    },
    {
        "description": "Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.",
        "id": "2969",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol",
        "techniqueid": "T1048.003"
    },
    {
        "description": "Adversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications.",
        "id": "2970",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Exfiltration Over C2 Channel",
        "techniqueid": "T1041"
    },
    {
        "description": "Adversaries may use fallback or alternate communication channels if the primary channel is compromised or inaccessible in order to maintain reliable command and control and to avoid data transfer thresholds.",
        "id": "2971",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Fallback Channels",
        "techniqueid": "T1008"
    },
    {
        "description": "Adversaries may transfer tools or other files from an external system into a compromised environment. Files may be copied from an external adversary controlled system through the command and control channel to bring tools into the victim network or through alternate protocols with another tool such as FTP. Files can also be copied over on Mac and Linux with native tools like scp, rsync, and sftp.",
        "id": "2972",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Ingress Tool Transfer",
        "techniqueid": "T1105"
    },
    {
        "description": "Adversaries may transfer tools or other files between systems in a compromised environment. Files may be copied from one system to another to stage adversary tools or other files over the course of an operation. Adversaries may copy files laterally between internal victim systems to support lateral movement using inherent file sharing protocols such as file sharing over SMB to connected network shares or with authenticated connections with?SMB/Windows Admin Shares?or?Remote Desktop Protocol. Files can also be copied over on Mac and Linux with native tools like scp, rsync, and sftp.",
        "id": "2973",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Lateral Tool Transfer",
        "techniqueid": "T1570"
    },
    {
        "description": "Adversaries may attempt to position themselves between two or more networked devices using a man-in-the-middle (MiTM) technique to support follow-on behaviors such as?Network Sniffing?or?Transmitted Data Manipulation. By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.",
        "id": "2974",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Man-in-the-Middle",
        "techniqueid": "T1557"
    },
    {
        "description": "By responding to LLMNR/NBT-NS network traffic, adversaries may spoof an authoritative source for name resolution to force communication with an adversary controlled system. This activity may be used to collect or relay authentication materials.",
        "id": "2975",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "LLMNR/NBT-NS Poisoning and SMB Relay",
        "techniqueid": "T1557.001"
    },
    {
        "description": "Adversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such as?Network Sniffing?or?Transmitted Data Manipulation.",
        "id": "2976",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "ARP Cache Poisoning",
        "techniqueid": "T1557.002"
    },
    {
        "description": "Adversaries may create multiple stages for command and control that are employed under different conditions or for certain functions. Use of multiple stages may obfuscate the command and control channel to make detection more difficult.",
        "id": "2977",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Multi-Stage Channels",
        "techniqueid": "T1104"
    },
    {
        "description": "Adversaries may attempt to get a listing of services running on remote hosts, including those that may be vulnerable to remote software exploitation. Methods to acquire this information include port scans and vulnerability scans using tools that are brought onto a system.",
        "id": "2978",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Network Service Scanning",
        "techniqueid": "T1046"
    },
    {
        "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).",
        "id": "2979",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Non-Application Layer Protocol",
        "techniqueid": "T1095"
    },
    {
        "description": "Adversaries may communicate using a protocol and port paring that are typically not associated. For example, HTTPS over port 8088 or port 587 as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data.",
        "id": "2980",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Non-Standard Port",
        "techniqueid": "T1571"
    },
    {
        "description": "Adversaries may send phishing messages to gain access to victim systems. All forms of phishing are electronically delivered social engineering. Phishing can be targeted, known as spearphishing. In spearphishing, a specific individual, company, or industry will be targeted by the adversary. More generally, adversaries can conduct non-targeted phishing, such as in mass malware spam campaigns.",
        "id": "2981",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Phishing",
        "techniqueid": "T1566"
    },
    {
        "description": "Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon?User Execution?to gain execution.",
        "id": "2982",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Spearphishing Attachment",
        "techniqueid": "T1566.001"
    },
    {
        "description": "Adversaries may abuse netbooting to load an unauthorized network device operating system from a Trivial File Transfer Protocol (TFTP) server. TFTP boot (netbooting) is commonly used by network administrators to load configuration-controlled network device images from a centralized management server. Netbooting is one option in the boot sequence and can be used to centralize, manage, and control device images.",
        "id": "2983",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "TFTP Boot",
        "techniqueid": "T1542.005"
    },
    {
        "description": "Adversaries may abuse the ROM Monitor (ROMMON) by loading an unauthorized firmware with adversary code to provide persistent access and manipulate device behavior that is difficult to detect.",
        "id": "2984",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "ROMMONkit",
        "techniqueid": "T1542.004"
    },
    {
        "description": "Adversaries may tunnel network communications to and from a victim system within a separate protocol to avoid detection/network filtering and/or enable access to otherwise unreachable systems. Tunneling involves explicitly encapsulating a protocol within another. This behavior may conceal malicious traffic by blending in with existing traffic and/or provide an outer layer of encryption (similar to a VPN). Tunneling could also enable routing of network packets that would otherwise not reach their intended destination, such as SMB, RDP, or other traffic that would be filtered by network appliances or not routed over the Internet.",
        "id": "2985",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Protocol Tunneling",
        "techniqueid": "T1572"
    },
    {
        "description": "Adversaries may use a connection proxy to direct network traffic between systems or act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including?HTRAN, ZXProxy, and ZXPortMap. Adversaries use these types of proxies to manage command and control communications, reduce the number of simultaneous outbound network connections, provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between victims to avoid suspicion. Adversaries may chain together multiple proxies to further disguise the source of malicious traffic.",
        "id": "2986",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Proxy",
        "techniqueid": "T1090"
    },
    {
        "description": "Adversaries may use an internal proxy to direct command and control traffic between two or more systems in a compromised environment. Many tools exist that enable traffic redirection through proxies or port redirection, including?HTRAN, ZXProxy, and ZXPortMap. Adversaries use internal proxies to manage command and control communications inside a compromised environment, to reduce the number of simultaneous outbound network connections, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between infected systems to avoid suspicion. Internal proxy connections may use common peer-to-peer (p2p) networking protocols, such as SMB, to better blend in with the environment.",
        "id": "2987",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Internal Proxy",
        "techniqueid": "T1090.001"
    },
    {
        "description": "Adversaries may use an external proxy to act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including?HTRAN, ZXProxy, and ZXPortMap. Adversaries use these types of proxies to manage command and control communications, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths to avoid suspicion.",
        "id": "2988",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "External Proxy",
        "techniqueid": "T1090.002"
    },
    {
        "description": "An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks. These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment. Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries.",
        "id": "2989",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Remote Access Software",
        "techniqueid": "T1219"
    },
    {
        "description": "Adversaries may schedule data exfiltration to be performed only at certain times of day or at certain intervals. This could be done to blend traffic patterns with normal activity or availability.",
        "id": "2990",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Scheduled Transfer",
        "techniqueid": "T1029"
    },
    {
        "description": "Adversaries may create or modify references in Office document templates to conceal malicious code or force authentication attempts. Microsoft��s Office Open XML (OOXML) specification defines an XML-based format for Office documents (.docx, xlsx, .pptx) to replace older binary formats (.doc, .xls, .ppt). OOXML files are packed together ZIP archives compromised of various XML files, referred to as parts, containing properties that collectively define how a document is rendered.",
        "id": "2991",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Template Injection",
        "techniqueid": "T1221"
    },
    {
        "description": "An adversary may rely upon specific actions by a user in order to gain execution. Users may be subjected to social engineering to get them to execute malicious code by, for example, opening a malicious document file or link. These user actions will typically be observed as follow-on behavior from forms of?Phishing.",
        "id": "2992",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "User Execution",
        "techniqueid": "T1204"
    },
    {
        "description": "An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from?Spearphishing Link. Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via?Exploitation for Client Execution. Links may also lead users to download files that require execution via?Malicious File.",
        "id": "2993",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Malicious Link",
        "techniqueid": "T1204.001"
    },
    {
        "description": "Adversaries may use an existing, legitimate external Web service as a means for relaying data to/from a compromised system. Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.",
        "id": "2994",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Web Service",
        "techniqueid": "T1102"
    },
    {
        "description": "Adversaries may use an existing, legitimate external Web service to host information that points to additional command and control (C2) infrastructure. Adversaries may post content, known as a dead drop resolver, on Web services with embedded (and often obfuscated/encoded) domains or IP addresses. Once infected, victims will reach out to and be redirected by these resolvers.",
        "id": "2995",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Dead Drop Resolver",
        "techniqueid": "T1102.001"
    },
    {
        "description": "Adversaries may use an existing, legitimate external Web service as a means for sending commands to and receiving output from a compromised system over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems can then send the output from those commands back over that Web service channel. The return traffic may occur in a variety of ways, depending on the Web service being utilized. For example, the return traffic may take the form of the compromised system posting a comment on a forum, issuing a pull request to development project, updating a document hosted on a Web service, or by sending a Tweet.",
        "id": "2996",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "Bidirectional Communication",
        "techniqueid": "T1102.002"
    },
    {
        "description": "Adversaries may use an existing, legitimate external Web service as a means for sending commands to a compromised system without receiving return output over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems may opt to send the output from those commands back over a different C2 channel, including to another distinct Web service. Alternatively, compromised systems may return no output at all in cases where adversaries want to send instructions to systems and do not want a response.",
        "id": "2997",
        "mitigation": "Network Intrusion Prevention",
        "mitigationid": "M1031",
        "technique": "One-Way Communication",
        "techniqueid": "T1102.003"
    },
    {
        "description": "Adversaries may introduce computer accessories, computers, or networking hardware into a system or network that can be used as a vector to gain access. While public references of usage by APT groups are scarce, many penetration testers leverage hardware additions for initial access. Commercial and open source products are leveraged with capabilities such as passive network tapping , man-in-the middle encryption breaking , keystroke injection , kernel memory reading via DMA , adding new wireless access to an existing network , and others.",
        "id": "2998",
        "mitigation": "Limit Access to Resource Over Network",
        "mitigationid": "M1035",
        "technique": "Hardware Additions",
        "techniqueid": "T1200"
    },
    {
        "description": "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as?Windows Remote Management?can also be used externally.",
        "id": "2999",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "External Remote Services",
        "techniqueid": "T1133"
    },
    {
        "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).",
        "id": "3000",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Non-Application Layer Protocol",
        "techniqueid": "T1095"
    },
    {
        "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by accessibility features. Windows contains accessibility features that may be launched with a key combination before a user has logged in (ex: when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system.",
        "id": "3001",
        "mitigation": "Limit Access to Resource Over Network",
        "mitigationid": "M1035",
        "technique": "Accessibility Features",
        "techniqueid": "T1546.008"
    },
    {
        "description": "Adversaries may hijack a legitimate user��s remote desktop session to move laterally within an environment. Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).",
        "id": "3002",
        "mitigation": "Limit Access to Resource Over Network",
        "mitigationid": "M1035",
        "technique": "RDP Hijacking",
        "techniqueid": "T1563.002"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.",
        "id": "3003",
        "mitigation": "Limit Access to Resource Over Network",
        "mitigationid": "M1035",
        "technique": "Remote Desktop Protocol",
        "techniqueid": "T1021.001"
    },
    {
        "description": "Adversaries may communicate using the Domain Name System (DNS) application layer protocol to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.",
        "id": "3004",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "DNS",
        "techniqueid": "T1071.004"
    },
    {
        "description": "Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g.?Bash History), operating system or application-specific repositories (e.g.?Credentials in Registry), or other specialized files/artifacts (e.g.?Private Keys).",
        "id": "3005",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Unsecured Credentials",
        "techniqueid": "T1552"
    },
    {
        "description": "Adversaries may attempt to access the Cloud Instance Metadata API to collect credentials and other sensitive data.",
        "id": "3006",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Cloud Instance Metadata API",
        "techniqueid": "T1552.005"
    },
    {
        "description": "Adversaries may attempt to take advantage of a weakness in an Internet-facing computer or program using software, data, or commands in order to cause unintended or unanticipated behavior. The weakness in the system can be a bug, a glitch, or a design vulnerability. These applications are often websites, but can include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other applications with Internet accessible open sockets, such as web servers and related services. Depending on the flaw being exploited this may include?Exploitation for Defense Evasion.",
        "id": "3007",
        "mitigation": "Exploit Protection",
        "mitigationid": "M1050",
        "technique": "Exploit Public-Facing Application",
        "techniqueid": "T1190"
    },
    {
        "description": "Adversaries may leverage information repositories to mine valuable information. Information repositories are tools that allow for storage of information, typically to facilitate collaboration or information sharing between users, and can store a wide variety of data that may aid adversaries in further objectives, or direct access to the target information.",
        "id": "3008",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Data from Information Repositories",
        "techniqueid": "T1213"
    },
    {
        "description": "Adversaries may leverage Confluence repositories to mine valuable information. Often found in development environments alongside Atlassian JIRA, Confluence is generally used to store development-related documentation, however, in general may contain more diverse categories of useful information, such as:",
        "id": "3009",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Confluence",
        "techniqueid": "T1213.001"
    },
    {
        "description": "Adversaries may leverage the SharePoint repository as a source to mine valuable information. SharePoint will often contain useful information for an adversary to learn about the structure and functionality of the internal network and systems. For example, the following is a list of example information that may hold potential value to an adversary and may also be found on SharePoint:",
        "id": "3010",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Sharepoint",
        "techniqueid": "T1213.002"
    },
    {
        "description": "Adversaries may mimic common operating system GUI components to prompt users for credentials with a seemingly legitimate prompt. When programs are executed that need additional privileges than are present in the current user context, it is common for the operating system to prompt the user for proper credentials to authorize the elevated privileges for the task (ex:?Bypass User Account Control).",
        "id": "3011",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "GUI Input Capture",
        "techniqueid": "T1056.002"
    },
    {
        "description": "Adversaries may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password, from the operating system and software. Credentials can then be used to perform?Lateral Movement?and access restricted information.",
        "id": "3012",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "OS Credential Dumping",
        "techniqueid": "T1003"
    },
    {
        "description": "Adversaries may attempt to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS). After a user logs on, the system generates and stores a variety of credential materials in LSASS process memory. These credential materials can be harvested by an administrative user or SYSTEM and used to conduct?Lateral Movement?using?Use Alternate Authentication Material.",
        "id": "3013",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "LSASS Memory",
        "techniqueid": "T1003.001"
    },
    {
        "description": "Adversaries may attempt to extract credential material from the Security Account Manager (SAM) database either through in-memory techniques or through the Windows Registry where the SAM database is stored. The SAM is a database file that contains local accounts for the host, typically those found with the?net user?command. Enumerating the SAM database requires SYSTEM level access.",
        "id": "3014",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Security Account Manager",
        "techniqueid": "T1003.002"
    },
    {
        "description": "Adversaries may attempt to access cached domain credentials used to allow authentication to occur in the event a domain controller is unavailable.",
        "id": "3015",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Cached Domain Credentials",
        "techniqueid": "T1003.005"
    },
    {
        "description": "Adversaries with SYSTEM access to a host may attempt to access Local Security Authority (LSA) secrets, which can contain a variety of different credential materials, such as credentials for service accounts. LSA secrets are stored in the registry at?HKEY_LOCAL_MACHINE\\SECURITY\\Policy\\Secrets. LSA secrets can also be dumped from memory.",
        "id": "3016",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "LSA Secrets",
        "techniqueid": "T1003.004"
    },
    {
        "description": "Adversaries may attempt to access or create a copy of the Active Directory domain database in order to steal credential information, as well as obtain other information about domain members such as devices, users, and access rights. By default, the NTDS file (NTDS.dit) is located in?%SystemRoot%\\NTDS\\Ntds.dit?of a domain controller.",
        "id": "3017",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "NTDS",
        "techniqueid": "T1003.003"
    },
    {
        "description": "Adversaries may send phishing messages to gain access to victim systems. All forms of phishing are electronically delivered social engineering. Phishing can be targeted, known as spearphishing. In spearphishing, a specific individual, company, or industry will be targeted by the adversary. More generally, adversaries can conduct non-targeted phishing, such as in mass malware spam campaigns.",
        "id": "3018",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Phishing",
        "techniqueid": "T1566"
    },
    {
        "description": "Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon?User Execution?to gain execution.",
        "id": "3019",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Spearphishing Attachment",
        "techniqueid": "T1566.001"
    },
    {
        "description": "Adversaries may send spearphishing emails with a malicious link in an attempt to gain access to victim systems. Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments.",
        "id": "3020",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Spearphishing Link",
        "techniqueid": "T1566.002"
    },
    {
        "description": "Adversaries may send spearphishing messages via third-party services in an attempt to gain access to victim systems. Spearphishing via service is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of third party services rather than directly via enterprise email channels.",
        "id": "3021",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Spearphishing via Service",
        "techniqueid": "T1566.003"
    },
    {
        "description": "Before compromising a victim, adversaries may send phishing messages to elicit sensitive information that can be used during targeting. Phishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Phishing for information is different from?Phishing?in that the objective is gathering data from the victim rather than executing malicious code.",
        "id": "3022",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Phishing for Information",
        "techniqueid": "T1598"
    },
    {
        "description": "Before compromising a victim, adversaries may send spearphishing messages via third-party services to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex:?Establish Accounts?or?Compromise Accounts) and/or sending multiple, seemingly urgent messages.",
        "id": "3023",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Spearphishing Service",
        "techniqueid": "T1598.001"
    },
    {
        "description": "Before compromising a victim, adversaries may send spearphishing messages with a malicious attachment to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex:?Establish Accounts?or?Compromise Accounts) and/or sending multiple, seemingly urgent messages.",
        "id": "3024",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Spearphishing Attachment",
        "techniqueid": "T1598.002"
    },
    {
        "description": "Before compromising a victim, adversaries may send spearphishing messages with a malicious link to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex:?Establish Accounts?or?Compromise Accounts) and/or sending multiple, seemingly urgent messages.",
        "id": "3025",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Spearphishing Link",
        "techniqueid": "T1598.003"
    },
    {
        "description": "Adversaries can steal user application access tokens as a means of acquiring credentials to access remote systems and resources. This can occur through social engineering and typically requires user action to grant access.",
        "id": "3026",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Steal Application Access Token",
        "techniqueid": "T1528"
    },
    {
        "description": "An adversary may steal web application or service session cookies and use them to gain access web applications or Internet services as an authenticated user without needing credentials. Web applications and services often use session cookies as an authentication token after a user has authenticated to a website.",
        "id": "3027",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Steal Web Session Cookie",
        "techniqueid": "T1539"
    },
    {
        "description": "Adversaries may create or modify references in Office document templates to conceal malicious code or force authentication attempts. Microsoft��s Office Open XML (OOXML) specification defines an XML-based format for Office documents (.docx, xlsx, .pptx) to replace older binary formats (.doc, .xls, .ppt). OOXML files are packed together ZIP archives compromised of various XML files, referred to as parts, containing properties that collectively define how a document is rendered.",
        "id": "3028",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Template Injection",
        "techniqueid": "T1221"
    },
    {
        "description": "Adversaries may target two-factor authentication mechanisms, such as smart cards, to gain access to credentials that can be used to access systems, services, and network resources. Use of two or multi-factor authentication (2FA or MFA) is recommended and provides a higher level of security than user names and passwords alone, but organizations should be aware of techniques that could be used to intercept and bypass these security mechanisms.",
        "id": "3029",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Two-Factor Authentication Interception",
        "techniqueid": "T1111"
    },
    {
        "description": "An adversary may rely upon specific actions by a user in order to gain execution. Users may be subjected to social engineering to get them to execute malicious code by, for example, opening a malicious document file or link. These user actions will typically be observed as follow-on behavior from forms of?Phishing.",
        "id": "3030",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "User Execution",
        "techniqueid": "T1204"
    },
    {
        "description": "An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from?Spearphishing Link. Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via?Exploitation for Client Execution. Links may also lead users to download files that require execution via?Malicious File.",
        "id": "3031",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Malicious Link",
        "techniqueid": "T1204.001"
    },
    {
        "description": "An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from?Spearphishing Attachment. Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.",
        "id": "3032",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Malicious File",
        "techniqueid": "T1204.002"
    },
    {
        "description": "Adversaries may mimic common operating system GUI components to prompt users for credentials with a seemingly legitimate prompt. When programs are executed that need additional privileges than are present in the current user context, it is common for the operating system to prompt the user for proper credentials to authorize the elevated privileges for the task (ex:?Bypass User Account Control).",
        "id": "3033",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "GUI Input Capture",
        "techniqueid": "T1056.002"
    },
    {
        "description": "Adversaries may attempt to position themselves between two or more networked devices using a man-in-the-middle (MiTM) technique to support follow-on behaviors such as?Network Sniffing?or?Transmitted Data Manipulation. By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.",
        "id": "3034",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Man-in-the-Middle",
        "techniqueid": "T1557"
    },
    {
        "description": "Adversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such as?Network Sniffing?or?Transmitted Data Manipulation.",
        "id": "3035",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "ARP Cache Poisoning",
        "techniqueid": "T1557.002"
    },
    {
        "description": "Adversaries may send phishing messages to gain access to victim systems. All forms of phishing are electronically delivered social engineering. Phishing can be targeted, known as spearphishing. In spearphishing, a specific individual, company, or industry will be targeted by the adversary. More generally, adversaries can conduct non-targeted phishing, such as in mass malware spam campaigns.",
        "id": "3036",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Phishing",
        "techniqueid": "T1566"
    },
    {
        "description": "Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon?User Execution?to gain execution.",
        "id": "3037",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Spearphishing Attachment",
        "techniqueid": "T1566.001"
    },
    {
        "description": "Adversaries may send spearphishing emails with a malicious link in an attempt to gain access to victim systems. Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments.",
        "id": "3038",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Spearphishing Link",
        "techniqueid": "T1566.002"
    },
    {
        "description": "Adversaries may send spearphishing messages via third-party services in an attempt to gain access to victim systems. Spearphishing via service is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of third party services rather than directly via enterprise email channels.",
        "id": "3039",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Spearphishing via Service",
        "techniqueid": "T1566.003"
    },
    {
        "description": "Before compromising a victim, adversaries may send phishing messages to elicit sensitive information that can be used during targeting. Phishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Phishing for information is different from?Phishing?in that the objective is gathering data from the victim rather than executing malicious code.",
        "id": "3040",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Phishing for Information",
        "techniqueid": "T1598"
    },
    {
        "description": "Before compromising a victim, adversaries may send spearphishing messages via third-party services to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex:?Establish Accounts?or?Compromise Accounts) and/or sending multiple, seemingly urgent messages.",
        "id": "3041",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Spearphishing Service",
        "techniqueid": "T1598.001"
    },
    {
        "description": "Before compromising a victim, adversaries may send spearphishing messages with a malicious attachment to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex:?Establish Accounts?or?Compromise Accounts) and/or sending multiple, seemingly urgent messages.",
        "id": "3042",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Spearphishing Attachment",
        "techniqueid": "T1598.002"
    },
    {
        "description": "Before compromising a victim, adversaries may send spearphishing messages with a malicious link to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex:?Establish Accounts?or?Compromise Accounts) and/or sending multiple, seemingly urgent messages.",
        "id": "3043",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Spearphishing Link",
        "techniqueid": "T1598.003"
    },
    {
        "description": "Adversaries can steal user application access tokens as a means of acquiring credentials to access remote systems and resources. This can occur through social engineering and typically requires user action to grant access.",
        "id": "3044",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Steal Application Access Token",
        "techniqueid": "T1528"
    },
    {
        "description": "An adversary may steal web application or service session cookies and use them to gain access web applications or Internet services as an authenticated user without needing credentials. Web applications and services often use session cookies as an authentication token after a user has authenticated to a website.",
        "id": "3045",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Steal Web Session Cookie",
        "techniqueid": "T1539"
    },
    {
        "description": "Adversaries may create or modify references in Office document templates to conceal malicious code or force authentication attempts. Microsoft��s Office Open XML (OOXML) specification defines an XML-based format for Office documents (.docx, xlsx, .pptx) to replace older binary formats (.doc, .xls, .ppt). OOXML files are packed together ZIP archives compromised of various XML files, referred to as parts, containing properties that collectively define how a document is rendered.",
        "id": "3046",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Template Injection",
        "techniqueid": "T1221"
    },
    {
        "description": "An adversary may rely upon specific actions by a user in order to gain execution. Users may be subjected to social engineering to get them to execute malicious code by, for example, opening a malicious document file or link. These user actions will typically be observed as follow-on behavior from forms of?Phishing.",
        "id": "3047",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "User Execution",
        "techniqueid": "T1204"
    },
    {
        "description": "An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from?Spearphishing Link. Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via?Exploitation for Client Execution. Links may also lead users to download files that require execution via?Malicious File.",
        "id": "3048",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Malicious Link",
        "techniqueid": "T1204.001"
    },
    {
        "description": "An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from?Spearphishing Attachment. Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.",
        "id": "3049",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Malicious File",
        "techniqueid": "T1204.002"
    },
    {
        "description": "Adversaries may modify plist files to automatically run an application when a user logs in. Starting in Mac OS X 10.7 (Lion), users can specify certain applications to be re-opened when a user logs into their machine after reboot. While this is usually done via a Graphical User Interface (GUI) on an app-by-app basis, there are property list files (plist) that contain this information as well located at?~/Library/Preferences/com.apple.loginwindow.plist?and?~/Library/Preferences/ByHost/com.apple.loginwindow.* .plist.",
        "id": "3050",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Re-opened Applications",
        "techniqueid": "T1547.007"
    },
    {
        "description": "Adversaries may modify plist files to run a program during system boot or user login. Property list (plist) files contain all of the information that macOS and OS X uses to configure applications and services. These files are UTF-8 encoded and formatted like XML documents via a series of keys surrounded by < >. They detail when programs should execute, file paths to the executables, program arguments, required OS permissions, and many others. plists are located in certain locations depending on their purpose such as?/Library/Preferences?(which execute with elevated privileges) and?~/Library/Preferences?(which execute with a user's privileges).",
        "id": "3051",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Plist Modification",
        "techniqueid": "T1547.011"
    },
    {
        "description": "Adversaries may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password, from the operating system and software. Credentials can then be used to perform?Lateral Movement?and access restricted information.",
        "id": "3052",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "OS Credential Dumping",
        "techniqueid": "T1003"
    },
    {
        "description": "Adversaries may attempt to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS). After a user logs on, the system generates and stores a variety of credential materials in LSASS process memory. These credential materials can be harvested by an administrative user or SYSTEM and used to conduct?Lateral Movement?using?Use Alternate Authentication Material.",
        "id": "3053",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "LSASS Memory",
        "techniqueid": "T1003.001"
    },
    {
        "description": "Adversaries may attempt to extract credential material from the Security Account Manager (SAM) database either through in-memory techniques or through the Windows Registry where the SAM database is stored. The SAM is a database file that contains local accounts for the host, typically those found with the?net user?command. Enumerating the SAM database requires SYSTEM level access.",
        "id": "3054",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Security Account Manager",
        "techniqueid": "T1003.002"
    },
    {
        "description": "Adversaries may attempt to access cached domain credentials used to allow authentication to occur in the event a domain controller is unavailable.",
        "id": "3055",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Cached Domain Credentials",
        "techniqueid": "T1003.005"
    },
    {
        "description": "Adversaries with SYSTEM access to a host may attempt to access Local Security Authority (LSA) secrets, which can contain a variety of different credential materials, such as credentials for service accounts. LSA secrets are stored in the registry at?HKEY_LOCAL_MACHINE\\SECURITY\\Policy\\Secrets. LSA secrets can also be dumped from memory.",
        "id": "3056",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "LSA Secrets",
        "techniqueid": "T1003.004"
    },
    {
        "description": "Adversaries may attempt to access or create a copy of the Active Directory domain database in order to steal credential information, as well as obtain other information about domain members such as devices, users, and access rights. By default, the NTDS file (NTDS.dit) is located in?%SystemRoot%\\NTDS\\Ntds.dit?of a domain controller.",
        "id": "3057",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "NTDS",
        "techniqueid": "T1003.003"
    },
    {
        "description": "Adversaries can steal user application access tokens as a means of acquiring credentials to access remote systems and resources. This can occur through social engineering and typically requires user action to grant access.",
        "id": "3058",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Steal Application Access Token",
        "techniqueid": "T1528"
    },
    {
        "description": "An adversary may steal web application or service session cookies and use them to gain access web applications or Internet services as an authenticated user without needing credentials. Web applications and services often use session cookies as an authentication token after a user has authenticated to a website.",
        "id": "3059",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Steal Web Session Cookie",
        "techniqueid": "T1539"
    },
    {
        "description": "Adversaries may target two-factor authentication mechanisms, such as smart cards, to gain access to credentials that can be used to access systems, services, and network resources. Use of two or multi-factor authentication (2FA or MFA) is recommended and provides a higher level of security than user names and passwords alone, but organizations should be aware of techniques that could be used to intercept and bypass these security mechanisms.",
        "id": "3060",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Two-Factor Authentication Interception",
        "techniqueid": "T1111"
    },
    {
        "description": "Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g.?Bash History), operating system or application-specific repositories (e.g.?Credentials in Registry), or other specialized files/artifacts (e.g.?Private Keys).",
        "id": "3061",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Unsecured Credentials",
        "techniqueid": "T1552"
    },
    {
        "description": "Adversaries may search local file systems and remote file shares for files containing insecurely stored credentials. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.",
        "id": "3062",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Credentials In Files",
        "techniqueid": "T1552.001"
    },
    {
        "description": "Adversaries may acquire credentials from web browsers by reading files specific to the target browser. Web browsers commonly save credentials such as website usernames and passwords so that they do not need to be entered manually in the future. Web browsers typically store the credentials in an encrypted format within a credential store; however, methods exist to extract plaintext credentials from web browsers.",
        "id": "3063",
        "mitigation": "Password Policies",
        "mitigationid": "M1027",
        "technique": "Credentials from Web Browsers",
        "techniqueid": "T1555.003"
    },
    {
        "description": "Adversaries may modify plist files to automatically run an application when a user logs in. Starting in Mac OS X 10.7 (Lion), users can specify certain applications to be re-opened when a user logs into their machine after reboot. While this is usually done via a Graphical User Interface (GUI) on an app-by-app basis, there are property list files (plist) that contain this information as well located at?~/Library/Preferences/com.apple.loginwindow.plist?and?~/Library/Preferences/ByHost/com.apple.loginwindow.* .plist.",
        "id": "3064",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Re-opened Applications",
        "techniqueid": "T1547.007"
    },
    {
        "description": "Adversaries may modify plist files to run a program during system boot or user login. Property list (plist) files contain all of the information that macOS and OS X uses to configure applications and services. These files are UTF-8 encoded and formatted like XML documents via a series of keys surrounded by < >. They detail when programs should execute, file paths to the executables, program arguments, required OS permissions, and many others. plists are located in certain locations depending on their purpose such as?/Library/Preferences?(which execute with elevated privileges) and?~/Library/Preferences?(which execute with a user's privileges).",
        "id": "3065",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Plist Modification",
        "techniqueid": "T1547.011"
    },
    {
        "description": "Adversaries may abuse Internet browser extensions to establish persistence access to victim systems. Browser extensions or plugins are small programs that can add functionality and customize aspects of Internet browsers. They can be installed directly or through a browser's app store and generally have access and permissions to everything that the browser can access.",
        "id": "3066",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Browser Extensions",
        "techniqueid": "T1176"
    },
    {
        "description": "Adversaries may leverage information repositories to mine valuable information. Information repositories are tools that allow for storage of information, typically to facilitate collaboration or information sharing between users, and can store a wide variety of data that may aid adversaries in further objectives, or direct access to the target information.",
        "id": "3067",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Data from Information Repositories",
        "techniqueid": "T1213"
    },
    {
        "description": "Adversaries may leverage Confluence repositories to mine valuable information. Often found in development environments alongside Atlassian JIRA, Confluence is generally used to store development-related documentation, however, in general may contain more diverse categories of useful information, such as:",
        "id": "3068",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Confluence",
        "techniqueid": "T1213.001"
    },
    {
        "description": "Adversaries may leverage the SharePoint repository as a source to mine valuable information. SharePoint will often contain useful information for an adversary to learn about the structure and functionality of the internal network and systems. For example, the following is a list of example information that may hold potential value to an adversary and may also be found on SharePoint:",
        "id": "3069",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Sharepoint",
        "techniqueid": "T1213.002"
    },
    {
        "description": "Adversaries can take advantage of security vulnerabilities and inherent functionality in browser software to change content, modify behavior, and intercept information as part of various man in the browser techniques.",
        "id": "3070",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Man in the Browser",
        "techniqueid": "T1185"
    },
    {
        "description": "Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g.?Bash History), operating system or application-specific repositories (e.g.?Credentials in Registry), or other specialized files/artifacts (e.g.?Private Keys).",
        "id": "3071",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Unsecured Credentials",
        "techniqueid": "T1552"
    },
    {
        "description": "Adversaries may search local file systems and remote file shares for files containing insecurely stored credentials. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.",
        "id": "3072",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Credentials In Files",
        "techniqueid": "T1552.001"
    },
    {
        "description": "Adversaries may leverage information repositories to mine valuable information. Information repositories are tools that allow for storage of information, typically to facilitate collaboration or information sharing between users, and can store a wide variety of data that may aid adversaries in further objectives, or direct access to the target information.",
        "id": "3073",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Data from Information Repositories",
        "techniqueid": "T1213"
    },
    {
        "description": "Adversaries may leverage Confluence repositories to mine valuable information. Often found in development environments alongside Atlassian JIRA, Confluence is generally used to store development-related documentation, however, in general may contain more diverse categories of useful information, such as:",
        "id": "3074",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Confluence",
        "techniqueid": "T1213.001"
    },
    {
        "description": "Adversaries may leverage the SharePoint repository as a source to mine valuable information. SharePoint will often contain useful information for an adversary to learn about the structure and functionality of the internal network and systems. For example, the following is a list of example information that may hold potential value to an adversary and may also be found on SharePoint:",
        "id": "3075",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Sharepoint",
        "techniqueid": "T1213.002"
    },
    {
        "description": "Adversaries may mimic common operating system GUI components to prompt users for credentials with a seemingly legitimate prompt. When programs are executed that need additional privileges than are present in the current user context, it is common for the operating system to prompt the user for proper credentials to authorize the elevated privileges for the task (ex:?Bypass User Account Control).",
        "id": "3076",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "GUI Input Capture",
        "techniqueid": "T1056.002"
    },
    {
        "description": "Adversaries may attempt to position themselves between two or more networked devices using a man-in-the-middle (MiTM) technique to support follow-on behaviors such as?Network Sniffing?or?Transmitted Data Manipulation. By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.",
        "id": "3077",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Man-in-the-Middle",
        "techniqueid": "T1557"
    },
    {
        "description": "Adversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such as?Network Sniffing?or?Transmitted Data Manipulation.",
        "id": "3078",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "ARP Cache Poisoning",
        "techniqueid": "T1557.002"
    },
    {
        "description": "Adversaries may send phishing messages to gain access to victim systems. All forms of phishing are electronically delivered social engineering. Phishing can be targeted, known as spearphishing. In spearphishing, a specific individual, company, or industry will be targeted by the adversary. More generally, adversaries can conduct non-targeted phishing, such as in mass malware spam campaigns.",
        "id": "3079",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Phishing",
        "techniqueid": "T1566"
    },
    {
        "description": "Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon?User Execution?to gain execution.",
        "id": "3080",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Spearphishing Attachment",
        "techniqueid": "T1566.001"
    },
    {
        "description": "Adversaries may send spearphishing emails with a malicious link in an attempt to gain access to victim systems. Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments.",
        "id": "3081",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Spearphishing Link",
        "techniqueid": "T1566.002"
    },
    {
        "description": "Adversaries may send spearphishing messages via third-party services in an attempt to gain access to victim systems. Spearphishing via service is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of third party services rather than directly via enterprise email channels.",
        "id": "3082",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Spearphishing via Service",
        "techniqueid": "T1566.003"
    },
    {
        "description": "Before compromising a victim, adversaries may send phishing messages to elicit sensitive information that can be used during targeting. Phishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Phishing for information is different from?Phishing?in that the objective is gathering data from the victim rather than executing malicious code.",
        "id": "3083",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Phishing for Information",
        "techniqueid": "T1598"
    },
    {
        "description": "Before compromising a victim, adversaries may send spearphishing messages via third-party services to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex:?Establish Accounts?or?Compromise Accounts) and/or sending multiple, seemingly urgent messages.",
        "id": "3084",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Spearphishing Service",
        "techniqueid": "T1598.001"
    },
    {
        "description": "Before compromising a victim, adversaries may send spearphishing messages with a malicious attachment to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex:?Establish Accounts?or?Compromise Accounts) and/or sending multiple, seemingly urgent messages.",
        "id": "3085",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Spearphishing Attachment",
        "techniqueid": "T1598.002"
    },
    {
        "description": "Before compromising a victim, adversaries may send spearphishing messages with a malicious link to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex:?Establish Accounts?or?Compromise Accounts) and/or sending multiple, seemingly urgent messages.",
        "id": "3086",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Spearphishing Link",
        "techniqueid": "T1598.003"
    },
    {
        "description": "Adversaries can steal user application access tokens as a means of acquiring credentials to access remote systems and resources. This can occur through social engineering and typically requires user action to grant access.",
        "id": "3087",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Steal Application Access Token",
        "techniqueid": "T1528"
    },
    {
        "description": "An adversary may steal web application or service session cookies and use them to gain access web applications or Internet services as an authenticated user without needing credentials. Web applications and services often use session cookies as an authentication token after a user has authenticated to a website.",
        "id": "3088",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Steal Web Session Cookie",
        "techniqueid": "T1539"
    },
    {
        "description": "Adversaries may create or modify references in Office document templates to conceal malicious code or force authentication attempts. Microsoft��s Office Open XML (OOXML) specification defines an XML-based format for Office documents (.docx, xlsx, .pptx) to replace older binary formats (.doc, .xls, .ppt). OOXML files are packed together ZIP archives compromised of various XML files, referred to as parts, containing properties that collectively define how a document is rendered.",
        "id": "3089",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Template Injection",
        "techniqueid": "T1221"
    },
    {
        "description": "An adversary may rely upon specific actions by a user in order to gain execution. Users may be subjected to social engineering to get them to execute malicious code by, for example, opening a malicious document file or link. These user actions will typically be observed as follow-on behavior from forms of?Phishing.",
        "id": "3090",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "User Execution",
        "techniqueid": "T1204"
    },
    {
        "description": "An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from?Spearphishing Link. Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via?Exploitation for Client Execution. Links may also lead users to download files that require execution via?Malicious File.",
        "id": "3091",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Malicious Link",
        "techniqueid": "T1204.001"
    },
    {
        "description": "An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from?Spearphishing Attachment. Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.",
        "id": "3092",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Malicious File",
        "techniqueid": "T1204.002"
    },
    {
        "description": "Adversaries may gain access to and use third-party software suites installed within an enterprise network, such as administration, monitoring, and deployment systems, to move laterally through the network. Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, VNC, HBSS, Altiris, etc.).",
        "id": "3093",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Software Deployment Tools",
        "techniqueid": "T1072"
    },
    {
        "description": "Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g.?Bash History), operating system or application-specific repositories (e.g.?Credentials in Registry), or other specialized files/artifacts (e.g.?Private Keys).",
        "id": "3094",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Unsecured Credentials",
        "techniqueid": "T1552"
    },
    {
        "description": "Adversaries may search local file systems and remote file shares for files containing insecurely stored credentials. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.",
        "id": "3095",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Credentials In Files",
        "techniqueid": "T1552.001"
    },
    {
        "description": "Adversaries may gain access to and use third-party software suites installed within an enterprise network, such as administration, monitoring, and deployment systems, to move laterally through the network. Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, VNC, HBSS, Altiris, etc.).",
        "id": "3096",
        "mitigation": "User Account Management",
        "mitigationid": "M1018",
        "technique": "Software Deployment Tools",
        "techniqueid": "T1072"
    },
    {
        "description": "Adversaries may breach or otherwise leverage organizations who have access to intended victims. Access through trusted third party relationship exploits an existing connection that may not be protected or receives less scrutiny than standard mechanisms of gaining access to a network.",
        "id": "3097",
        "mitigation": "User Account Control",
        "mitigationid": "M1052",
        "technique": "Trusted Relationship",
        "techniqueid": "T1199"
    },
    {
        "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop. Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.",
        "id": "3098",
        "mitigation": "Application Developer Guidance",
        "mitigationid": "M1013",
        "technique": "Valid Accounts",
        "techniqueid": "T1078"
    },
    {
        "description": "Adversaries may manipulate products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise.",
        "id": "3099",
        "mitigation": "Vulnerability Scanning",
        "mitigationid": "M1016",
        "technique": "Supply Chain Compromise",
        "techniqueid": "T1195"
    },
    {
        "description": "Adversaries may manipulate software dependencies and development tools prior to receipt by a final consumer for the purpose of data or system compromise. Applications often depend on external software to function properly. Popular open source projects that are used as dependencies in many applications may be targeted as a means to add malicious code to users of the dependency.",
        "id": "3100",
        "mitigation": "Vulnerability Scanning",
        "mitigationid": "M1016",
        "technique": "Compromise Software Dependencies and Development Tools",
        "techniqueid": "T1195.001"
    },
    {
        "description": "Adversaries may manipulate application software prior to receipt by a final consumer for the purpose of data or system compromise. Supply chain compromise of software can take place in a number of ways, including manipulation of the application source code, manipulation of the update/distribution mechanism for that software, or replacing compiled releases with a modified version.",
        "id": "3101",
        "mitigation": "Vulnerability Scanning",
        "mitigationid": "M1016",
        "technique": "Compromise Software Supply Chain",
        "techniqueid": "T1195.002"
    },
    {
        "description": "Adversaries may leverage information repositories to mine valuable information. Information repositories are tools that allow for storage of information, typically to facilitate collaboration or information sharing between users, and can store a wide variety of data that may aid adversaries in further objectives, or direct access to the target information.",
        "id": "3102",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Data from Information Repositories",
        "techniqueid": "T1213"
    },
    {
        "description": "Adversaries may leverage Confluence repositories to mine valuable information. Often found in development environments alongside Atlassian JIRA, Confluence is generally used to store development-related documentation, however, in general may contain more diverse categories of useful information, such as:",
        "id": "3103",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Confluence",
        "techniqueid": "T1213.001"
    },
    {
        "description": "Adversaries may leverage the SharePoint repository as a source to mine valuable information. SharePoint will often contain useful information for an adversary to learn about the structure and functionality of the internal network and systems. For example, the following is a list of example information that may hold potential value to an adversary and may also be found on SharePoint:",
        "id": "3104",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Sharepoint",
        "techniqueid": "T1213.002"
    },
    {
        "description": "Adversaries may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password, from the operating system and software. Credentials can then be used to perform?Lateral Movement?and access restricted information.",
        "id": "3105",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "OS Credential Dumping",
        "techniqueid": "T1003"
    },
    {
        "description": "Adversaries may attempt to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS). After a user logs on, the system generates and stores a variety of credential materials in LSASS process memory. These credential materials can be harvested by an administrative user or SYSTEM and used to conduct?Lateral Movement?using?Use Alternate Authentication Material.",
        "id": "3106",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "LSASS Memory",
        "techniqueid": "T1003.001"
    },
    {
        "description": "Adversaries may attempt to extract credential material from the Security Account Manager (SAM) database either through in-memory techniques or through the Windows Registry where the SAM database is stored. The SAM is a database file that contains local accounts for the host, typically those found with the?net user?command. Enumerating the SAM database requires SYSTEM level access.",
        "id": "3107",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Security Account Manager",
        "techniqueid": "T1003.002"
    },
    {
        "description": "Adversaries may attempt to access cached domain credentials used to allow authentication to occur in the event a domain controller is unavailable.",
        "id": "3108",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Cached Domain Credentials",
        "techniqueid": "T1003.005"
    },
    {
        "description": "Adversaries with SYSTEM access to a host may attempt to access Local Security Authority (LSA) secrets, which can contain a variety of different credential materials, such as credentials for service accounts. LSA secrets are stored in the registry at?HKEY_LOCAL_MACHINE\\SECURITY\\Policy\\Secrets. LSA secrets can also be dumped from memory.",
        "id": "3109",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "LSA Secrets",
        "techniqueid": "T1003.004"
    },
    {
        "description": "Adversaries may attempt to access or create a copy of the Active Directory domain database in order to steal credential information, as well as obtain other information about domain members such as devices, users, and access rights. By default, the NTDS file (NTDS.dit) is located in?%SystemRoot%\\NTDS\\Ntds.dit?of a domain controller.",
        "id": "3110",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "NTDS",
        "techniqueid": "T1003.003"
    },
    {
        "description": "Adversaries may gain access to and use third-party software suites installed within an enterprise network, such as administration, monitoring, and deployment systems, to move laterally through the network. Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, VNC, HBSS, Altiris, etc.).",
        "id": "3111",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Software Deployment Tools",
        "techniqueid": "T1072"
    },
    {
        "description": "Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g.?Bash History), operating system or application-specific repositories (e.g.?Credentials in Registry), or other specialized files/artifacts (e.g.?Private Keys).",
        "id": "3112",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Unsecured Credentials",
        "techniqueid": "T1552"
    },
    {
        "description": "Adversaries may search local file systems and remote file shares for files containing insecurely stored credentials. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.",
        "id": "3113",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Credentials In Files",
        "techniqueid": "T1552.001"
    },
    {
        "description": "Adversaries may manipulate products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise.",
        "id": "3114",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Supply Chain Compromise",
        "techniqueid": "T1195"
    },
    {
        "description": "Adversaries may manipulate software dependencies and development tools prior to receipt by a final consumer for the purpose of data or system compromise. Applications often depend on external software to function properly. Popular open source projects that are used as dependencies in many applications may be targeted as a means to add malicious code to users of the dependency.",
        "id": "3115",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Compromise Software Dependencies and Development Tools",
        "techniqueid": "T1195.001"
    },
    {
        "description": "Adversaries may manipulate application software prior to receipt by a final consumer for the purpose of data or system compromise. Supply chain compromise of software can take place in a number of ways, including manipulation of the application source code, manipulation of the update/distribution mechanism for that software, or replacing compiled releases with a modified version.",
        "id": "3116",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Compromise Software Supply Chain",
        "techniqueid": "T1195.002"
    },
    {
        "description": "Adversaries may manipulate products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise.",
        "id": "3117",
        "mitigation": "Vulnerability Scanning",
        "mitigationid": "M1016",
        "technique": "Supply Chain Compromise",
        "techniqueid": "T1195"
    },
    {
        "description": "Adversaries may manipulate software dependencies and development tools prior to receipt by a final consumer for the purpose of data or system compromise. Applications often depend on external software to function properly. Popular open source projects that are used as dependencies in many applications may be targeted as a means to add malicious code to users of the dependency.",
        "id": "3118",
        "mitigation": "Vulnerability Scanning",
        "mitigationid": "M1016",
        "technique": "Compromise Software Dependencies and Development Tools",
        "techniqueid": "T1195.001"
    },
    {
        "description": "Adversaries may manipulate application software prior to receipt by a final consumer for the purpose of data or system compromise. Supply chain compromise of software can take place in a number of ways, including manipulation of the application source code, manipulation of the update/distribution mechanism for that software, or replacing compiled releases with a modified version.",
        "id": "3119",
        "mitigation": "Vulnerability Scanning",
        "mitigationid": "M1016",
        "technique": "Compromise Software Supply Chain",
        "techniqueid": "T1195.002"
    },
    {
        "description": "Adversaries may manipulate products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise.",
        "id": "3120",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Supply Chain Compromise",
        "techniqueid": "T1195"
    },
    {
        "description": "Adversaries may manipulate software dependencies and development tools prior to receipt by a final consumer for the purpose of data or system compromise. Applications often depend on external software to function properly. Popular open source projects that are used as dependencies in many applications may be targeted as a means to add malicious code to users of the dependency.",
        "id": "3121",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Compromise Software Dependencies and Development Tools",
        "techniqueid": "T1195.001"
    },
    {
        "description": "Adversaries may manipulate application software prior to receipt by a final consumer for the purpose of data or system compromise. Supply chain compromise of software can take place in a number of ways, including manipulation of the application source code, manipulation of the update/distribution mechanism for that software, or replacing compiled releases with a modified version.",
        "id": "3122",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Compromise Software Supply Chain",
        "techniqueid": "T1195.002"
    },
    {
        "description": "Adversaries may manipulate products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise.",
        "id": "3123",
        "mitigation": "Vulnerability Scanning",
        "mitigationid": "M1016",
        "technique": "Supply Chain Compromise",
        "techniqueid": "T1195"
    },
    {
        "description": "Adversaries may manipulate software dependencies and development tools prior to receipt by a final consumer for the purpose of data or system compromise. Applications often depend on external software to function properly. Popular open source projects that are used as dependencies in many applications may be targeted as a means to add malicious code to users of the dependency.",
        "id": "3124",
        "mitigation": "Vulnerability Scanning",
        "mitigationid": "M1016",
        "technique": "Compromise Software Dependencies and Development Tools",
        "techniqueid": "T1195.001"
    },
    {
        "description": "Adversaries may manipulate application software prior to receipt by a final consumer for the purpose of data or system compromise. Supply chain compromise of software can take place in a number of ways, including manipulation of the application source code, manipulation of the update/distribution mechanism for that software, or replacing compiled releases with a modified version.",
        "id": "3125",
        "mitigation": "Vulnerability Scanning",
        "mitigationid": "M1016",
        "technique": "Compromise Software Supply Chain",
        "techniqueid": "T1195.002"
    },
    {
        "description": "Adversaries may manipulate products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise.",
        "id": "3126",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Supply Chain Compromise",
        "techniqueid": "T1195"
    },
    {
        "description": "Adversaries may manipulate software dependencies and development tools prior to receipt by a final consumer for the purpose of data or system compromise. Applications often depend on external software to function properly. Popular open source projects that are used as dependencies in many applications may be targeted as a means to add malicious code to users of the dependency.",
        "id": "3127",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Compromise Software Dependencies and Development Tools",
        "techniqueid": "T1195.001"
    },
    {
        "description": "Adversaries may manipulate application software prior to receipt by a final consumer for the purpose of data or system compromise. Supply chain compromise of software can take place in a number of ways, including manipulation of the application source code, manipulation of the update/distribution mechanism for that software, or replacing compiled releases with a modified version.",
        "id": "3128",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Compromise Software Supply Chain",
        "techniqueid": "T1195.002"
    },
    {
        "description": "Adversaries may manipulate products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise.",
        "id": "3129",
        "mitigation": "Vulnerability Scanning",
        "mitigationid": "M1016",
        "technique": "Supply Chain Compromise",
        "techniqueid": "T1195"
    },
    {
        "description": "Adversaries may manipulate software dependencies and development tools prior to receipt by a final consumer for the purpose of data or system compromise. Applications often depend on external software to function properly. Popular open source projects that are used as dependencies in many applications may be targeted as a means to add malicious code to users of the dependency.",
        "id": "3130",
        "mitigation": "Vulnerability Scanning",
        "mitigationid": "M1016",
        "technique": "Compromise Software Dependencies and Development Tools",
        "techniqueid": "T1195.001"
    },
    {
        "description": "Adversaries may manipulate application software prior to receipt by a final consumer for the purpose of data or system compromise. Supply chain compromise of software can take place in a number of ways, including manipulation of the application source code, manipulation of the update/distribution mechanism for that software, or replacing compiled releases with a modified version.",
        "id": "3131",
        "mitigation": "Vulnerability Scanning",
        "mitigationid": "M1016",
        "technique": "Compromise Software Supply Chain",
        "techniqueid": "T1195.002"
    },
    {
        "description": "Adversaries may manipulate products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise.",
        "id": "3132",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Supply Chain Compromise",
        "techniqueid": "T1195"
    },
    {
        "description": "Adversaries may manipulate software dependencies and development tools prior to receipt by a final consumer for the purpose of data or system compromise. Applications often depend on external software to function properly. Popular open source projects that are used as dependencies in many applications may be targeted as a means to add malicious code to users of the dependency.",
        "id": "3133",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Compromise Software Dependencies and Development Tools",
        "techniqueid": "T1195.001"
    },
    {
        "description": "Adversaries may manipulate application software prior to receipt by a final consumer for the purpose of data or system compromise. Supply chain compromise of software can take place in a number of ways, including manipulation of the application source code, manipulation of the update/distribution mechanism for that software, or replacing compiled releases with a modified version.",
        "id": "3134",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Compromise Software Supply Chain",
        "techniqueid": "T1195.002"
    },
    {
        "description": "Adversaries may manipulate products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise.",
        "id": "3135",
        "mitigation": "Vulnerability Scanning",
        "mitigationid": "M1016",
        "technique": "Supply Chain Compromise",
        "techniqueid": "T1195"
    },
    {
        "description": "Adversaries may manipulate software dependencies and development tools prior to receipt by a final consumer for the purpose of data or system compromise. Applications often depend on external software to function properly. Popular open source projects that are used as dependencies in many applications may be targeted as a means to add malicious code to users of the dependency.",
        "id": "3136",
        "mitigation": "Vulnerability Scanning",
        "mitigationid": "M1016",
        "technique": "Compromise Software Dependencies and Development Tools",
        "techniqueid": "T1195.001"
    },
    {
        "description": "Adversaries may manipulate application software prior to receipt by a final consumer for the purpose of data or system compromise. Supply chain compromise of software can take place in a number of ways, including manipulation of the application source code, manipulation of the update/distribution mechanism for that software, or replacing compiled releases with a modified version.",
        "id": "3137",
        "mitigation": "Vulnerability Scanning",
        "mitigationid": "M1016",
        "technique": "Compromise Software Supply Chain",
        "techniqueid": "T1195.002"
    },
    {
        "description": "Adversaries may manipulate products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise.",
        "id": "3138",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Supply Chain Compromise",
        "techniqueid": "T1195"
    },
    {
        "description": "Adversaries may manipulate software dependencies and development tools prior to receipt by a final consumer for the purpose of data or system compromise. Applications often depend on external software to function properly. Popular open source projects that are used as dependencies in many applications may be targeted as a means to add malicious code to users of the dependency.",
        "id": "3139",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Compromise Software Dependencies and Development Tools",
        "techniqueid": "T1195.001"
    },
    {
        "description": "Adversaries may manipulate application software prior to receipt by a final consumer for the purpose of data or system compromise. Supply chain compromise of software can take place in a number of ways, including manipulation of the application source code, manipulation of the update/distribution mechanism for that software, or replacing compiled releases with a modified version.",
        "id": "3140",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Compromise Software Supply Chain",
        "techniqueid": "T1195.002"
    },
    {
        "description": "Adversaries may manipulate accounts to maintain access to victim systems. Account manipulation may consist of any action that preserves adversary access to a compromised account, such as modifying credentials or permission groups. These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials. In order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain.",
        "id": "3141",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Account Manipulation",
        "techniqueid": "T1098"
    },
    {
        "description": "Adversaries may add adversary-controlled credentials to a cloud account to maintain persistent access to victim accounts and instances within the environment.",
        "id": "3142",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Additional Cloud Credentials",
        "techniqueid": "T1098.001"
    },
    {
        "description": "Adversaries may create a cloud account to maintain access to victim systems. With a sufficient level of access, such accounts may be used to establish secondary credentialed access that does not require persistent remote access tools to be deployed on the system.",
        "id": "3143",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Cloud Account",
        "techniqueid": "T1136.003"
    },
    {
        "description": "Adversaries may insert, delete, or manipulate data in order to manipulate external outcomes or hide activity. By manipulating data, adversaries may attempt to affect a business process, organizational understanding, or decision making.",
        "id": "3144",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Data Manipulation",
        "techniqueid": "T1565"
    },
    {
        "description": "Adversaries may modify systems in order to manipulate the data as it is accessed and displayed to an end user. By manipulating runtime data, adversaries may attempt to affect a business process, organizational understanding, and decision making.",
        "id": "3145",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Runtime Data Manipulation",
        "techniqueid": "T1565.003"
    },
    {
        "description": "Adversaries may attempt to take advantage of a weakness in an Internet-facing computer or program using software, data, or commands in order to cause unintended or unanticipated behavior. The weakness in the system can be a bug, a glitch, or a design vulnerability. These applications are often websites, but can include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other applications with Internet accessible open sockets, such as web servers and related services. Depending on the flaw being exploited this may include?Exploitation for Defense Evasion.",
        "id": "3146",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Exploit Public-Facing Application",
        "techniqueid": "T1190"
    },
    {
        "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.?A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.",
        "id": "3147",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Exploitation of Remote Services",
        "techniqueid": "T1210"
    },
    {
        "description": "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as?Windows Remote Management?can also be used externally.",
        "id": "3148",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "External Remote Services",
        "techniqueid": "T1133"
    },
    {
        "description": "Adversaries may attempt to position themselves between two or more networked devices using a man-in-the-middle (MiTM) technique to support follow-on behaviors such as?Network Sniffing?or?Transmitted Data Manipulation. By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.",
        "id": "3149",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Man-in-the-Middle",
        "techniqueid": "T1557"
    },
    {
        "description": "By responding to LLMNR/NBT-NS network traffic, adversaries may spoof an authoritative source for name resolution to force communication with an adversary controlled system. This activity may be used to collect or relay authentication materials.",
        "id": "3150",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "LLMNR/NBT-NS Poisoning and SMB Relay",
        "techniqueid": "T1557.001"
    },
    {
        "description": "Adversaries may attempt to get a listing of services running on remote hosts, including those that may be vulnerable to remote software exploitation. Methods to acquire this information include port scans and vulnerability scans using tools that are brought onto a system.",
        "id": "3151",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Network Service Scanning",
        "techniqueid": "T1046"
    },
    {
        "description": "Adversaries may gain access to and use third-party software suites installed within an enterprise network, such as administration, monitoring, and deployment systems, to move laterally through the network. Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, VNC, HBSS, Altiris, etc.).",
        "id": "3152",
        "mitigation": "Network Segmentation",
        "mitigationid": "M1030",
        "technique": "Software Deployment Tools",
        "techniqueid": "T1072"
    },
    {
        "description": "Adversaries may attempt to take advantage of a weakness in an Internet-facing computer or program using software, data, or commands in order to cause unintended or unanticipated behavior. The weakness in the system can be a bug, a glitch, or a design vulnerability. These applications are often websites, but can include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other applications with Internet accessible open sockets, such as web servers and related services. Depending on the flaw being exploited this may include?Exploitation for Defense Evasion.",
        "id": "3153",
        "mitigation": "Application Isolation and Sandboxing",
        "mitigationid": "M1048",
        "technique": "Exploit Public-Facing Application",
        "techniqueid": "T1190"
    },
    {
        "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop. Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.",
        "id": "3154",
        "mitigation": "Application Developer Guidance",
        "mitigationid": "M1013",
        "technique": "Valid Accounts",
        "techniqueid": "T1078"
    },
    {
        "description": "Adversaries may leverage information repositories to mine valuable information. Information repositories are tools that allow for storage of information, typically to facilitate collaboration or information sharing between users, and can store a wide variety of data that may aid adversaries in further objectives, or direct access to the target information.",
        "id": "3155",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Data from Information Repositories",
        "techniqueid": "T1213"
    },
    {
        "description": "Adversaries may leverage Confluence repositories to mine valuable information. Often found in development environments alongside Atlassian JIRA, Confluence is generally used to store development-related documentation, however, in general may contain more diverse categories of useful information, such as:",
        "id": "3156",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Confluence",
        "techniqueid": "T1213.001"
    },
    {
        "description": "Adversaries may leverage the SharePoint repository as a source to mine valuable information. SharePoint will often contain useful information for an adversary to learn about the structure and functionality of the internal network and systems. For example, the following is a list of example information that may hold potential value to an adversary and may also be found on SharePoint:",
        "id": "3157",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Sharepoint",
        "techniqueid": "T1213.002"
    },
    {
        "description": "Adversaries may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password, from the operating system and software. Credentials can then be used to perform?Lateral Movement?and access restricted information.",
        "id": "3158",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "OS Credential Dumping",
        "techniqueid": "T1003"
    },
    {
        "description": "Adversaries may attempt to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS). After a user logs on, the system generates and stores a variety of credential materials in LSASS process memory. These credential materials can be harvested by an administrative user or SYSTEM and used to conduct?Lateral Movement?using?Use Alternate Authentication Material.",
        "id": "3159",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "LSASS Memory",
        "techniqueid": "T1003.001"
    },
    {
        "description": "Adversaries may attempt to extract credential material from the Security Account Manager (SAM) database either through in-memory techniques or through the Windows Registry where the SAM database is stored. The SAM is a database file that contains local accounts for the host, typically those found with the?net user?command. Enumerating the SAM database requires SYSTEM level access.",
        "id": "3160",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Security Account Manager",
        "techniqueid": "T1003.002"
    },
    {
        "description": "Adversaries may attempt to access cached domain credentials used to allow authentication to occur in the event a domain controller is unavailable.",
        "id": "3161",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Cached Domain Credentials",
        "techniqueid": "T1003.005"
    },
    {
        "description": "Adversaries with SYSTEM access to a host may attempt to access Local Security Authority (LSA) secrets, which can contain a variety of different credential materials, such as credentials for service accounts. LSA secrets are stored in the registry at?HKEY_LOCAL_MACHINE\\SECURITY\\Policy\\Secrets. LSA secrets can also be dumped from memory.",
        "id": "3162",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "LSA Secrets",
        "techniqueid": "T1003.004"
    },
    {
        "description": "Adversaries may attempt to access or create a copy of the Active Directory domain database in order to steal credential information, as well as obtain other information about domain members such as devices, users, and access rights. By default, the NTDS file (NTDS.dit) is located in?%SystemRoot%\\NTDS\\Ntds.dit?of a domain controller.",
        "id": "3163",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "NTDS",
        "techniqueid": "T1003.003"
    },
    {
        "description": "Adversaries may gain access to and use third-party software suites installed within an enterprise network, such as administration, monitoring, and deployment systems, to move laterally through the network. Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, VNC, HBSS, Altiris, etc.).",
        "id": "3164",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Software Deployment Tools",
        "techniqueid": "T1072"
    },
    {
        "description": "Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g.?Bash History), operating system or application-specific repositories (e.g.?Credentials in Registry), or other specialized files/artifacts (e.g.?Private Keys).",
        "id": "3165",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Unsecured Credentials",
        "techniqueid": "T1552"
    },
    {
        "description": "Adversaries may search local file systems and remote file shares for files containing insecurely stored credentials. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.",
        "id": "3166",
        "mitigation": "User Training",
        "mitigationid": "M1017",
        "technique": "Credentials In Files",
        "techniqueid": "T1552.001"
    },
    {
        "description": "Adversaries may gain access to and use third-party software suites installed within an enterprise network, such as administration, monitoring, and deployment systems, to move laterally through the network. Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, VNC, HBSS, Altiris, etc.).",
        "id": "3167",
        "mitigation": "Privileged Account Management",
        "mitigationid": "M1026",
        "technique": "Software Deployment Tools",
        "techniqueid": "T1072"
    },
    {
        "description": "Adversaries may modify the SSH?authorized_keys?file to maintain persistence on a victim host. Linux distributions and macOS commonly use key-based authentication to secure the authentication process of SSH sessions for remote management. The?authorized_keys?file in SSH specifies the SSH keys that can be used for logging into the user account for which the file is configured. This file is usually found in the user's home directory under?<user-home>/.ssh/authorized_keys. Users may edit the system��s SSH config file to modify the directives PubkeyAuthentication and RSAAuthentication to the value \"yes\" to ensure public key and RSA authentication are enabled. The SSH config file is usually located under?/etc/ssh/sshd_config.",
        "id": "3168",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "SSH Authorized Keys",
        "techniqueid": "T1098.004"
    },
    {
        "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of?Unix Shell?while Windows installations include the?Windows Command Shell?and?PowerShell.",
        "id": "3169",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Command and Scripting Interpreter",
        "techniqueid": "T1059"
    },
    {
        "description": "Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the?Start-Process?cmdlet which can be used to run an executable and the?Invoke-Command?cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).",
        "id": "3170",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "PowerShell",
        "techniqueid": "T1059.001"
    },
    {
        "description": "Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as?Component Object Model?and the?Native API?through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.",
        "id": "3171",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Visual Basic",
        "techniqueid": "T1059.005"
    },
    {
        "description": "Adversaries may abuse JavaScript and/or JScript for execution. JavaScript (JS) is a platform-agnostic scripting language (compiled just-in-time at runtime) commonly associated with scripts in webpages, though JS can be executed in runtime environments outside the browser.",
        "id": "3172",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "JavaScript/JScript",
        "techniqueid": "T1059.007"
    },
    {
        "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.?A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.",
        "id": "3173",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Exploitation of Remote Services",
        "techniqueid": "T1210"
    },
    {
        "description": "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as?Windows Remote Management?can also be used externally.",
        "id": "3174",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "External Remote Services",
        "techniqueid": "T1133"
    },
    {
        "description": "Adversaries may hide malicious Visual Basic for Applications (VBA) payloads embedded within MS Office documents by replacing the VBA source code with benign data.",
        "id": "3175",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "VBA Stomping",
        "techniqueid": "T1564.007"
    },
    {
        "description": "Adversaries may attempt to position themselves between two or more networked devices using a man-in-the-middle (MiTM) technique to support follow-on behaviors such as?Network Sniffing?or?Transmitted Data Manipulation. By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.",
        "id": "3176",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Man-in-the-Middle",
        "techniqueid": "T1557"
    },
    {
        "description": "Adversaries may attempt to get a listing of services running on remote hosts, including those that may be vulnerable to remote software exploitation. Methods to acquire this information include port scans and vulnerability scans using tools that are brought onto a system.",
        "id": "3177",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Network Service Scanning",
        "techniqueid": "T1046"
    },
    {
        "description": "Adversaries may take control of preexisting sessions with remote services to move laterally in an environment. Users may use valid credentials to log into a service specifically designed to accept remote connections, such as telnet, SSH, and RDP. When a user logs into a service, a session will be established that will allow them to maintain a continuous interaction with that service.",
        "id": "3178",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Remote Service Session Hijacking",
        "techniqueid": "T1563"
    },
    {
        "description": "Adversaries may hijack a legitimate user's SSH session to move laterally within an environment. Secure Shell (SSH) is a standard means of remote access on Linux and macOS systems. It allows a user to connect to another system via an encrypted tunnel, commonly authenticating through a password, certificate or the use of an asymmetric encryption key pair.",
        "id": "3179",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "SSH Hijacking",
        "techniqueid": "T1563.001"
    },
    {
        "description": "Adversaries may hijack a legitimate user��s remote desktop session to move laterally within an environment. Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).",
        "id": "3180",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "RDP Hijacking",
        "techniqueid": "T1563.002"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.",
        "id": "3181",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Remote Desktop Protocol",
        "techniqueid": "T1021.001"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into remote machines using Secure Shell (SSH). The adversary may then perform actions as the logged-on user.",
        "id": "3182",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "SSH",
        "techniqueid": "T1021.004"
    },
    {
        "description": "Adversaries may take advantage of trusted developer utilities to proxy execution of malicious payloads. There are many utilities used for software development related tasks that can be used to execute code in various forms to assist in development, debugging, and reverse engineering. These utilities may often be signed with legitimate certificates that allow them to execute on a system and proxy execution of malicious code through a trusted process that effectively bypasses application control solutions.",
        "id": "3183",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Trusted Developer Utilities Proxy Execution",
        "techniqueid": "T1127"
    },
    {
        "description": "Adversaries may manipulate products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise.",
        "id": "3184",
        "mitigation": "Vulnerability Scanning",
        "mitigationid": "M1016",
        "technique": "Supply Chain Compromise",
        "techniqueid": "T1195"
    },
    {
        "description": "Adversaries may manipulate software dependencies and development tools prior to receipt by a final consumer for the purpose of data or system compromise. Applications often depend on external software to function properly. Popular open source projects that are used as dependencies in many applications may be targeted as a means to add malicious code to users of the dependency.",
        "id": "3185",
        "mitigation": "Vulnerability Scanning",
        "mitigationid": "M1016",
        "technique": "Compromise Software Dependencies and Development Tools",
        "techniqueid": "T1195.001"
    },
    {
        "description": "Adversaries may manipulate application software prior to receipt by a final consumer for the purpose of data or system compromise. Supply chain compromise of software can take place in a number of ways, including manipulation of the application source code, manipulation of the update/distribution mechanism for that software, or replacing compiled releases with a modified version.",
        "id": "3186",
        "mitigation": "Vulnerability Scanning",
        "mitigationid": "M1016",
        "technique": "Compromise Software Supply Chain",
        "techniqueid": "T1195.002"
    },
    {
        "description": "Adversaries may manipulate products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise.",
        "id": "3187",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Supply Chain Compromise",
        "techniqueid": "T1195"
    },
    {
        "description": "Adversaries may manipulate software dependencies and development tools prior to receipt by a final consumer for the purpose of data or system compromise. Applications often depend on external software to function properly. Popular open source projects that are used as dependencies in many applications may be targeted as a means to add malicious code to users of the dependency.",
        "id": "3188",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Compromise Software Dependencies and Development Tools",
        "techniqueid": "T1195.001"
    },
    {
        "description": "Adversaries may manipulate application software prior to receipt by a final consumer for the purpose of data or system compromise. Supply chain compromise of software can take place in a number of ways, including manipulation of the application source code, manipulation of the update/distribution mechanism for that software, or replacing compiled releases with a modified version.",
        "id": "3189",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Compromise Software Supply Chain",
        "techniqueid": "T1195.002"
    },
    {
        "description": "Adversaries may manipulate products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise.",
        "id": "3190",
        "mitigation": "Vulnerability Scanning",
        "mitigationid": "M1016",
        "technique": "Supply Chain Compromise",
        "techniqueid": "T1195"
    },
    {
        "description": "Adversaries may manipulate software dependencies and development tools prior to receipt by a final consumer for the purpose of data or system compromise. Applications often depend on external software to function properly. Popular open source projects that are used as dependencies in many applications may be targeted as a means to add malicious code to users of the dependency.",
        "id": "3191",
        "mitigation": "Vulnerability Scanning",
        "mitigationid": "M1016",
        "technique": "Compromise Software Dependencies and Development Tools",
        "techniqueid": "T1195.001"
    },
    {
        "description": "Adversaries may manipulate application software prior to receipt by a final consumer for the purpose of data or system compromise. Supply chain compromise of software can take place in a number of ways, including manipulation of the application source code, manipulation of the update/distribution mechanism for that software, or replacing compiled releases with a modified version.",
        "id": "3192",
        "mitigation": "Vulnerability Scanning",
        "mitigationid": "M1016",
        "technique": "Compromise Software Supply Chain",
        "techniqueid": "T1195.002"
    },
    {
        "description": "Adversaries may attempt to take advantage of a weakness in an Internet-facing computer or program using software, data, or commands in order to cause unintended or unanticipated behavior. The weakness in the system can be a bug, a glitch, or a design vulnerability. These applications are often websites, but can include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other applications with Internet accessible open sockets, such as web servers and related services. Depending on the flaw being exploited this may include?Exploitation for Defense Evasion.",
        "id": "3193",
        "mitigation": "Vulnerability Scanning",
        "mitigationid": "M1016",
        "technique": "Exploit Public-Facing Application",
        "techniqueid": "T1190"
    },
    {
        "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.?A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.",
        "id": "3194",
        "mitigation": "Vulnerability Scanning",
        "mitigationid": "M1016",
        "technique": "Exploitation of Remote Services",
        "techniqueid": "T1210"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.",
        "id": "3195",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Hijack Execution Flow",
        "techniqueid": "T1574"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the binaries used by services. Adversaries may use flaws in the permissions of Windows services to replace the binary that is executed upon service start. These service processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.",
        "id": "3196",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Services File Permissions Weakness",
        "techniqueid": "T1574.010"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the binaries used by an installer. These processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.",
        "id": "3197",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Executable Installer File Permissions Weakness",
        "techniqueid": "T1574.005"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking vulnerable file path references. Adversaries can take advantage of paths that lack surrounding quotations by placing an executable in a higher level directory within the path, so that Windows will choose the adversary's executable to launch.",
        "id": "3198",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Path Interception by Unquoted Path",
        "techniqueid": "T1574.009"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking environment variables used to load libraries. Adversaries may place a program in an earlier entry in the list of directories stored in the PATH environment variable, which Windows will then execute when it searches sequentially through that PATH listing in search of the binary that was called from a script or the command line.",
        "id": "3199",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Path Interception by PATH Environment Variable",
        "techniqueid": "T1574.007"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the search order used to load other programs. Because some programs do not call other programs using the full path, adversaries may place their own file in the directory where the calling program is located, causing the operating system to launch their malicious software at the request of the calling program.",
        "id": "3200",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Path Interception by Search Order Hijacking",
        "techniqueid": "T1574.008"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the search order used to load DLLs. Windows systems use a common method to look for required DLLs to load into a program. Hijacking DLL loads may be for the purpose of establishing persistence as well as elevating privileges and/or evading restrictions on file execution.",
        "id": "3201",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "DLL Search Order Hijacking",
        "techniqueid": "T1574.001"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the library manifest used to load DLLs. Adversaries may take advantage of vague references in the library manifest of a program by replacing a legitimate library with a malicious one, causing the operating system to load their malicious library when it is called for by the victim program.",
        "id": "3202",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "DLL Side-Loading",
        "techniqueid": "T1574.002"
    },
    {
        "description": "Adversaries may attempt to take advantage of a weakness in an Internet-facing computer or program using software, data, or commands in order to cause unintended or unanticipated behavior. The weakness in the system can be a bug, a glitch, or a design vulnerability. These applications are often websites, but can include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other applications with Internet accessible open sockets, such as web servers and related services. Depending on the flaw being exploited this may include?Exploitation for Defense Evasion.",
        "id": "3203",
        "mitigation": "Vulnerability Scanning",
        "mitigationid": "M1016",
        "technique": "Exploit Public-Facing Application",
        "techniqueid": "T1190"
    },
    {
        "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.?A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.",
        "id": "3204",
        "mitigation": "Vulnerability Scanning",
        "mitigationid": "M1016",
        "technique": "Exploitation of Remote Services",
        "techniqueid": "T1210"
    },
    {
        "description": "Adversaries may attempt to take advantage of a weakness in an Internet-facing computer or program using software, data, or commands in order to cause unintended or unanticipated behavior. The weakness in the system can be a bug, a glitch, or a design vulnerability. These applications are often websites, but can include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other applications with Internet accessible open sockets, such as web servers and related services. Depending on the flaw being exploited this may include?Exploitation for Defense Evasion.",
        "id": "3205",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Exploit Public-Facing Application",
        "techniqueid": "T1190"
    },
    {
        "description": "Adversaries may attempt to take advantage of a weakness in an Internet-facing computer or program using software, data, or commands in order to cause unintended or unanticipated behavior. The weakness in the system can be a bug, a glitch, or a design vulnerability. These applications are often websites, but can include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other applications with Internet accessible open sockets, such as web servers and related services. Depending on the flaw being exploited this may include?Exploitation for Defense Evasion.",
        "id": "3206",
        "mitigation": "Vulnerability Scanning",
        "mitigationid": "M1016",
        "technique": "Exploit Public-Facing Application",
        "techniqueid": "T1190"
    },
    {
        "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.?A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.",
        "id": "3207",
        "mitigation": "Vulnerability Scanning",
        "mitigationid": "M1016",
        "technique": "Exploitation of Remote Services",
        "techniqueid": "T1210"
    },
    {
        "description": "Adversaries may abuse BITS jobs to persistently execute or clean up after malicious payloads. Windows Background Intelligent Transfer Service (BITS) is a low-bandwidth, asynchronous file transfer mechanism exposed through?Component Object Model?(COM). BITS is commonly used by updaters, messengers, and other applications preferred to operate in the background (using available idle bandwidth) without interrupting other networked applications. File transfer tasks are implemented as BITS jobs, which contain a queue of one or more file operations.",
        "id": "3208",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "BITS Jobs",
        "techniqueid": "T1197"
    },
    {
        "description": "Adversaries may access data objects from improperly secured cloud storage.",
        "id": "3209",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Data from Cloud Storage Object",
        "techniqueid": "T1530"
    },
    {
        "description": "Adversaries may collect data related to managed devices from configuration repositories. Configuration repositories are used by management systems in order to configure, manage, and control data on remote systems. Configuration repositories may also facilitate remote access and administration of devices.",
        "id": "3210",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Data from Configuration Repository",
        "techniqueid": "T1602"
    },
    {
        "description": "Adversaries may target the Management Information Base (MIB) to collect and/or mine valuable information in a network managed using Simple Network Management Protocol (SNMP).",
        "id": "3211",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "SNMP (MIB Dump)",
        "techniqueid": "T1602.001"
    },
    {
        "description": "Adversaries may access network configuration files to collect sensitive data about the device and the network. The network configuration is a file containing parameters that determine the operation of the device. The device typically stores an in-memory copy of the configuration while operating, and a separate configuration on non-volatile storage to load after device reset. Adversaries can inspect the configuration files to reveal information about the target network and its layout, the network device and its software, or identifying legitimate accounts and credentials for later use.",
        "id": "3212",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Network Device Configuration Dump",
        "techniqueid": "T1602.002"
    },
    {
        "description": "Adversaries may gather credential material by invoking or forcing a user to automatically provide authentication information through a mechanism in which they can intercept.",
        "id": "3213",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Forced Authentication",
        "techniqueid": "T1187"
    },
    {
        "description": "Adversaries may transfer tools or other files between systems in a compromised environment. Files may be copied from one system to another to stage adversary tools or other files over the course of an operation. Adversaries may copy files laterally between internal victim systems to support lateral movement using inherent file sharing protocols such as file sharing over SMB to connected network shares or with authenticated connections with?SMB/Windows Admin Shares?or?Remote Desktop Protocol. Files can also be copied over on Mac and Linux with native tools like scp, rsync, and sftp.",
        "id": "3214",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Lateral Tool Transfer",
        "techniqueid": "T1570"
    },
    {
        "description": "Adversaries may attempt to position themselves between two or more networked devices using a man-in-the-middle (MiTM) technique to support follow-on behaviors such as?Network Sniffing?or?Transmitted Data Manipulation. By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.",
        "id": "3215",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Man-in-the-Middle",
        "techniqueid": "T1557"
    },
    {
        "description": "By responding to LLMNR/NBT-NS network traffic, adversaries may spoof an authoritative source for name resolution to force communication with an adversary controlled system. This activity may be used to collect or relay authentication materials.",
        "id": "3216",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "LLMNR/NBT-NS Poisoning and SMB Relay",
        "techniqueid": "T1557.001"
    },
    {
        "description": "Adversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such as?Network Sniffing?or?Transmitted Data Manipulation.",
        "id": "3217",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "ARP Cache Poisoning",
        "techniqueid": "T1557.002"
    },
    {
        "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).",
        "id": "3218",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Non-Application Layer Protocol",
        "techniqueid": "T1095"
    },
    {
        "description": "An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks. These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment. Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries.",
        "id": "3219",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Remote Access Software",
        "techniqueid": "T1219"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to remotely control machines using Virtual Network Computing (VNC). The adversary may then perform actions as the logged-on user.",
        "id": "3220",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "VNC",
        "techniqueid": "T1021.005"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user.",
        "id": "3221",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "SMB/Windows Admin Shares",
        "techniqueid": "T1021.002"
    },
    {
        "description": "Adversaries may abuse verclsid.exe to proxy execution of malicious code. Verclsid.exe is known as the Extension CLSID Verification Host and is responsible for verifying each shell extension before they are used by Windows Explorer or the Windows Shell.",
        "id": "3222",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Verclsid",
        "techniqueid": "T1218.012"
    },
    {
        "description": "Adversaries may attempt to get a listing of services running on remote hosts, including those that may be vulnerable to remote software exploitation. Methods to acquire this information include port scans and vulnerability scans using tools that are brought onto a system.",
        "id": "3223",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Network Service Scanning",
        "techniqueid": "T1046"
    },
    {
        "description": "Adversaries may attempt to take advantage of a weakness in an Internet-facing computer or program using software, data, or commands in order to cause unintended or unanticipated behavior. The weakness in the system can be a bug, a glitch, or a design vulnerability. These applications are often websites, but can include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other applications with Internet accessible open sockets, such as web servers and related services. Depending on the flaw being exploited this may include?Exploitation for Defense Evasion.",
        "id": "3224",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Exploit Public-Facing Application",
        "techniqueid": "T1190"
    },
    {
        "description": "Before compromising a victim, adversaries may execute active reconnaissance scans to gather information that can be used during targeting. Active scans are those where the adversary probes victim infrastructure via network traffic, as opposed to other forms of reconnaissance that do not involve direct interaction.",
        "id": "3225",
        "mitigation": "Pre-compromise",
        "mitigationid": "M1056",
        "technique": "Active Scanning",
        "techniqueid": "T1595"
    },
    {
        "description": "Before compromising a victim, adversaries may scan victim IP blocks to gather information that can be used during targeting. Public IP addresses may be allocated to organizations by block, or a range of sequential addresses.",
        "id": "3226",
        "mitigation": "Pre-compromise",
        "mitigationid": "M1056",
        "technique": "Scanning IP Blocks",
        "techniqueid": "T1595.001"
    },
    {
        "description": "Before compromising a victim, adversaries may scan victims for vulnerabilities that can be used during targeting. Vulnerability scans typically check if the configuration of a target host/application (ex: software and version) potentially aligns with the target of a specific exploit the adversary may seek to use.",
        "id": "3227",
        "mitigation": "Pre-compromise",
        "mitigationid": "M1056",
        "technique": "Vulnerability Scanning",
        "techniqueid": "T1595.002"
    },
    {
        "description": "Before compromising a victim, adversaries may gather information about the victim's networks that can be used during targeting. Information about networks may include a variety of details, including administrative data (ex: IP ranges, domain names, etc.) as well as specifics regarding its topology and operations.",
        "id": "3228",
        "mitigation": "Pre-compromise",
        "mitigationid": "M1056",
        "technique": "Gather Victim Network Information",
        "techniqueid": "T1590"
    },
    {
        "description": "Before compromising a victim, adversaries may gather information about the victim's DNS that can be used during targeting. DNS information may include a variety of details, including registered name servers as well as records that outline addressing for a target��s subdomains, mail servers, and other hosts.",
        "id": "3229",
        "mitigation": "Pre-compromise",
        "mitigationid": "M1056",
        "technique": "DNS",
        "techniqueid": "T1590.002"
    },
    {
        "description": "Before compromising a victim, adversaries may gather information about the victim's network domain(s) that can be used during targeting. Information about domains and their properties may include a variety of details, including what domain(s) the victim owns as well as administrative data (ex: name, registrar, etc.) and more directly actionable information such as contacts (email addresses and phone numbers), business addresses, and name servers.",
        "id": "3230",
        "mitigation": "Pre-compromise",
        "mitigationid": "M1056",
        "technique": "Domain Properties",
        "techniqueid": "T1590.001"
    },
    {
        "description": "Before compromising a victim, adversaries may gather the victim's IP addresses that can be used during targeting. Public IP addresses may be allocated to organizations by block, or a range of sequential addresses. Information about assigned IP addresses may include a variety of details, such as which IP addresses are in use. IP addresses may also enable an adversary to derive other details about a victim, such as organizational size, physical location(s), Internet service provider, and or where/how their publicly-facing infrastructure is hosted.",
        "id": "3231",
        "mitigation": "Pre-compromise",
        "mitigationid": "M1056",
        "technique": "IP Addresses",
        "techniqueid": "T1590.005"
    },
    {
        "description": "Before compromising a victim, adversaries may gather information about the victim's network security appliances that can be used during targeting. Information about network security appliances may include a variety of details, such as the existence and specifics of deployed firewalls, content filters, and proxies/bastion hosts. Adversaries may also target information about victim network-based intrusion detection systems (NIDS) or other appliances related to defensive cybersecurity operations.",
        "id": "3232",
        "mitigation": "Pre-compromise",
        "mitigationid": "M1056",
        "technique": "Network Security Appliances",
        "techniqueid": "T1590.006"
    },
    {
        "description": "Before compromising a victim, adversaries may gather information about the victim's network topology that can be used during targeting. Information about network topologies may include a variety of details, including the physical and/or logical arrangement of both external-facing and internal network environments. This information may also include specifics regarding network devices (gateways, routers, etc.) and other infrastructure.",
        "id": "3233",
        "mitigation": "Pre-compromise",
        "mitigationid": "M1056",
        "technique": "Network Topology",
        "techniqueid": "T1590.004"
    },
    {
        "description": "Adversaries may use SID-History Injection to escalate privileges and bypass access controls. The Windows security identifier (SID) is a unique value that identifies a user or group account. SIDs are used by Windows security in both security descriptors and access tokens. An account can hold additional SIDs in the SID-History Active Directory attribute , allowing inter-operable account migration between domains (e.g., all values in SID-History are included in access tokens).",
        "id": "3234",
        "mitigation": "Active Directory Configuration",
        "mitigationid": "M1015",
        "technique": "SID-History Injection",
        "techniqueid": "T1134.005"
    },
    {
        "description": "An adversary may forge SAML tokens with any permissions claims and lifetimes if they possess a valid SAML token-signing certificate. The default lifetime of a SAML token is one hour, but the validity period can be specified in the?NotOnOrAfter?value of the?conditions ...?element in a token. This value can be changed using the?AccessTokenLifetime?in a?LifetimeTokenPolicy. Forged SAML tokens enable adversaries to authenticate across services that use SAML 2.0 as an SSO (single sign-on) mechanism.",
        "id": "3235",
        "mitigation": "Active Directory Configuration",
        "mitigationid": "M1015",
        "technique": "SAML Tokens",
        "techniqueid": "T1606.002"
    },
    {
        "description": "Adversaries may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password, from the operating system and software. Credentials can then be used to perform?Lateral Movement?and access restricted information.",
        "id": "3236",
        "mitigation": "Active Directory Configuration",
        "mitigationid": "M1015",
        "technique": "OS Credential Dumping",
        "techniqueid": "T1003"
    },
    {
        "description": "Adversaries may attempt to access credentials and other sensitive information by abusing a Windows Domain Controller's application programming interface (API) to simulate the replication process from a remote domain controller using a technique called DCSync.",
        "id": "3237",
        "mitigation": "Active Directory Configuration",
        "mitigationid": "M1015",
        "technique": "DCSync",
        "techniqueid": "T1003.006"
    },
    {
        "description": "Adversaries may attempt to access cached domain credentials used to allow authentication to occur in the event a domain controller is unavailable.",
        "id": "3238",
        "mitigation": "Active Directory Configuration",
        "mitigationid": "M1015",
        "technique": "Cached Domain Credentials",
        "techniqueid": "T1003.005"
    },
    {
        "description": "Adversaries may gain access to and use third-party software suites installed within an enterprise network, such as administration, monitoring, and deployment systems, to move laterally through the network. Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, VNC, HBSS, Altiris, etc.).",
        "id": "3239",
        "mitigation": "Active Directory Configuration",
        "mitigationid": "M1015",
        "technique": "Software Deployment Tools",
        "techniqueid": "T1072"
    },
    {
        "description": "Adversaries may attempt to subvert Kerberos authentication by stealing or forging Kerberos tickets to enable?Pass the Ticket.",
        "id": "3240",
        "mitigation": "Active Directory Configuration",
        "mitigationid": "M1015",
        "technique": "Steal or Forge Kerberos Tickets",
        "techniqueid": "T1558"
    },
    {
        "description": "Adversaries who have the KRBTGT account password hash may forge Kerberos ticket-granting tickets (TGT), also known as a golden ticket. Golden tickets enable adversaries to generate authentication material for any account in Active Directory.",
        "id": "3241",
        "mitigation": "Active Directory Configuration",
        "mitigationid": "M1015",
        "technique": "Golden Ticket",
        "techniqueid": "T1558.001"
    },
    {
        "description": "Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g.?Bash History), operating system or application-specific repositories (e.g.?Credentials in Registry), or other specialized files/artifacts (e.g.?Private Keys).",
        "id": "3242",
        "mitigation": "Active Directory Configuration",
        "mitigationid": "M1015",
        "technique": "Unsecured Credentials",
        "techniqueid": "T1552"
    },
    {
        "description": "Adversaries may attempt to find unsecured credentials in Group Policy Preferences (GPP). GPP are tools that allow administrators to create domain policies with embedded credentials. These policies allow administrators to set local accounts.",
        "id": "3243",
        "mitigation": "Active Directory Configuration",
        "mitigationid": "M1015",
        "technique": "Group Policy Preferences",
        "techniqueid": "T1552.006"
    },
    {
        "description": "Adversaries may \"pass the ticket\" using stolen Kerberos tickets to move laterally within an environment, bypassing normal system access controls. Pass the ticket (PtT) is a method of authenticating to a system using Kerberos tickets without having access to an account's password. Kerberos authentication can be used as the first step to lateral movement to a remote system.",
        "id": "3244",
        "mitigation": "Active Directory Configuration",
        "mitigationid": "M1015",
        "technique": "Pass the Ticket",
        "techniqueid": "T1550.003"
    },
    {
        "description": "Adversaries may attempt to take advantage of a weakness in an Internet-facing computer or program using software, data, or commands in order to cause unintended or unanticipated behavior. The weakness in the system can be a bug, a glitch, or a design vulnerability. These applications are often websites, but can include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other applications with Internet accessible open sockets, such as web servers and related services. Depending on the flaw being exploited this may include?Exploitation for Defense Evasion.",
        "id": "3245",
        "mitigation": "Vulnerability Scanning",
        "mitigationid": "M1016",
        "technique": "Exploit Public-Facing Application",
        "techniqueid": "T1190"
    },
    {
        "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.?A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.",
        "id": "3246",
        "mitigation": "Vulnerability Scanning",
        "mitigationid": "M1016",
        "technique": "Exploitation of Remote Services",
        "techniqueid": "T1210"
    },
    {
        "description": "Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk. An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.",
        "id": "3247",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Abuse Elevation Control Mechanism",
        "techniqueid": "T1548"
    },
    {
        "description": "An adversary may perform shell escapes or exploit vulnerabilities in an application with the setsuid or setgid bits to get code running in a different user��s context. On Linux or macOS, when the setuid or setgid bits are set for an application, the application will run with the privileges of the owning user or group respectively. . Normally an application is run in the current user��s context, regardless of which user or group owns the application. However, there are instances where programs need to be executed in an elevated context to function properly, but the user running them doesn��t need the elevated privileges.",
        "id": "3248",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Setuid and Setgid",
        "techniqueid": "T1548.001"
    },
    {
        "description": "Adversaries may perform sudo caching and/or use the suoders file to elevate privileges. Adversaries may do this to execute commands as other users or spawn processes with higher privileges.",
        "id": "3249",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Sudo and Sudo Caching",
        "techniqueid": "T1548.003"
    },
    {
        "description": "Adversaries may attempt to get a listing of accounts on a system or within an environment. This information can help adversaries determine which accounts exist to aid in follow-on behavior.",
        "id": "3250",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Account Discovery",
        "techniqueid": "T1087"
    },
    {
        "description": "Adversaries may attempt to get a listing of local system accounts. This information can help adversaries determine which local accounts exist on a system to aid in follow-on behavior.",
        "id": "3251",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Local Account",
        "techniqueid": "T1087.001"
    },
    {
        "description": "Adversaries may attempt to get a listing of domain accounts. This information can help adversaries determine which domain accounts exist to aid in follow-on behavior.",
        "id": "3252",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Domain Account",
        "techniqueid": "T1087.002"
    },
    {
        "description": "Adversaries may manipulate accounts to maintain access to victim systems. Account manipulation may consist of any action that preserves adversary access to a compromised account, such as modifying credentials or permission groups. These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials. In order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain.",
        "id": "3253",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Account Manipulation",
        "techniqueid": "T1098"
    },
    {
        "description": "Adversaries may abuse BITS jobs to persistently execute or clean up after malicious payloads. Windows Background Intelligent Transfer Service (BITS) is a low-bandwidth, asynchronous file transfer mechanism exposed through?Component Object Model?(COM). BITS is commonly used by updaters, messengers, and other applications preferred to operate in the background (using available idle bandwidth) without interrupting other networked applications. File transfer tasks are implemented as BITS jobs, which contain a queue of one or more file operations.",
        "id": "3254",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "BITS Jobs",
        "techniqueid": "T1197"
    },
    {
        "description": "Adversaries can perform command and control between compromised hosts on potentially disconnected networks using removable media to transfer commands from system to system. Both systems would need to be compromised, with the likelihood that an Internet-connected system was compromised first and the second through lateral movement by?Replication Through Removable Media. Commands and files would be relayed from the disconnected system to the Internet-connected system to which the adversary has direct access.",
        "id": "3255",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Communication Through Removable Media",
        "techniqueid": "T1092"
    },
    {
        "description": "Adversaries may create an account to maintain access to victim systems. With a sufficient level of access, creating such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.",
        "id": "3256",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Create Account",
        "techniqueid": "T1136"
    },
    {
        "description": "Adversaries may create a domain account to maintain access to victim systems. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover user, administrator, and service accounts. With a sufficient level of access, the?net user /add /domain?command can be used to create a domain account.",
        "id": "3257",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Domain Account",
        "techniqueid": "T1136.002"
    },
    {
        "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by accessibility features. Windows contains accessibility features that may be launched with a key combination before a user has logged in (ex: when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system.",
        "id": "3258",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Accessibility Features",
        "techniqueid": "T1546.008"
    },
    {
        "description": "Adversaries may attempt to exfiltrate data over a different network medium than the command and control channel. If the command and control network is a wired Internet connection, the exfiltration may occur, for example, over a WiFi connection, modem, cellular data connection, Bluetooth, or another radio frequency (RF) channel.",
        "id": "3259",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Exfiltration Over Other Network Medium",
        "techniqueid": "T1011"
    },
    {
        "description": "Adversaries may attempt to exfiltrate data over Bluetooth rather than the command and control channel. If the command and control network is a wired Internet connection, an attacker may opt to exfiltrate data using a Bluetooth communication channel.",
        "id": "3260",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Exfiltration Over Bluetooth",
        "techniqueid": "T1011.001"
    },
    {
        "description": "Adversaries may use hidden users to mask the presence of user accounts they create. Every user account in macOS has a userID associated with it. When creating a user, you can specify the userID for that account.",
        "id": "3261",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Hidden Users",
        "techniqueid": "T1564.002"
    },
    {
        "description": "Adversaries may impair command history logging to hide commands they run on a compromised system. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done.",
        "id": "3262",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Impair Command History Logging",
        "techniqueid": "T1562.003"
    },
    {
        "description": "Adversaries may delete or remove built-in operating system data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery. Operating systems may contain features that can help fix corrupted systems, such as a backup catalog, volume shadow copies, and automatic repair features. Adversaries may disable or delete system recovery features to augment the effects of?Data Destruction?and?Data Encrypted for Impact.",
        "id": "3263",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Inhibit System Recovery",
        "techniqueid": "T1490"
    },
    {
        "description": "Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows or pluggable authentication modules (PAM) on Unix-based systems, responsible for gathering, storing, and validating credentials.",
        "id": "3264",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Modify Authentication Process",
        "techniqueid": "T1556"
    },
    {
        "description": "Adversaries may register malicious password filter dynamic link libraries (DLLs) into the authentication process to acquire user credentials as they are validated.",
        "id": "3265",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Password Filter DLL",
        "techniqueid": "T1556.002"
    },
    {
        "description": "Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and to identify potential systems of interest for Lateral Movement. Networks often contain shared network drives and folders that enable users to access file directories on various systems across a network.",
        "id": "3266",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Network Share Discovery",
        "techniqueid": "T1135"
    },
    {
        "description": "Adversaries may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password, from the operating system and software. Credentials can then be used to perform?Lateral Movement?and access restricted information.",
        "id": "3267",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "OS Credential Dumping",
        "techniqueid": "T1003"
    },
    {
        "description": "Adversaries may attempt to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS). After a user logs on, the system generates and stores a variety of credential materials in LSASS process memory. These credential materials can be harvested by an administrative user or SYSTEM and used to conduct?Lateral Movement?using?Use Alternate Authentication Material.",
        "id": "3268",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "LSASS Memory",
        "techniqueid": "T1003.001"
    },
    {
        "description": "Adversaries may attempt to extract credential material from the Security Account Manager (SAM) database either through in-memory techniques or through the Windows Registry where the SAM database is stored. The SAM is a database file that contains local accounts for the host, typically those found with the?net user?command. Enumerating the SAM database requires SYSTEM level access.",
        "id": "3269",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Security Account Manager",
        "techniqueid": "T1003.002"
    },
    {
        "description": "Adversaries may attempt to access cached domain credentials used to allow authentication to occur in the event a domain controller is unavailable.",
        "id": "3270",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Cached Domain Credentials",
        "techniqueid": "T1003.005"
    },
    {
        "description": "Adversaries may abuse netbooting to load an unauthorized network device operating system from a Trivial File Transfer Protocol (TFTP) server. TFTP boot (netbooting) is commonly used by network administrators to load configuration-controlled network device images from a centralized management server. Netbooting is one option in the boot sequence and can be used to centralize, manage, and control device images.",
        "id": "3271",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "TFTP Boot",
        "techniqueid": "T1542.005"
    },
    {
        "description": "Adversaries may hijack a legitimate user��s remote desktop session to move laterally within an environment. Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).",
        "id": "3272",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "RDP Hijacking",
        "techniqueid": "T1563.002"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.",
        "id": "3273",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Remote Desktop Protocol",
        "techniqueid": "T1021.001"
    },
    {
        "description": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically requires being a member of an admin or otherwise privileged group on the remote system.",
        "id": "3274",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Scheduled Task/Job",
        "techniqueid": "T1053"
    },
    {
        "description": "Adversaries may abuse the?at.exe?utility to perform task scheduling for initial or recurring execution of malicious code. The?at?utility exists as an executable within Windows for scheduling tasks at a specified time and date. Using?at?requires that the Task Scheduler service be running, and the user to be logged on as a member of the local Administrators group.",
        "id": "3275",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "At (Windows)",
        "techniqueid": "T1053.002"
    },
    {
        "description": "Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The?schtasks?can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task.",
        "id": "3276",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Scheduled Task",
        "techniqueid": "T1053.005"
    },
    {
        "description": "Adversaries may undermine security controls that will either warn users of untrusted activity or prevent execution of untrusted programs. Operating systems and security products may contain mechanisms to identify programs or websites as possessing some level of trust. Examples of such features would include a program being allowed to run because it is signed by a valid code signing certificate, a program prompting the user with a warning because it has an attribute set from being downloaded from the Internet, or getting an indication that you are about to connect to an untrusted site.",
        "id": "3277",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Subvert Trust Controls",
        "techniqueid": "T1553"
    },
    {
        "description": "Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers. Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate. Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.",
        "id": "3278",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Install Root Certificate",
        "techniqueid": "T1553.004"
    },
    {
        "description": "Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g.?Bash History), operating system or application-specific repositories (e.g.?Credentials in Registry), or other specialized files/artifacts (e.g.?Private Keys).",
        "id": "3279",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Unsecured Credentials",
        "techniqueid": "T1552"
    },
    {
        "description": "Adversaries may search the bash command history on compromised systems for insecurely stored credentials. Bash keeps track of the commands users type on the command-line with the \"history\" utility. Once a user logs out, the history is flushed to the user��s?.bash_history?file. For each user, this file resides at the same location:?~/.bash_history. Typically, this file keeps track of the user��s last 500 commands. Users often type usernames and passwords on the command-line as parameters to programs, which then get saved to this file when they log out. Attackers can abuse this by looking through the file for potential credentials.",
        "id": "3280",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Bash History",
        "techniqueid": "T1552.003"
    },
    {
        "description": "Adversaries may abuse BITS jobs to persistently execute or clean up after malicious payloads. Windows Background Intelligent Transfer Service (BITS) is a low-bandwidth, asynchronous file transfer mechanism exposed through?Component Object Model?(COM). BITS is commonly used by updaters, messengers, and other applications preferred to operate in the background (using available idle bandwidth) without interrupting other networked applications. File transfer tasks are implemented as BITS jobs, which contain a queue of one or more file operations.",
        "id": "3281",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "BITS Jobs",
        "techniqueid": "T1197"
    },
    {
        "description": "Adversaries may access data objects from improperly secured cloud storage.",
        "id": "3282",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Data from Cloud Storage Object",
        "techniqueid": "T1530"
    },
    {
        "description": "Adversaries may collect data related to managed devices from configuration repositories. Configuration repositories are used by management systems in order to configure, manage, and control data on remote systems. Configuration repositories may also facilitate remote access and administration of devices.",
        "id": "3283",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Data from Configuration Repository",
        "techniqueid": "T1602"
    },
    {
        "description": "Adversaries may target the Management Information Base (MIB) to collect and/or mine valuable information in a network managed using Simple Network Management Protocol (SNMP).",
        "id": "3284",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "SNMP (MIB Dump)",
        "techniqueid": "T1602.001"
    },
    {
        "description": "Adversaries may access network configuration files to collect sensitive data about the device and the network. The network configuration is a file containing parameters that determine the operation of the device. The device typically stores an in-memory copy of the configuration while operating, and a separate configuration on non-volatile storage to load after device reset. Adversaries can inspect the configuration files to reveal information about the target network and its layout, the network device and its software, or identifying legitimate accounts and credentials for later use.",
        "id": "3285",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Network Device Configuration Dump",
        "techniqueid": "T1602.002"
    },
    {
        "description": "Adversaries may gather credential material by invoking or forcing a user to automatically provide authentication information through a mechanism in which they can intercept.",
        "id": "3286",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Forced Authentication",
        "techniqueid": "T1187"
    },
    {
        "description": "Adversaries may transfer tools or other files between systems in a compromised environment. Files may be copied from one system to another to stage adversary tools or other files over the course of an operation. Adversaries may copy files laterally between internal victim systems to support lateral movement using inherent file sharing protocols such as file sharing over SMB to connected network shares or with authenticated connections with?SMB/Windows Admin Shares?or?Remote Desktop Protocol. Files can also be copied over on Mac and Linux with native tools like scp, rsync, and sftp.",
        "id": "3287",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Lateral Tool Transfer",
        "techniqueid": "T1570"
    },
    {
        "description": "Adversaries may attempt to position themselves between two or more networked devices using a man-in-the-middle (MiTM) technique to support follow-on behaviors such as?Network Sniffing?or?Transmitted Data Manipulation. By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.",
        "id": "3288",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Man-in-the-Middle",
        "techniqueid": "T1557"
    },
    {
        "description": "By responding to LLMNR/NBT-NS network traffic, adversaries may spoof an authoritative source for name resolution to force communication with an adversary controlled system. This activity may be used to collect or relay authentication materials.",
        "id": "3289",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "LLMNR/NBT-NS Poisoning and SMB Relay",
        "techniqueid": "T1557.001"
    },
    {
        "description": "Adversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such as?Network Sniffing?or?Transmitted Data Manipulation.",
        "id": "3290",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "ARP Cache Poisoning",
        "techniqueid": "T1557.002"
    },
    {
        "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).",
        "id": "3291",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Non-Application Layer Protocol",
        "techniqueid": "T1095"
    },
    {
        "description": "An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks. These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment. Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries.",
        "id": "3292",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Remote Access Software",
        "techniqueid": "T1219"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to remotely control machines using Virtual Network Computing (VNC). The adversary may then perform actions as the logged-on user.",
        "id": "3293",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "VNC",
        "techniqueid": "T1021.005"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user.",
        "id": "3294",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "SMB/Windows Admin Shares",
        "techniqueid": "T1021.002"
    },
    {
        "description": "Adversaries may abuse verclsid.exe to proxy execution of malicious code. Verclsid.exe is known as the Extension CLSID Verification Host and is responsible for verifying each shell extension before they are used by Windows Explorer or the Windows Shell.",
        "id": "3295",
        "mitigation": "Filter Network Traffic",
        "mitigationid": "M1037",
        "technique": "Verclsid",
        "techniqueid": "T1218.012"
    },
    {
        "description": "Adversaries may modify the SSH?authorized_keys?file to maintain persistence on a victim host. Linux distributions and macOS commonly use key-based authentication to secure the authentication process of SSH sessions for remote management. The?authorized_keys?file in SSH specifies the SSH keys that can be used for logging into the user account for which the file is configured. This file is usually found in the user's home directory under?<user-home>/.ssh/authorized_keys. Users may edit the system��s SSH config file to modify the directives PubkeyAuthentication and RSAAuthentication to the value \"yes\" to ensure public key and RSA authentication are enabled. The SSH config file is usually located under?/etc/ssh/sshd_config.",
        "id": "3296",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "SSH Authorized Keys",
        "techniqueid": "T1098.004"
    },
    {
        "description": "Adversaries may modify plist files to automatically run an application when a user logs in. Starting in Mac OS X 10.7 (Lion), users can specify certain applications to be re-opened when a user logs into their machine after reboot. While this is usually done via a Graphical User Interface (GUI) on an app-by-app basis, there are property list files (plist) that contain this information as well located at?~/Library/Preferences/com.apple.loginwindow.plist?and?~/Library/Preferences/ByHost/com.apple.loginwindow.* .plist.",
        "id": "3297",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Re-opened Applications",
        "techniqueid": "T1547.007"
    },
    {
        "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of?Unix Shell?while Windows installations include the?Windows Command Shell?and?PowerShell.",
        "id": "3298",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Command and Scripting Interpreter",
        "techniqueid": "T1059"
    },
    {
        "description": "Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the?Start-Process?cmdlet which can be used to run an executable and the?Invoke-Command?cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).",
        "id": "3299",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "PowerShell",
        "techniqueid": "T1059.001"
    },
    {
        "description": "Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as?Component Object Model?and the?Native API?through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.",
        "id": "3300",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Visual Basic",
        "techniqueid": "T1059.005"
    },
    {
        "description": "Adversaries may abuse JavaScript and/or JScript for execution. JavaScript (JS) is a platform-agnostic scripting language (compiled just-in-time at runtime) commonly associated with scripts in webpages, though JS can be executed in runtime environments outside the browser.",
        "id": "3301",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "JavaScript/JScript",
        "techniqueid": "T1059.007"
    },
    {
        "description": "Adversaries can perform command and control between compromised hosts on potentially disconnected networks using removable media to transfer commands from system to system. Both systems would need to be compromised, with the likelihood that an Internet-connected system was compromised first and the second through lateral movement by?Replication Through Removable Media. Commands and files would be relayed from the disconnected system to the Internet-connected system to which the adversary has direct access.",
        "id": "3302",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Communication Through Removable Media",
        "techniqueid": "T1092"
    },
    {
        "description": "Adversaries may establish persistence by executing malicious content triggered by user inactivity. Screensavers are programs that execute after a configurable time of user inactivity and consist of Portable Executable (PE) files with a .scr file extension. The Windows screensaver application scrnsave.scr is located in?C:\\Windows\\System32\\, and?C:\\Windows\\sysWOW64\\?on 64-bit Windows systems, along with screensavers included with base Windows installations.",
        "id": "3303",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Screensaver",
        "techniqueid": "T1546.002"
    },
    {
        "description": "Adversaries may gain persistence and elevate privileges by executing malicious content triggered by the Event Monitor Daemon (emond). Emond is a?Launch Daemon?that accepts events from various services, runs them through a simple rules engine, and takes action. The emond binary at?/sbin/emond?will load any rules from the?/etc/emond.d/rules/?directory and take action once an explicitly defined event takes place.",
        "id": "3304",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Emond",
        "techniqueid": "T1546.014"
    },
    {
        "description": "Adversaries may attempt to exfiltrate data over Bluetooth rather than the command and control channel. If the command and control network is a wired Internet connection, an attacker may opt to exfiltrate data using a Bluetooth communication channel.",
        "id": "3305",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Exfiltration Over Bluetooth",
        "techniqueid": "T1011.001"
    },
    {
        "description": "Adversaries may attempt to exfiltrate data via a physical medium, such as a removable drive. In certain circumstances, such as an air-gapped network compromise, exfiltration could occur via a physical medium or device introduced by a user. Such media could be an external hard drive, USB drive, cellular phone, MP3 player, or other removable storage and processing device. The physical medium or device could be used as the final exfiltration point or to hop between otherwise disconnected systems.",
        "id": "3306",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Exfiltration Over Physical Medium",
        "techniqueid": "T1052"
    },
    {
        "description": "Adversaries may attempt to exfiltrate data over a USB connected physical device. In certain circumstances, such as an air-gapped network compromise, exfiltration could occur via a USB device introduced by a user. The USB device could be used as the final exfiltration point or to hop between otherwise disconnected systems.",
        "id": "3307",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Exfiltration over USB",
        "techniqueid": "T1052.001"
    },
    {
        "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.?A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.",
        "id": "3308",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Exploitation of Remote Services",
        "techniqueid": "T1210"
    },
    {
        "description": "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as?Windows Remote Management?can also be used externally.",
        "id": "3309",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "External Remote Services",
        "techniqueid": "T1133"
    },
    {
        "description": "Adversaries may carry out malicious operations using a virtual instance to avoid detection. A wide variety of virtualization technologies exist that allow for the emulation of a computer or computing environment. By running malicious code inside of a virtual instance, adversaries can hide artifacts associated with their behavior from security tools that are unable to monitor activity inside the virtual instance. Additionally, depending on the virtual networking implementation (ex: bridged adapter), network traffic generated by the virtual instance can be difficult to trace back to the compromised host as the IP address and hostname might not match known values.",
        "id": "3310",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Run Virtual Instance",
        "techniqueid": "T1564.006"
    },
    {
        "description": "Adversaries may hide malicious Visual Basic for Applications (VBA) payloads embedded within MS Office documents by replacing the VBA source code with benign data.",
        "id": "3311",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "VBA Stomping",
        "techniqueid": "T1564.007"
    },
    {
        "description": "Adversaries may abuse inter-process communication (IPC) mechanisms for local code or command execution. IPC is typically used by processes to share data, communicate with each other, or synchronize execution. IPC is also commonly used to avoid situations such as deadlocks, which occurs when processes are stuck in a cyclic waiting pattern.",
        "id": "3312",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Inter-Process Communication",
        "techniqueid": "T1559"
    },
    {
        "description": "Adversaries may use Windows Dynamic Data Exchange (DDE) to execute arbitrary commands. DDE is a client-server protocol for one-time and/or continuous inter-process communication (IPC) between applications. Once a link is established, applications can autonomously exchange transactions consisting of strings, warm data links (notifications when a data item changes), hot data links (duplications of changes to a data item), and requests for command execution.",
        "id": "3313",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Dynamic Data Exchange",
        "techniqueid": "T1559.002"
    },
    {
        "description": "Adversaries may attempt to position themselves between two or more networked devices using a man-in-the-middle (MiTM) technique to support follow-on behaviors such as?Network Sniffing?or?Transmitted Data Manipulation. By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.",
        "id": "3314",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Man-in-the-Middle",
        "techniqueid": "T1557"
    },
    {
        "description": "By responding to LLMNR/NBT-NS network traffic, adversaries may spoof an authoritative source for name resolution to force communication with an adversary controlled system. This activity may be used to collect or relay authentication materials.",
        "id": "3315",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "LLMNR/NBT-NS Poisoning and SMB Relay",
        "techniqueid": "T1557.001"
    },
    {
        "description": "Adversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such as?Network Sniffing?or?Transmitted Data Manipulation.",
        "id": "3316",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "ARP Cache Poisoning",
        "techniqueid": "T1557.002"
    },
    {
        "description": "Adversaries may attempt to get a listing of services running on remote hosts, including those that may be vulnerable to remote software exploitation. Methods to acquire this information include port scans and vulnerability scans using tools that are brought onto a system.",
        "id": "3317",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Network Service Scanning",
        "techniqueid": "T1046"
    },
    {
        "description": "Adversaries may leverage Microsoft Office-based applications for persistence between startups. Microsoft Office is a fairly common application suite on Windows-based operating systems within an enterprise network. There are multiple mechanisms that can be used with Office for persistence when an Office-based application is started; this can include the use of Office Template Macros and add-ins.",
        "id": "3318",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Office Application Startup",
        "techniqueid": "T1137"
    },
    {
        "description": "Adversaries may abuse Microsoft Office templates to obtain persistence on a compromised system. Microsoft Office contains templates that are part of common Office applications and are used to customize styles. The base templates within the application are used each time an application starts.",
        "id": "3319",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Office Template Macros",
        "techniqueid": "T1137.001"
    },
    {
        "description": "Adversaries may take control of preexisting sessions with remote services to move laterally in an environment. Users may use valid credentials to log into a service specifically designed to accept remote connections, such as telnet, SSH, and RDP. When a user logs into a service, a session will be established that will allow them to maintain a continuous interaction with that service.",
        "id": "3320",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Remote Service Session Hijacking",
        "techniqueid": "T1563"
    },
    {
        "description": "Adversaries may hijack a legitimate user's SSH session to move laterally within an environment. Secure Shell (SSH) is a standard means of remote access on Linux and macOS systems. It allows a user to connect to another system via an encrypted tunnel, commonly authenticating through a password, certificate or the use of an asymmetric encryption key pair.",
        "id": "3321",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "SSH Hijacking",
        "techniqueid": "T1563.001"
    },
    {
        "description": "Adversaries may hijack a legitimate user��s remote desktop session to move laterally within an environment. Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).",
        "id": "3322",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "RDP Hijacking",
        "techniqueid": "T1563.002"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.",
        "id": "3323",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Remote Desktop Protocol",
        "techniqueid": "T1021.001"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to interact with remote machines by taking advantage of Distributed Component Object Model (DCOM). The adversary may then perform actions as the logged-on user.",
        "id": "3324",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Distributed Component Object Model",
        "techniqueid": "T1021.003"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into remote machines using Secure Shell (SSH). The adversary may then perform actions as the logged-on user.",
        "id": "3325",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "SSH",
        "techniqueid": "T1021.004"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to remotely control machines using Virtual Network Computing (VNC). The adversary may then perform actions as the logged-on user.",
        "id": "3326",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "VNC",
        "techniqueid": "T1021.005"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to interact with remote systems using Windows Remote Management (WinRM). The adversary may then perform actions as the logged-on user.",
        "id": "3327",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Windows Remote Management",
        "techniqueid": "T1021.006"
    },
    {
        "description": "Adversaries may move onto systems, possibly those on disconnected or air-gapped networks, by copying malware to removable media and taking advantage of Autorun features when the media is inserted into a system and executes. In the case of Lateral Movement, this may occur through modification of executable files stored on removable media or by copying malware and renaming it to look like a legitimate file to trick users into executing it on a separate system. In the case of Initial Access, this may occur through manual manipulation of the media, modification of systems used to initially format the media, or modification to the media's firmware itself.",
        "id": "3328",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Replication Through Removable Media",
        "techniqueid": "T1091"
    },
    {
        "description": "Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed binaries. Binaries signed with trusted digital certificates can execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files.",
        "id": "3329",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Signed Binary Proxy Execution",
        "techniqueid": "T1218"
    },
    {
        "description": "Adversaries may abuse CMSTP to proxy execution of malicious code. The Microsoft Connection Manager Profile Installer (CMSTP.exe) is a command-line program used to install Connection Manager service profiles. CMSTP.exe accepts an installation information file (INF) as a parameter and installs a service profile leveraged for remote access connections.",
        "id": "3330",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "CMSTP",
        "techniqueid": "T1218.003"
    },
    {
        "description": "Adversaries may use InstallUtil to proxy execution of code through a trusted Windows utility. InstallUtil is a command-line utility that allows for installation and uninstallation of resources by executing specific installer components specified in .NET binaries. InstallUtil is digitally signed by Microsoft and located in the .NET directories on a Windows system:?C:\\Windows\\Microsoft.NET\\Framework\\v\\InstallUtil.exe?and?C:\\Windows\\Microsoft.NET\\Framework64\\v\\InstallUtil.exe.",
        "id": "3331",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "InstallUtil",
        "techniqueid": "T1218.004"
    },
    {
        "description": "Adversaries may abuse mshta.exe to proxy execution of malicious .hta files and Javascript or VBScript through a trusted Windows utility. There are several examples of different types of threats leveraging mshta.exe during initial compromise and for execution of code",
        "id": "3332",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Mshta",
        "techniqueid": "T1218.005"
    },
    {
        "description": "Adversaries may abuse Regsvcs and Regasm to proxy execution of code through a trusted Windows utility. Regsvcs and Regasm are Windows command-line utilities that are used to register .NET?Component Object Model?(COM) assemblies. Both are digitally signed by Microsoft.",
        "id": "3333",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Regsvcs/Regasm",
        "techniqueid": "T1218.009"
    },
    {
        "description": "Adversaries may abuse odbcconf.exe to proxy execution of malicious payloads. Odbcconf.exe is a Windows utility that allows you to configure Open Database Connectivity (ODBC) drivers and data source names. Odbcconf.exe is digitally signed by Microsoft.",
        "id": "3334",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Odbcconf",
        "techniqueid": "T1218.008"
    },
    {
        "description": "Adversaries may abuse verclsid.exe to proxy execution of malicious code. Verclsid.exe is known as the Extension CLSID Verification Host and is responsible for verifying each shell extension before they are used by Windows Explorer or the Windows Shell.",
        "id": "3335",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Verclsid",
        "techniqueid": "T1218.012"
    },
    {
        "description": "Adversaries may create or modify references in Office document templates to conceal malicious code or force authentication attempts. Microsoft��s Office Open XML (OOXML) specification defines an XML-based format for Office documents (.docx, xlsx, .pptx) to replace older binary formats (.doc, .xls, .ppt). OOXML files are packed together ZIP archives compromised of various XML files, referred to as parts, containing properties that collectively define how a document is rendered.",
        "id": "3336",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Template Injection",
        "techniqueid": "T1221"
    },
    {
        "description": "Adversaries may take advantage of trusted developer utilities to proxy execution of malicious payloads. There are many utilities used for software development related tasks that can be used to execute code in various forms to assist in development, debugging, and reverse engineering. These utilities may often be signed with legitimate certificates that allow them to execute on a system and proxy execution of malicious code through a trusted process that effectively bypasses application control solutions.",
        "id": "3337",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Trusted Developer Utilities Proxy Execution",
        "techniqueid": "T1127"
    },
    {
        "description": "Adversaries may use MSBuild to proxy execution of code through a trusted Windows utility. MSBuild.exe (Microsoft Build Engine) is a software build platform used by Visual Studio. It handles XML formatted project files that define requirements for loading and building various platforms and configurations.",
        "id": "3338",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "MSBuild",
        "techniqueid": "T1127.001"
    },
    {
        "description": "Adversaries may attempt to access the Cloud Instance Metadata API to collect credentials and other sensitive data.",
        "id": "3339",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Cloud Instance Metadata API",
        "techniqueid": "T1552.005"
    },
    {
        "description": "Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk. An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.",
        "id": "3340",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Abuse Elevation Control Mechanism",
        "techniqueid": "T1548"
    },
    {
        "description": "Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.",
        "id": "3341",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Bypass User Account Control",
        "techniqueid": "T1548.002"
    },
    {
        "description": "Adversaries may attempt to get a listing of cloud accounts. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application.",
        "id": "3342",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Cloud Account",
        "techniqueid": "T1087.004"
    },
    {
        "description": "An adversary may compress and/or encrypt data that is collected prior to exfiltration. Compressing the data can help to obfuscate the collected data and minimize the amount of data sent over the network. Encryption can be used to hide information that is being exfiltrated from detection or make exfiltration less conspicuous upon inspection by a defender.",
        "id": "3343",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Archive Collected Data",
        "techniqueid": "T1560"
    },
    {
        "description": "An adversary may compress or encrypt data that is collected prior to exfiltration using 3rd party utilities. Many utilities exist that can archive data, including 7-Zip, WinRAR, and WinZip. Most utilities include functionality to encrypt and/or compress data.",
        "id": "3344",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Archive via Utility",
        "techniqueid": "T1560.001"
    },
    {
        "description": "Adversaries may abuse Internet browser extensions to establish persistence access to victim systems. Browser extensions or plugins are small programs that can add functionality and customize aspects of Internet browsers. They can be installed directly or through a browser's app store and generally have access and permissions to everything that the browser can access.",
        "id": "3345",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Browser Extensions",
        "techniqueid": "T1176"
    },
    {
        "description": "Adversaries may abuse Python commands and scripts for execution. Python is a very popular scripting/programming language, with capabilities to perform many functions. Python can be executed interactively from the command-line (via the?python.exe?interpreter) or via scripts (.py) that can be written and distributed to different systems. Python code can also be compiled into binary executables.",
        "id": "3346",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Python",
        "techniqueid": "T1059.006"
    },
    {
        "description": "Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services. On macOS, launchd processes known as?Launch Daemon?and?Launch Agent?are run to finish system initialization and load user specific parameters.",
        "id": "3347",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Create or Modify System Process",
        "techniqueid": "T1543"
    },
    {
        "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry. Service configurations can be modified using utilities such as sc.exe and?Reg.",
        "id": "3348",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Windows Service",
        "techniqueid": "T1543.003"
    },
    {
        "description": "Adversaries may access data objects from improperly secured cloud storage.",
        "id": "3349",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Data from Cloud Storage Object",
        "techniqueid": "T1530"
    },
    {
        "description": "Adversaries may leverage information repositories to mine valuable information. Information repositories are tools that allow for storage of information, typically to facilitate collaboration or information sharing between users, and can store a wide variety of data that may aid adversaries in further objectives, or direct access to the target information.",
        "id": "3350",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Data from Information Repositories",
        "techniqueid": "T1213"
    },
    {
        "description": "Adversaries may leverage Confluence repositories to mine valuable information. Often found in development environments alongside Atlassian JIRA, Confluence is generally used to store development-related documentation, however, in general may contain more diverse categories of useful information, such as:",
        "id": "3351",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Confluence",
        "techniqueid": "T1213.001"
    },
    {
        "description": "Adversaries may leverage the SharePoint repository as a source to mine valuable information. SharePoint will often contain useful information for an adversary to learn about the structure and functionality of the internal network and systems. For example, the following is a list of example information that may hold potential value to an adversary and may also be found on SharePoint:",
        "id": "3352",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Sharepoint",
        "techniqueid": "T1213.002"
    },
    {
        "description": "Adversaries may modify the configuration settings of a domain to evade defenses and/or escalate privileges in domain environments. Domains provide a centralized means of managing how computer resources (ex: computers, user accounts) can act, and interact with each other, on a network. The policy of the domain also includes configuration settings that may apply between domains in a multi-domain/forest environment. Modifications to domain settings may include altering domain Group Policy Objects (GPOs) or changing trust settings for domains, including federation trusts.",
        "id": "3353",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Domain Policy Modification",
        "techniqueid": "T1484"
    },
    {
        "description": "Adversaries may modify Group Policy Objects (GPOs) to subvert the intended discretionary access controls for a domain, usually with the intention of escalating privileges on the domain. Group policy allows for centralized management of user and computer settings in Active Directory (AD). GPOs are containers for group policy settings made up of files stored within a predicable network path?\\<DOMAIN>\\SYSVOL\\<DOMAIN>\\Policies\\.",
        "id": "3354",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Group Policy Modification",
        "techniqueid": "T1484.001"
    },
    {
        "description": "Adversaries may attempt to gather information on domain trust relationships that may be used to identify lateral movement opportunities in Windows multi-domain/forest environments. Domain trusts provide a mechanism for a domain to allow access to resources based on the authentication procedures of another domain. Domain trusts allow the users of the trusted domain to access resources in the trusting domain. The information discovered may help the adversary conduct?SID-History Injection,?Pass the Ticket, and?Kerberoasting. Domain trusts can be enumerated using the?DSEnumerateDomainTrusts()?Win32 API call, .NET methods, and LDAP. The Windows utility?Nltest?is known to be used by adversaries to enumerate domain trusts.",
        "id": "3355",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Domain Trust Discovery",
        "techniqueid": "T1482"
    },
    {
        "description": "Adversaries may target user email to collect sensitive information. Emails may contain sensitive data, including trade secrets or personal information, that can prove valuable to adversaries. Adversaries can collect or forward email from mail servers or clients.",
        "id": "3356",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Email Collection",
        "techniqueid": "T1114"
    },
    {
        "description": "Adversaries may setup email forwarding rules to collect sensitive information. Adversaries may abuse email-forwarding rules to monitor the activities of a victim, steal information, and further gain intelligence on the victim or the victim��s organization to use as part of further exploits or operations. Outlook and Outlook Web App (OWA) allow users to create inbox rules for various email functions, including forwarding to a different recipient. Messages can be forwarded to internal or external recipients, and there are no restrictions limiting the extent of this rule. Administrators may also create forwarding rules for user accounts with the same considerations and outcomes.",
        "id": "3357",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Email Forwarding Rule",
        "techniqueid": "T1114.003"
    },
    {
        "description": "Adversaries may establish persistence by executing malicious content triggered by the execution of tainted binaries. Mach-O binaries have a series of headers that are used to perform certain operations when a binary is loaded. The LC_LOAD_DYLIB header in a Mach-O binary tells macOS and OS X which dynamic libraries (dylibs) to load during execution time. These can be added ad-hoc to the compiled binary as long as adjustments are made to the rest of the fields and dependencies. There are tools available to perform these changes.",
        "id": "3358",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "LC_LOAD_DYLIB Addition",
        "techniqueid": "T1546.006"
    },
    {
        "description": "Adversaries may forge credential materials that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies, tokens, or other materials to authenticate and authorize user access.",
        "id": "3359",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Forge Web Credentials",
        "techniqueid": "T1606"
    },
    {
        "description": "Adversaries may forge web cookies that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies to authenticate and authorize user access.",
        "id": "3360",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Web Cookies",
        "techniqueid": "T1606.001"
    },
    {
        "description": "An adversary may forge SAML tokens with any permissions claims and lifetimes if they possess a valid SAML token-signing certificate. The default lifetime of a SAML token is one hour, but the validity period can be specified in the?NotOnOrAfter?value of the?conditions ...?element in a token. This value can be changed using the?AccessTokenLifetime?in a?LifetimeTokenPolicy. Forged SAML tokens enable adversaries to authenticate across services that use SAML 2.0 as an SSO (single sign-on) mechanism.",
        "id": "3361",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "SAML Tokens",
        "techniqueid": "T1606.002"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.",
        "id": "3362",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Hijack Execution Flow",
        "techniqueid": "T1574"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the binaries used by services. Adversaries may use flaws in the permissions of Windows services to replace the binary that is executed upon service start. These service processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.",
        "id": "3363",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Services File Permissions Weakness",
        "techniqueid": "T1574.010"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the binaries used by an installer. These processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.",
        "id": "3364",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Executable Installer File Permissions Weakness",
        "techniqueid": "T1574.005"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking vulnerable file path references. Adversaries can take advantage of paths that lack surrounding quotations by placing an executable in a higher level directory within the path, so that Windows will choose the adversary's executable to launch.",
        "id": "3365",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Path Interception by Unquoted Path",
        "techniqueid": "T1574.009"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking environment variables used to load libraries. Adversaries may place a program in an earlier entry in the list of directories stored in the PATH environment variable, which Windows will then execute when it searches sequentially through that PATH listing in search of the binary that was called from a script or the command line.",
        "id": "3366",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Path Interception by PATH Environment Variable",
        "techniqueid": "T1574.007"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the search order used to load other programs. Because some programs do not call other programs using the full path, adversaries may place their own file in the directory where the calling program is located, causing the operating system to launch their malicious software at the request of the calling program.",
        "id": "3367",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Path Interception by Search Order Hijacking",
        "techniqueid": "T1574.008"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the search order used to load DLLs. Windows systems use a common method to look for required DLLs to load into a program. Hijacking DLL loads may be for the purpose of establishing persistence as well as elevating privileges and/or evading restrictions on file execution.",
        "id": "3368",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "DLL Search Order Hijacking",
        "techniqueid": "T1574.001"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the library manifest used to load DLLs. Adversaries may take advantage of vague references in the library manifest of a program by replacing a legitimate library with a malicious one, causing the operating system to load their malicious library when it is called for by the victim program.",
        "id": "3369",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "DLL Side-Loading",
        "techniqueid": "T1574.002"
    },
    {
        "description": "Adversaries may disable or modify a firewall within a cloud environment to bypass controls that limit access to cloud resources. Cloud firewalls are separate from system firewalls that are described in?Disable or Modify System Firewall.",
        "id": "3370",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Disable or Modify Cloud Firewall",
        "techniqueid": "T1562.007"
    },
    {
        "description": "Adversaries may implant cloud container images with malicious code to establish persistence. Amazon Web Service (AWS) Amazon Machine Images (AMI), Google Cloud Platform (GCP) Images, and Azure Images as well as popular container runtimes such as Docker can be implanted or backdoored. Depending on how the infrastructure is provisioned, this could provide persistent access if the infrastructure provisioning tool is instructed to always use the latest image.",
        "id": "3371",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Implant Container Image",
        "techniqueid": "T1525"
    },
    {
        "description": "An adversary may attempt to modify a cloud account's compute service infrastructure to evade defenses. A modification to the compute service infrastructure can include the creation, deletion, or modification of one or more components such as compute instances, virtual machines, and snapshots.",
        "id": "3372",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Modify Cloud Compute Infrastructure",
        "techniqueid": "T1578"
    },
    {
        "description": "An adversary may create a snapshot or data backup within a cloud account to evade defenses. A snapshot is a point-in-time copy of an existing cloud compute component such as a virtual machine (VM), virtual hard drive, or volume. An adversary may leverage permissions to create a snapshot in order to bypass restrictions that prevent access to existing compute service infrastructure, unlike in?Revert Cloud Instance?where an adversary may revert to a snapshot to evade detection and remove evidence of their presence.",
        "id": "3373",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Create Snapshot",
        "techniqueid": "T1578.001"
    },
    {
        "description": "An adversary may create a new instance or virtual machine (VM) within the compute service of a cloud account to evade defenses. Creating a new instance may allow an adversary to bypass firewall rules and permissions that exist on instances currently residing within an account. An adversary may?Create Snapshot?of one or more volumes in an account, create a new instance, mount the snapshots, and then apply a less restrictive security policy to collect?Data from Local System?or for?Remote Data Staging.",
        "id": "3374",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Create Cloud Instance",
        "techniqueid": "T1578.002"
    },
    {
        "description": "An adversary may delete a cloud instance after they have performed malicious activities in an attempt to evade detection and remove evidence of their presence. Deleting an instance or virtual machine can remove valuable forensic artifacts and other evidence of suspicious behavior if the instance is not recoverable.",
        "id": "3375",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Delete Cloud Instance",
        "techniqueid": "T1578.003"
    },
    {
        "description": "Adversaries may abuse netbooting to load an unauthorized network device operating system from a Trivial File Transfer Protocol (TFTP) server. TFTP boot (netbooting) is commonly used by network administrators to load configuration-controlled network device images from a centralized management server. Netbooting is one option in the boot sequence and can be used to centralize, manage, and control device images.",
        "id": "3376",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "TFTP Boot",
        "techniqueid": "T1542.005"
    },
    {
        "description": "Adversaries may abuse the ROM Monitor (ROMMON) by loading an unauthorized firmware with adversary code to provide persistent access and manipulate device behavior that is difficult to detect.",
        "id": "3377",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "ROMMONkit",
        "techniqueid": "T1542.004"
    },
    {
        "description": "Adversaries may hijack a legitimate user��s remote desktop session to move laterally within an environment. Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).",
        "id": "3378",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "RDP Hijacking",
        "techniqueid": "T1563.002"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.",
        "id": "3379",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Remote Desktop Protocol",
        "techniqueid": "T1021.001"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to remotely control machines using Virtual Network Computing (VNC). The adversary may then perform actions as the logged-on user.",
        "id": "3380",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "VNC",
        "techniqueid": "T1021.005"
    },
    {
        "description": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically requires being a member of an admin or otherwise privileged group on the remote system.",
        "id": "3381",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Scheduled Task/Job",
        "techniqueid": "T1053"
    },
    {
        "description": "Adversaries may abuse the?at.exe?utility to perform task scheduling for initial or recurring execution of malicious code. The?at?utility exists as an executable within Windows for scheduling tasks at a specified time and date. Using?at?requires that the Task Scheduler service be running, and the user to be logged on as a member of the local Administrators group.",
        "id": "3382",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "At (Windows)",
        "techniqueid": "T1053.002"
    },
    {
        "description": "Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The?schtasks?can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task.",
        "id": "3383",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Scheduled Task",
        "techniqueid": "T1053.005"
    },
    {
        "description": "Adversaries may abuse the?at?utility to perform task scheduling for initial or recurring execution of malicious code. The?at?command within Linux operating systems enables administrators to schedule tasks.",
        "id": "3384",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "At (Linux)",
        "techniqueid": "T1053.001"
    },
    {
        "description": "Adversaries may abuse the?Launchd?daemon to perform task scheduling for initial or recurring execution of malicious code. The?launchd?daemon, native to macOS, is responsible for loading and maintaining services within the operating system. This process loads the parameters for each launch-on-demand system-level daemon from the property list (plist) files found in?/System/Library/LaunchDaemons?and?/Library/LaunchDaemons?. These LaunchDaemons have property list files which point to the executables that will be launched .",
        "id": "3385",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Launchd",
        "techniqueid": "T1053.004"
    },
    {
        "description": "Adversaries may abuse the?cron?utility to perform task scheduling for initial or recurring execution of malicious code. The?cron?utility is a time-based job scheduler for Unix-like operating systems. The?crontab?file contains the schedule of cron entries to be run and the specified times for execution. Any?crontab?files are stored in operating system-specific file paths.",
        "id": "3386",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Cron",
        "techniqueid": "T1053.003"
    },
    {
        "description": "Adversaries may abuse legitimate extensible development features of servers to establish persistent access to systems. Enterprise server applications may include features that allow developers to write and install software or scripts to extend the functionality of the main application. Adversaries may install malicious components to extend and abuse server applications.",
        "id": "3387",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Server Software Component",
        "techniqueid": "T1505"
    },
    {
        "description": "Adversaries may abuse Microsoft transport agents to establish persistent access to systems. Microsoft Exchange transport agents can operate on email messages passing through the transport pipeline to perform various tasks such as filtering spam, filtering malicious attachments, journaling, or adding a corporate signature to the end of all outgoing emails. Transport agents can be written by application developers and then compiled to .NET assemblies that are subsequently registered with the Exchange server. Transport agents will be invoked during a specified stage of email processing and carry out developer defined tasks.",
        "id": "3388",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Transport Agent",
        "techniqueid": "T1505.002"
    },
    {
        "description": "Adversaries may abuse SQL stored procedures to establish persistent access to systems. SQL Stored Procedures are code that can be saved and reused so that database users do not waste time rewriting frequently used SQL queries. Stored procedures can be invoked via SQL statements to the database using the procedure name or via defined events (e.g. when a SQL server application is started/restarted).",
        "id": "3389",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "SQL Stored Procedures",
        "techniqueid": "T1505.001"
    },
    {
        "description": "Adversaries can steal user application access tokens as a means of acquiring credentials to access remote systems and resources. This can occur through social engineering and typically requires user action to grant access.",
        "id": "3390",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Steal Application Access Token",
        "techniqueid": "T1528"
    },
    {
        "description": "Adversaries may reveal credentials of accounts that have disabled Kerberos preauthentication by?Password Cracking?Kerberos messages.",
        "id": "3391",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "AS-REP Roasting",
        "techniqueid": "T1558.004"
    },
    {
        "description": "Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g.?Bash History), operating system or application-specific repositories (e.g.?Credentials in Registry), or other specialized files/artifacts (e.g.?Private Keys).",
        "id": "3392",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Unsecured Credentials",
        "techniqueid": "T1552"
    },
    {
        "description": "Adversaries may search local file systems and remote file shares for files containing insecurely stored credentials. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.",
        "id": "3393",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Credentials In Files",
        "techniqueid": "T1552.001"
    },
    {
        "description": "Adversaries may search the Registry on compromised systems for insecurely stored credentials. The Windows Registry stores configuration information that can be used by the system or other programs. Adversaries may query the Registry looking for credentials and passwords that have been stored for use by other programs or services. Sometimes these credentials are used for automatic logons.",
        "id": "3394",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Credentials in Registry",
        "techniqueid": "T1552.002"
    },
    {
        "description": "Adversaries may search for private key certificate files on compromised systems for insecurely stored credentials. Private cryptographic keys and certificates are used for authentication, encryption/decryption, and digital signatures. Common key and certificate file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, .pfx, .cer, .p7b, .asc.",
        "id": "3395",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Private Keys",
        "techniqueid": "T1552.004"
    },
    {
        "description": "Adversaries may attempt to find unsecured credentials in Group Policy Preferences (GPP). GPP are tools that allow administrators to create domain policies with embedded credentials. These policies allow administrators to set local accounts.",
        "id": "3396",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Group Policy Preferences",
        "techniqueid": "T1552.006"
    },
    {
        "description": "Adversaries may use stolen application access tokens to bypass the typical authentication process and access restricted accounts, information, or services on remote systems. These tokens are typically stolen from users and used in lieu of login credentials.",
        "id": "3397",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Application Access Token",
        "techniqueid": "T1550.001"
    },
    {
        "description": "Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.",
        "id": "3398",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Bypass User Account Control",
        "techniqueid": "T1548.002"
    },
    {
        "description": "Adversaries may collect data related to managed devices from configuration repositories. Configuration repositories are used by management systems in order to configure, manage, and control data on remote systems. Configuration repositories may also facilitate remote access and administration of devices.",
        "id": "3399",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Data from Configuration Repository",
        "techniqueid": "T1602"
    },
    {
        "description": "Adversaries may target the Management Information Base (MIB) to collect and/or mine valuable information in a network managed using Simple Network Management Protocol (SNMP).",
        "id": "3400",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "SNMP (MIB Dump)",
        "techniqueid": "T1602.001"
    },
    {
        "description": "Adversaries may access network configuration files to collect sensitive data about the device and the network. The network configuration is a file containing parameters that determine the operation of the device. The device typically stores an in-memory copy of the configuration while operating, and a separate configuration on non-volatile storage to load after device reset. Adversaries can inspect the configuration files to reveal information about the target network and its layout, the network device and its software, or identifying legitimate accounts and credentials for later use.",
        "id": "3401",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Network Device Configuration Dump",
        "techniqueid": "T1602.002"
    },
    {
        "description": "Adversaries may gain access to a system through a user visiting a website over the normal course of browsing. With this technique, the user's web browser is typically targeted for exploitation, but adversaries may also use compromised websites for non-exploitation behavior such as acquiring?Application Access Token.",
        "id": "3402",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Drive-by Compromise",
        "techniqueid": "T1189"
    },
    {
        "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppInit DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the?AppInit_DLLs?value in the Registry keys?HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows?or?HKEY_LOCAL_MACHINE\\Software\\Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion\\Windows?are loaded by user32.dll into every process that loads user32.dll. In practice this is nearly every program, since user32.dll is a very common library.",
        "id": "3403",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "AppInit DLLs",
        "techniqueid": "T1546.010"
    },
    {
        "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims. The Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time. For example, the application shimming feature allows developers to apply fixes to applications (without rewriting code) that were created for Windows XP so that it will work with Windows 10.",
        "id": "3404",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Application Shimming",
        "techniqueid": "T1546.011"
    },
    {
        "description": "Adversaries may attempt to take advantage of a weakness in an Internet-facing computer or program using software, data, or commands in order to cause unintended or unanticipated behavior. The weakness in the system can be a bug, a glitch, or a design vulnerability. These applications are often websites, but can include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other applications with Internet accessible open sockets, such as web servers and related services. Depending on the flaw being exploited this may include?Exploitation for Defense Evasion.",
        "id": "3405",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Exploit Public-Facing Application",
        "techniqueid": "T1190"
    },
    {
        "description": "Adversaries may exploit software vulnerabilities in an attempt to collect credentials. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.?Credentialing and authentication mechanisms may be targeted for exploitation by adversaries as a means to gain access to useful credentials or circumvent the process to gain access to systems. One example of this is MS14-068, which targets Kerberos and can be used to forge Kerberos tickets using domain user permissions. Exploitation for credential access may also result in Privilege Escalation depending on the process targeted or credentials obtained.",
        "id": "3406",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Exploitation for Credential Access",
        "techniqueid": "T1212"
    },
    {
        "description": "Adversaries may exploit a system or application vulnerability to bypass security features. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.?Vulnerabilities may exist in defensive security software that can be used to disable or circumvent them.",
        "id": "3407",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Exploitation for Defense Evasion",
        "techniqueid": "T1211"
    },
    {
        "description": "Adversaries may exploit software vulnerabilities in an attempt to collect elevate privileges. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Security constructs such as permission levels will often hinder access to information and use of certain techniques, so adversaries will likely need to perform privilege escalation to include use of software exploitation to circumvent those restrictions.",
        "id": "3408",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Exploitation for Privilege Escalation",
        "techniqueid": "T1068"
    },
    {
        "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.?A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.",
        "id": "3409",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Exploitation of Remote Services",
        "techniqueid": "T1210"
    },
    {
        "description": "Adversaries may overwrite or corrupt the flash memory contents of system BIOS or other firmware in devices attached to a system in order to render them inoperable or unable to boot. Firmware is software that is loaded and executed from non-volatile memory on hardware devices in order to initialize and manage device functionality. These devices could include the motherboard, hard drive, or video cards.",
        "id": "3410",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Firmware Corruption",
        "techniqueid": "T1495"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.",
        "id": "3411",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Hijack Execution Flow",
        "techniqueid": "T1574"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the library manifest used to load DLLs. Adversaries may take advantage of vague references in the library manifest of a program by replacing a legitimate library with a malicious one, causing the operating system to load their malicious library when it is called for by the victim program.",
        "id": "3412",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "DLL Side-Loading",
        "techniqueid": "T1574.002"
    },
    {
        "description": "Adversaries may leverage Microsoft Office-based applications for persistence between startups. Microsoft Office is a fairly common application suite on Windows-based operating systems within an enterprise network. There are multiple mechanisms that can be used with Office for persistence when an Office-based application is started; this can include the use of Office Template Macros and add-ins.",
        "id": "3413",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Office Application Startup",
        "techniqueid": "T1137"
    },
    {
        "description": "Adversaries may abuse Microsoft Outlook rules to obtain persistence on a compromised system. Outlook rules allow a user to define automated behavior to manage email messages. A benign rule might, for example, automatically move an email to a particular folder in Outlook if it contains specific words from a specific sender. Malicious Outlook rules can be created that can trigger code execution when an adversary sends a specifically crafted email to that user.",
        "id": "3414",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Outlook Rules",
        "techniqueid": "T1137.005"
    },
    {
        "description": "Adversaries may abuse Microsoft Outlook forms to obtain persistence on a compromised system. Outlook forms are used as templates for presentation and functionality in Outlook messages. Custom Outlook forms can be created that will execute code when a specifically crafted email is sent by an adversary utilizing the same custom Outlook form.",
        "id": "3415",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Outlook Forms",
        "techniqueid": "T1137.003"
    },
    {
        "description": "Adversaries may abuse Microsoft Outlook's Home Page feature to obtain persistence on a compromised system. Outlook Home Page is a legacy feature used to customize the presentation of Outlook folders. This feature allows for an internal or external URL to be loaded and presented whenever a folder is opened. A malicious HTML page can be crafted that will execute code when loaded by Outlook Home Page.",
        "id": "3416",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Outlook Home Page",
        "techniqueid": "T1137.004"
    },
    {
        "description": "Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control.",
        "id": "3417",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Pre-OS Boot",
        "techniqueid": "T1542"
    },
    {
        "description": "Adversaries may modify system firmware to persist on systems.The BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer.",
        "id": "3418",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "System Firmware",
        "techniqueid": "T1542.001"
    },
    {
        "description": "Adversaries may gain access to and use third-party software suites installed within an enterprise network, such as administration, monitoring, and deployment systems, to move laterally through the network. Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, VNC, HBSS, Altiris, etc.).",
        "id": "3419",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Software Deployment Tools",
        "techniqueid": "T1072"
    },
    {
        "description": "Adversaries may manipulate products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise.",
        "id": "3420",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Supply Chain Compromise",
        "techniqueid": "T1195"
    },
    {
        "description": "Adversaries may manipulate software dependencies and development tools prior to receipt by a final consumer for the purpose of data or system compromise. Applications often depend on external software to function properly. Popular open source projects that are used as dependencies in many applications may be targeted as a means to add malicious code to users of the dependency.",
        "id": "3421",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Compromise Software Dependencies and Development Tools",
        "techniqueid": "T1195.001"
    },
    {
        "description": "Adversaries may manipulate application software prior to receipt by a final consumer for the purpose of data or system compromise. Supply chain compromise of software can take place in a number of ways, including manipulation of the application source code, manipulation of the update/distribution mechanism for that software, or replacing compiled releases with a modified version.",
        "id": "3422",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Compromise Software Supply Chain",
        "techniqueid": "T1195.002"
    },
    {
        "description": "Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g.?Bash History), operating system or application-specific repositories (e.g.?Credentials in Registry), or other specialized files/artifacts (e.g.?Private Keys).",
        "id": "3423",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Unsecured Credentials",
        "techniqueid": "T1552"
    },
    {
        "description": "Adversaries may attempt to find unsecured credentials in Group Policy Preferences (GPP). GPP are tools that allow administrators to create domain policies with embedded credentials. These policies allow administrators to set local accounts.",
        "id": "3424",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Group Policy Preferences",
        "techniqueid": "T1552.006"
    },
    {
        "description": "Adversaries may \"pass the hash\" using stolen password hashes to move laterally within an environment, bypassing normal system access controls. Pass the hash (PtH) is a method of authenticating as a user without having access to the user's cleartext password. This method bypasses standard authentication steps that require a cleartext password, moving directly into the portion of the authentication that uses the password hash. In this technique, valid password hashes for the account being used are captured using a Credential Access technique. Captured hashes are used with PtH to authenticate as that user. Once authenticated, PtH may be used to perform actions on local or remote systems.",
        "id": "3425",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Pass the Hash",
        "techniqueid": "T1550.002"
    },
    {
        "description": "Adversaries may gain persistence and elevate privileges by executing malicious content triggered by PowerShell profiles. A PowerShell profile (profile.ps1) is a script that runs when?PowerShell?starts and can be used as a logon script to customize user environments.",
        "id": "3426",
        "mitigation": "Software Configuration",
        "mitigationid": "M1054",
        "technique": "PowerShell Profile",
        "techniqueid": "T1546.013"
    },
    {
        "description": "Adversaries may forge credential materials that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies, tokens, or other materials to authenticate and authorize user access.",
        "id": "3427",
        "mitigation": "Software Configuration",
        "mitigationid": "M1054",
        "technique": "Forge Web Credentials",
        "techniqueid": "T1606"
    },
    {
        "description": "Adversaries may forge web cookies that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies to authenticate and authorize user access.",
        "id": "3428",
        "mitigation": "Software Configuration",
        "mitigationid": "M1054",
        "technique": "Web Cookies",
        "techniqueid": "T1606.001"
    },
    {
        "description": "An adversary may attempt to block indicators or events typically captured by sensors from being gathered and analyzed. This could include maliciously redirecting or even disabling host-based sensors, such as Event Tracing for Windows (ETW), by tampering settings that control the collection and flow of event telemetry. These settings may be stored on the system in configuration files and/or in the Registry as well as being accessible via administrative utilities such as?PowerShell?or?Windows Management Instrumentation.",
        "id": "3429",
        "mitigation": "Software Configuration",
        "mitigationid": "M1054",
        "technique": "Indicator Blocking",
        "techniqueid": "T1562.006"
    },
    {
        "description": "Adversaries may abuse inter-process communication (IPC) mechanisms for local code or command execution. IPC is typically used by processes to share data, communicate with each other, or synchronize execution. IPC is also commonly used to avoid situations such as deadlocks, which occurs when processes are stuck in a cyclic waiting pattern.",
        "id": "3430",
        "mitigation": "Software Configuration",
        "mitigationid": "M1054",
        "technique": "Inter-Process Communication",
        "techniqueid": "T1559"
    },
    {
        "description": "Adversaries may use Windows Dynamic Data Exchange (DDE) to execute arbitrary commands. DDE is a client-server protocol for one-time and/or continuous inter-process communication (IPC) between applications. Once a link is established, applications can autonomously exchange transactions consisting of strings, warm data links (notifications when a data item changes), hot data links (duplications of changes to a data item), and requests for command execution.",
        "id": "3431",
        "mitigation": "Software Configuration",
        "mitigationid": "M1054",
        "technique": "Dynamic Data Exchange",
        "techniqueid": "T1559.002"
    },
    {
        "description": "Adversaries may leverage Microsoft Office-based applications for persistence between startups. Microsoft Office is a fairly common application suite on Windows-based operating systems within an enterprise network. There are multiple mechanisms that can be used with Office for persistence when an Office-based application is started; this can include the use of Office Template Macros and add-ins.",
        "id": "3432",
        "mitigation": "Software Configuration",
        "mitigationid": "M1054",
        "technique": "Office Application Startup",
        "techniqueid": "T1137"
    },
    {
        "description": "Adversaries may abuse the Microsoft Office \"Office Test\" Registry key to obtain persistence on a compromised system. An Office Test Registry location exists that allows a user to specify an arbitrary DLL that will be executed every time an Office application is started. This Registry key is thought to be used by Microsoft to load DLLs for testing and debugging purposes while developing Office applications. This Registry key is not created by default during an Office installation.",
        "id": "3433",
        "mitigation": "Software Configuration",
        "mitigationid": "M1054",
        "technique": "Office Test",
        "techniqueid": "T1137.002"
    },
    {
        "description": "An adversary may steal web application or service session cookies and use them to gain access web applications or Internet services as an authenticated user without needing credentials. Web applications and services often use session cookies as an authentication token after a user has authenticated to a website.",
        "id": "3434",
        "mitigation": "Software Configuration",
        "mitigationid": "M1054",
        "technique": "Steal Web Session Cookie",
        "techniqueid": "T1539"
    },
    {
        "description": "Adversaries may undermine security controls that will either warn users of untrusted activity or prevent execution of untrusted programs. Operating systems and security products may contain mechanisms to identify programs or websites as possessing some level of trust. Examples of such features would include a program being allowed to run because it is signed by a valid code signing certificate, a program prompting the user with a warning because it has an attribute set from being downloaded from the Internet, or getting an indication that you are about to connect to an untrusted site.",
        "id": "3435",
        "mitigation": "Software Configuration",
        "mitigationid": "M1054",
        "technique": "Subvert Trust Controls",
        "techniqueid": "T1553"
    },
    {
        "description": "Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers. Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate. Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.",
        "id": "3436",
        "mitigation": "Software Configuration",
        "mitigationid": "M1054",
        "technique": "Install Root Certificate",
        "techniqueid": "T1553.004"
    },
    {
        "description": "Adversaries may create cloud instances in unused geographic service regions in order to evade detection. Access is usually obtained through compromising accounts used to manage cloud infrastructure.",
        "id": "3437",
        "mitigation": "Software Configuration",
        "mitigationid": "M1054",
        "technique": "Unused/Unsupported Cloud Regions",
        "techniqueid": "T1535"
    },
    {
        "description": "Adversaries can use stolen session cookies to authenticate to web applications and services. This technique bypasses some multi-factor authentication protocols since the session is already authenticated.",
        "id": "3438",
        "mitigation": "Software Configuration",
        "mitigationid": "M1054",
        "technique": "Web Session Cookie",
        "techniqueid": "T1550.004"
    },
    {
        "description": "Before compromising a victim, adversaries may execute active reconnaissance scans to gather information that can be used during targeting. Active scans are those where the adversary probes victim infrastructure via network traffic, as opposed to other forms of reconnaissance that do not involve direct interaction.",
        "id": "3439",
        "mitigation": "Pre-compromise",
        "mitigationid": "M1056",
        "technique": "Active Scanning",
        "techniqueid": "T1595"
    },
    {
        "description": "Before compromising a victim, adversaries may scan victim IP blocks to gather information that can be used during targeting. Public IP addresses may be allocated to organizations by block, or a range of sequential addresses.",
        "id": "3440",
        "mitigation": "Pre-compromise",
        "mitigationid": "M1056",
        "technique": "Scanning IP Blocks",
        "techniqueid": "T1595.001"
    },
    {
        "description": "Before compromising a victim, adversaries may scan victims for vulnerabilities that can be used during targeting. Vulnerability scans typically check if the configuration of a target host/application (ex: software and version) potentially aligns with the target of a specific exploit the adversary may seek to use.",
        "id": "3441",
        "mitigation": "Pre-compromise",
        "mitigationid": "M1056",
        "technique": "Vulnerability Scanning",
        "techniqueid": "T1595.002"
    },
    {
        "description": "Before compromising a victim, adversaries may gather information about the victim's networks that can be used during targeting. Information about networks may include a variety of details, including administrative data (ex: IP ranges, domain names, etc.) as well as specifics regarding its topology and operations.",
        "id": "3442",
        "mitigation": "Pre-compromise",
        "mitigationid": "M1056",
        "technique": "Gather Victim Network Information",
        "techniqueid": "T1590"
    },
    {
        "description": "Before compromising a victim, adversaries may gather information about the victim's DNS that can be used during targeting. DNS information may include a variety of details, including registered name servers as well as records that outline addressing for a target��s subdomains, mail servers, and other hosts.",
        "id": "3443",
        "mitigation": "Pre-compromise",
        "mitigationid": "M1056",
        "technique": "DNS",
        "techniqueid": "T1590.002"
    },
    {
        "description": "Before compromising a victim, adversaries may gather information about the victim's network domain(s) that can be used during targeting. Information about domains and their properties may include a variety of details, including what domain(s) the victim owns as well as administrative data (ex: name, registrar, etc.) and more directly actionable information such as contacts (email addresses and phone numbers), business addresses, and name servers.",
        "id": "3444",
        "mitigation": "Pre-compromise",
        "mitigationid": "M1056",
        "technique": "Domain Properties",
        "techniqueid": "T1590.001"
    },
    {
        "description": "Before compromising a victim, adversaries may gather the victim's IP addresses that can be used during targeting. Public IP addresses may be allocated to organizations by block, or a range of sequential addresses. Information about assigned IP addresses may include a variety of details, such as which IP addresses are in use. IP addresses may also enable an adversary to derive other details about a victim, such as organizational size, physical location(s), Internet service provider, and or where/how their publicly-facing infrastructure is hosted.",
        "id": "3445",
        "mitigation": "Pre-compromise",
        "mitigationid": "M1056",
        "technique": "IP Addresses",
        "techniqueid": "T1590.005"
    },
    {
        "description": "Before compromising a victim, adversaries may gather information about the victim's network security appliances that can be used during targeting. Information about network security appliances may include a variety of details, such as the existence and specifics of deployed firewalls, content filters, and proxies/bastion hosts. Adversaries may also target information about victim network-based intrusion detection systems (NIDS) or other appliances related to defensive cybersecurity operations.",
        "id": "3446",
        "mitigation": "Pre-compromise",
        "mitigationid": "M1056",
        "technique": "Network Security Appliances",
        "techniqueid": "T1590.006"
    },
    {
        "description": "Before compromising a victim, adversaries may gather information about the victim's network topology that can be used during targeting. Information about network topologies may include a variety of details, including the physical and/or logical arrangement of both external-facing and internal network environments. This information may also include specifics regarding network devices (gateways, routers, etc.) and other infrastructure.",
        "id": "3447",
        "mitigation": "Pre-compromise",
        "mitigationid": "M1056",
        "technique": "Network Topology",
        "techniqueid": "T1590.004"
    },
    {
        "description": "",
        "id": "3448",
        "mitigation": "",
        "mitigationid": "",
        "technique": "",
        "techniqueid": ""
    },
    {
        "description": "Adversaries may use SID-History Injection to escalate privileges and bypass access controls. The Windows security identifier (SID) is a unique value that identifies a user or group account. SIDs are used by Windows security in both security descriptors and access tokens. An account can hold additional SIDs in the SID-History Active Directory attribute , allowing inter-operable account migration between domains (e.g., all values in SID-History are included in access tokens).",
        "id": "3449",
        "mitigation": "Active Directory Configuration",
        "mitigationid": "M1015",
        "technique": "SID-History Injection",
        "techniqueid": "T1134.005"
    },
    {
        "description": "An adversary may forge SAML tokens with any permissions claims and lifetimes if they possess a valid SAML token-signing certificate. The default lifetime of a SAML token is one hour, but the validity period can be specified in the?NotOnOrAfter?value of the?conditions ...?element in a token. This value can be changed using the?AccessTokenLifetime?in a?LifetimeTokenPolicy. Forged SAML tokens enable adversaries to authenticate across services that use SAML 2.0 as an SSO (single sign-on) mechanism.",
        "id": "3450",
        "mitigation": "Active Directory Configuration",
        "mitigationid": "M1015",
        "technique": "SAML Tokens",
        "techniqueid": "T1606.002"
    },
    {
        "description": "Adversaries may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password, from the operating system and software. Credentials can then be used to perform?Lateral Movement?and access restricted information.",
        "id": "3451",
        "mitigation": "Active Directory Configuration",
        "mitigationid": "M1015",
        "technique": "OS Credential Dumping",
        "techniqueid": "T1003"
    },
    {
        "description": "Adversaries may attempt to access credentials and other sensitive information by abusing a Windows Domain Controller's application programming interface (API) to simulate the replication process from a remote domain controller using a technique called DCSync.",
        "id": "3452",
        "mitigation": "Active Directory Configuration",
        "mitigationid": "M1015",
        "technique": "DCSync",
        "techniqueid": "T1003.006"
    },
    {
        "description": "Adversaries may attempt to access cached domain credentials used to allow authentication to occur in the event a domain controller is unavailable.",
        "id": "3453",
        "mitigation": "Active Directory Configuration",
        "mitigationid": "M1015",
        "technique": "Cached Domain Credentials",
        "techniqueid": "T1003.005"
    },
    {
        "description": "Adversaries may gain access to and use third-party software suites installed within an enterprise network, such as administration, monitoring, and deployment systems, to move laterally through the network. Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, VNC, HBSS, Altiris, etc.).",
        "id": "3454",
        "mitigation": "Active Directory Configuration",
        "mitigationid": "M1015",
        "technique": "Software Deployment Tools",
        "techniqueid": "T1072"
    },
    {
        "description": "Adversaries may attempt to subvert Kerberos authentication by stealing or forging Kerberos tickets to enable?Pass the Ticket.",
        "id": "3455",
        "mitigation": "Active Directory Configuration",
        "mitigationid": "M1015",
        "technique": "Steal or Forge Kerberos Tickets",
        "techniqueid": "T1558"
    },
    {
        "description": "Adversaries who have the KRBTGT account password hash may forge Kerberos ticket-granting tickets (TGT), also known as a golden ticket. Golden tickets enable adversaries to generate authentication material for any account in Active Directory.",
        "id": "3456",
        "mitigation": "Active Directory Configuration",
        "mitigationid": "M1015",
        "technique": "Golden Ticket",
        "techniqueid": "T1558.001"
    },
    {
        "description": "Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g.?Bash History), operating system or application-specific repositories (e.g.?Credentials in Registry), or other specialized files/artifacts (e.g.?Private Keys).",
        "id": "3457",
        "mitigation": "Active Directory Configuration",
        "mitigationid": "M1015",
        "technique": "Unsecured Credentials",
        "techniqueid": "T1552"
    },
    {
        "description": "Adversaries may attempt to find unsecured credentials in Group Policy Preferences (GPP). GPP are tools that allow administrators to create domain policies with embedded credentials. These policies allow administrators to set local accounts.",
        "id": "3458",
        "mitigation": "Active Directory Configuration",
        "mitigationid": "M1015",
        "technique": "Group Policy Preferences",
        "techniqueid": "T1552.006"
    },
    {
        "description": "Adversaries may \"pass the ticket\" using stolen Kerberos tickets to move laterally within an environment, bypassing normal system access controls. Pass the ticket (PtT) is a method of authenticating to a system using Kerberos tickets without having access to an account's password. Kerberos authentication can be used as the first step to lateral movement to a remote system.",
        "id": "3459",
        "mitigation": "Active Directory Configuration",
        "mitigationid": "M1015",
        "technique": "Pass the Ticket",
        "techniqueid": "T1550.003"
    },
    {
        "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.?A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.",
        "id": "3460",
        "mitigation": "Vulnerability Scanning",
        "mitigationid": "M1016",
        "technique": "Exploitation of Remote Services",
        "techniqueid": "T1210"
    },
    {
        "description": "Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk. An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.",
        "id": "3461",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Abuse Elevation Control Mechanism",
        "techniqueid": "T1548"
    },
    {
        "description": "An adversary may perform shell escapes or exploit vulnerabilities in an application with the setsuid or setgid bits to get code running in a different user��s context. On Linux or macOS, when the setuid or setgid bits are set for an application, the application will run with the privileges of the owning user or group respectively. . Normally an application is run in the current user��s context, regardless of which user or group owns the application. However, there are instances where programs need to be executed in an elevated context to function properly, but the user running them doesn��t need the elevated privileges.",
        "id": "3462",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Setuid and Setgid",
        "techniqueid": "T1548.001"
    },
    {
        "description": "Adversaries may perform sudo caching and/or use the suoders file to elevate privileges. Adversaries may do this to execute commands as other users or spawn processes with higher privileges.",
        "id": "3463",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Sudo and Sudo Caching",
        "techniqueid": "T1548.003"
    },
    {
        "description": "Adversaries may attempt to get a listing of accounts on a system or within an environment. This information can help adversaries determine which accounts exist to aid in follow-on behavior.",
        "id": "3464",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Account Discovery",
        "techniqueid": "T1087"
    },
    {
        "description": "Adversaries may attempt to get a listing of local system accounts. This information can help adversaries determine which local accounts exist on a system to aid in follow-on behavior.",
        "id": "3465",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Local Account",
        "techniqueid": "T1087.001"
    },
    {
        "description": "Adversaries may attempt to get a listing of domain accounts. This information can help adversaries determine which domain accounts exist to aid in follow-on behavior.",
        "id": "3466",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Domain Account",
        "techniqueid": "T1087.002"
    },
    {
        "description": "Adversaries may manipulate accounts to maintain access to victim systems. Account manipulation may consist of any action that preserves adversary access to a compromised account, such as modifying credentials or permission groups. These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials. In order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain.",
        "id": "3467",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Account Manipulation",
        "techniqueid": "T1098"
    },
    {
        "description": "Adversaries may abuse BITS jobs to persistently execute or clean up after malicious payloads. Windows Background Intelligent Transfer Service (BITS) is a low-bandwidth, asynchronous file transfer mechanism exposed through?Component Object Model?(COM). BITS is commonly used by updaters, messengers, and other applications preferred to operate in the background (using available idle bandwidth) without interrupting other networked applications. File transfer tasks are implemented as BITS jobs, which contain a queue of one or more file operations.",
        "id": "3468",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "BITS Jobs",
        "techniqueid": "T1197"
    },
    {
        "description": "Adversaries can perform command and control between compromised hosts on potentially disconnected networks using removable media to transfer commands from system to system. Both systems would need to be compromised, with the likelihood that an Internet-connected system was compromised first and the second through lateral movement by?Replication Through Removable Media. Commands and files would be relayed from the disconnected system to the Internet-connected system to which the adversary has direct access.",
        "id": "3469",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Communication Through Removable Media",
        "techniqueid": "T1092"
    },
    {
        "description": "Adversaries may create an account to maintain access to victim systems. With a sufficient level of access, creating such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.",
        "id": "3470",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Create Account",
        "techniqueid": "T1136"
    },
    {
        "description": "Adversaries may create a domain account to maintain access to victim systems. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover user, administrator, and service accounts. With a sufficient level of access, the?net user /add /domain?command can be used to create a domain account.",
        "id": "3471",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Domain Account",
        "techniqueid": "T1136.002"
    },
    {
        "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by accessibility features. Windows contains accessibility features that may be launched with a key combination before a user has logged in (ex: when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system.",
        "id": "3472",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Accessibility Features",
        "techniqueid": "T1546.008"
    },
    {
        "description": "Adversaries may attempt to exfiltrate data over a different network medium than the command and control channel. If the command and control network is a wired Internet connection, the exfiltration may occur, for example, over a WiFi connection, modem, cellular data connection, Bluetooth, or another radio frequency (RF) channel.",
        "id": "3473",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Exfiltration Over Other Network Medium",
        "techniqueid": "T1011"
    },
    {
        "description": "Adversaries may attempt to exfiltrate data over Bluetooth rather than the command and control channel. If the command and control network is a wired Internet connection, an attacker may opt to exfiltrate data using a Bluetooth communication channel.",
        "id": "3474",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Exfiltration Over Bluetooth",
        "techniqueid": "T1011.001"
    },
    {
        "description": "Adversaries may use hidden users to mask the presence of user accounts they create. Every user account in macOS has a userID associated with it. When creating a user, you can specify the userID for that account.",
        "id": "3475",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Hidden Users",
        "techniqueid": "T1564.002"
    },
    {
        "description": "Adversaries may impair command history logging to hide commands they run on a compromised system. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done.",
        "id": "3476",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Impair Command History Logging",
        "techniqueid": "T1562.003"
    },
    {
        "description": "Adversaries may delete or remove built-in operating system data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery. Operating systems may contain features that can help fix corrupted systems, such as a backup catalog, volume shadow copies, and automatic repair features. Adversaries may disable or delete system recovery features to augment the effects of?Data Destruction?and?Data Encrypted for Impact.",
        "id": "3477",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Inhibit System Recovery",
        "techniqueid": "T1490"
    },
    {
        "description": "Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows or pluggable authentication modules (PAM) on Unix-based systems, responsible for gathering, storing, and validating credentials.",
        "id": "3478",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Modify Authentication Process",
        "techniqueid": "T1556"
    },
    {
        "description": "Adversaries may register malicious password filter dynamic link libraries (DLLs) into the authentication process to acquire user credentials as they are validated.",
        "id": "3479",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Password Filter DLL",
        "techniqueid": "T1556.002"
    },
    {
        "description": "Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and to identify potential systems of interest for Lateral Movement. Networks often contain shared network drives and folders that enable users to access file directories on various systems across a network.",
        "id": "3480",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Network Share Discovery",
        "techniqueid": "T1135"
    },
    {
        "description": "Adversaries may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password, from the operating system and software. Credentials can then be used to perform?Lateral Movement?and access restricted information.",
        "id": "3481",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "OS Credential Dumping",
        "techniqueid": "T1003"
    },
    {
        "description": "Adversaries may attempt to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS). After a user logs on, the system generates and stores a variety of credential materials in LSASS process memory. These credential materials can be harvested by an administrative user or SYSTEM and used to conduct?Lateral Movement?using?Use Alternate Authentication Material.",
        "id": "3482",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "LSASS Memory",
        "techniqueid": "T1003.001"
    },
    {
        "description": "Adversaries may attempt to extract credential material from the Security Account Manager (SAM) database either through in-memory techniques or through the Windows Registry where the SAM database is stored. The SAM is a database file that contains local accounts for the host, typically those found with the?net user?command. Enumerating the SAM database requires SYSTEM level access.",
        "id": "3483",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Security Account Manager",
        "techniqueid": "T1003.002"
    },
    {
        "description": "Adversaries may attempt to access cached domain credentials used to allow authentication to occur in the event a domain controller is unavailable.",
        "id": "3484",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Cached Domain Credentials",
        "techniqueid": "T1003.005"
    },
    {
        "description": "Adversaries may abuse netbooting to load an unauthorized network device operating system from a Trivial File Transfer Protocol (TFTP) server. TFTP boot (netbooting) is commonly used by network administrators to load configuration-controlled network device images from a centralized management server. Netbooting is one option in the boot sequence and can be used to centralize, manage, and control device images.",
        "id": "3485",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "TFTP Boot",
        "techniqueid": "T1542.005"
    },
    {
        "description": "Adversaries may hijack a legitimate user��s remote desktop session to move laterally within an environment. Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).",
        "id": "3486",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "RDP Hijacking",
        "techniqueid": "T1563.002"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.",
        "id": "3487",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Remote Desktop Protocol",
        "techniqueid": "T1021.001"
    },
    {
        "description": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically requires being a member of an admin or otherwise privileged group on the remote system.",
        "id": "3488",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Scheduled Task/Job",
        "techniqueid": "T1053"
    },
    {
        "description": "Adversaries may abuse the?at.exe?utility to perform task scheduling for initial or recurring execution of malicious code. The?at?utility exists as an executable within Windows for scheduling tasks at a specified time and date. Using?at?requires that the Task Scheduler service be running, and the user to be logged on as a member of the local Administrators group.",
        "id": "3489",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "At (Windows)",
        "techniqueid": "T1053.002"
    },
    {
        "description": "Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The?schtasks?can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task.",
        "id": "3490",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Scheduled Task",
        "techniqueid": "T1053.005"
    },
    {
        "description": "Adversaries may undermine security controls that will either warn users of untrusted activity or prevent execution of untrusted programs. Operating systems and security products may contain mechanisms to identify programs or websites as possessing some level of trust. Examples of such features would include a program being allowed to run because it is signed by a valid code signing certificate, a program prompting the user with a warning because it has an attribute set from being downloaded from the Internet, or getting an indication that you are about to connect to an untrusted site.",
        "id": "3491",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Subvert Trust Controls",
        "techniqueid": "T1553"
    },
    {
        "description": "Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers. Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate. Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.",
        "id": "3492",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Install Root Certificate",
        "techniqueid": "T1553.004"
    },
    {
        "description": "Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g.?Bash History), operating system or application-specific repositories (e.g.?Credentials in Registry), or other specialized files/artifacts (e.g.?Private Keys).",
        "id": "3493",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Unsecured Credentials",
        "techniqueid": "T1552"
    },
    {
        "description": "Adversaries may search the bash command history on compromised systems for insecurely stored credentials. Bash keeps track of the commands users type on the command-line with the \"history\" utility. Once a user logs out, the history is flushed to the user��s?.bash_history?file. For each user, this file resides at the same location:?~/.bash_history. Typically, this file keeps track of the user��s last 500 commands. Users often type usernames and passwords on the command-line as parameters to programs, which then get saved to this file when they log out. Attackers can abuse this by looking through the file for potential credentials.",
        "id": "3494",
        "mitigation": "Operating System Configuration",
        "mitigationid": "M1028",
        "technique": "Bash History",
        "techniqueid": "T1552.003"
    },
    {
        "description": "Adversaries may modify the SSH?authorized_keys?file to maintain persistence on a victim host. Linux distributions and macOS commonly use key-based authentication to secure the authentication process of SSH sessions for remote management. The?authorized_keys?file in SSH specifies the SSH keys that can be used for logging into the user account for which the file is configured. This file is usually found in the user's home directory under?<user-home>/.ssh/authorized_keys. Users may edit the system��s SSH config file to modify the directives PubkeyAuthentication and RSAAuthentication to the value \"yes\" to ensure public key and RSA authentication are enabled. The SSH config file is usually located under?/etc/ssh/sshd_config.",
        "id": "3495",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "SSH Authorized Keys",
        "techniqueid": "T1098.004"
    },
    {
        "description": "Adversaries may modify plist files to automatically run an application when a user logs in. Starting in Mac OS X 10.7 (Lion), users can specify certain applications to be re-opened when a user logs into their machine after reboot. While this is usually done via a Graphical User Interface (GUI) on an app-by-app basis, there are property list files (plist) that contain this information as well located at?~/Library/Preferences/com.apple.loginwindow.plist?and?~/Library/Preferences/ByHost/com.apple.loginwindow.* .plist.",
        "id": "3496",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Re-opened Applications",
        "techniqueid": "T1547.007"
    },
    {
        "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of?Unix Shell?while Windows installations include the?Windows Command Shell?and?PowerShell.",
        "id": "3497",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Command and Scripting Interpreter",
        "techniqueid": "T1059"
    },
    {
        "description": "Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the?Start-Process?cmdlet which can be used to run an executable and the?Invoke-Command?cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).",
        "id": "3498",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "PowerShell",
        "techniqueid": "T1059.001"
    },
    {
        "description": "Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as?Component Object Model?and the?Native API?through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.",
        "id": "3499",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Visual Basic",
        "techniqueid": "T1059.005"
    },
    {
        "description": "Adversaries may abuse JavaScript and/or JScript for execution. JavaScript (JS) is a platform-agnostic scripting language (compiled just-in-time at runtime) commonly associated with scripts in webpages, though JS can be executed in runtime environments outside the browser.",
        "id": "3500",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "JavaScript/JScript",
        "techniqueid": "T1059.007"
    },
    {
        "description": "Adversaries can perform command and control between compromised hosts on potentially disconnected networks using removable media to transfer commands from system to system. Both systems would need to be compromised, with the likelihood that an Internet-connected system was compromised first and the second through lateral movement by?Replication Through Removable Media. Commands and files would be relayed from the disconnected system to the Internet-connected system to which the adversary has direct access.",
        "id": "3501",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Communication Through Removable Media",
        "techniqueid": "T1092"
    },
    {
        "description": "Adversaries may establish persistence by executing malicious content triggered by user inactivity. Screensavers are programs that execute after a configurable time of user inactivity and consist of Portable Executable (PE) files with a .scr file extension. The Windows screensaver application scrnsave.scr is located in?C:\\Windows\\System32\\, and?C:\\Windows\\sysWOW64\\?on 64-bit Windows systems, along with screensavers included with base Windows installations.",
        "id": "3502",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Screensaver",
        "techniqueid": "T1546.002"
    },
    {
        "description": "Adversaries may gain persistence and elevate privileges by executing malicious content triggered by the Event Monitor Daemon (emond). Emond is a?Launch Daemon?that accepts events from various services, runs them through a simple rules engine, and takes action. The emond binary at?/sbin/emond?will load any rules from the?/etc/emond.d/rules/?directory and take action once an explicitly defined event takes place.",
        "id": "3503",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Emond",
        "techniqueid": "T1546.014"
    },
    {
        "description": "Adversaries may attempt to exfiltrate data over Bluetooth rather than the command and control channel. If the command and control network is a wired Internet connection, an attacker may opt to exfiltrate data using a Bluetooth communication channel.",
        "id": "3504",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Exfiltration Over Bluetooth",
        "techniqueid": "T1011.001"
    },
    {
        "description": "Adversaries may attempt to exfiltrate data via a physical medium, such as a removable drive. In certain circumstances, such as an air-gapped network compromise, exfiltration could occur via a physical medium or device introduced by a user. Such media could be an external hard drive, USB drive, cellular phone, MP3 player, or other removable storage and processing device. The physical medium or device could be used as the final exfiltration point or to hop between otherwise disconnected systems.",
        "id": "3505",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Exfiltration Over Physical Medium",
        "techniqueid": "T1052"
    },
    {
        "description": "Adversaries may attempt to exfiltrate data over a USB connected physical device. In certain circumstances, such as an air-gapped network compromise, exfiltration could occur via a USB device introduced by a user. The USB device could be used as the final exfiltration point or to hop between otherwise disconnected systems.",
        "id": "3506",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Exfiltration over USB",
        "techniqueid": "T1052.001"
    },
    {
        "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.?A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.",
        "id": "3507",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Exploitation of Remote Services",
        "techniqueid": "T1210"
    },
    {
        "description": "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as?Windows Remote Management?can also be used externally.",
        "id": "3508",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "External Remote Services",
        "techniqueid": "T1133"
    },
    {
        "description": "Adversaries may carry out malicious operations using a virtual instance to avoid detection. A wide variety of virtualization technologies exist that allow for the emulation of a computer or computing environment. By running malicious code inside of a virtual instance, adversaries can hide artifacts associated with their behavior from security tools that are unable to monitor activity inside the virtual instance. Additionally, depending on the virtual networking implementation (ex: bridged adapter), network traffic generated by the virtual instance can be difficult to trace back to the compromised host as the IP address and hostname might not match known values.",
        "id": "3509",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Run Virtual Instance",
        "techniqueid": "T1564.006"
    },
    {
        "description": "Adversaries may hide malicious Visual Basic for Applications (VBA) payloads embedded within MS Office documents by replacing the VBA source code with benign data.",
        "id": "3510",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "VBA Stomping",
        "techniqueid": "T1564.007"
    },
    {
        "description": "Adversaries may abuse inter-process communication (IPC) mechanisms for local code or command execution. IPC is typically used by processes to share data, communicate with each other, or synchronize execution. IPC is also commonly used to avoid situations such as deadlocks, which occurs when processes are stuck in a cyclic waiting pattern.",
        "id": "3511",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Inter-Process Communication",
        "techniqueid": "T1559"
    },
    {
        "description": "Adversaries may use Windows Dynamic Data Exchange (DDE) to execute arbitrary commands. DDE is a client-server protocol for one-time and/or continuous inter-process communication (IPC) between applications. Once a link is established, applications can autonomously exchange transactions consisting of strings, warm data links (notifications when a data item changes), hot data links (duplications of changes to a data item), and requests for command execution.",
        "id": "3512",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Dynamic Data Exchange",
        "techniqueid": "T1559.002"
    },
    {
        "description": "Adversaries may attempt to position themselves between two or more networked devices using a man-in-the-middle (MiTM) technique to support follow-on behaviors such as?Network Sniffing?or?Transmitted Data Manipulation. By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.",
        "id": "3513",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Man-in-the-Middle",
        "techniqueid": "T1557"
    },
    {
        "description": "By responding to LLMNR/NBT-NS network traffic, adversaries may spoof an authoritative source for name resolution to force communication with an adversary controlled system. This activity may be used to collect or relay authentication materials.",
        "id": "3514",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "LLMNR/NBT-NS Poisoning and SMB Relay",
        "techniqueid": "T1557.001"
    },
    {
        "description": "Adversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such as?Network Sniffing?or?Transmitted Data Manipulation.",
        "id": "3515",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "ARP Cache Poisoning",
        "techniqueid": "T1557.002"
    },
    {
        "description": "Adversaries may leverage Microsoft Office-based applications for persistence between startups. Microsoft Office is a fairly common application suite on Windows-based operating systems within an enterprise network. There are multiple mechanisms that can be used with Office for persistence when an Office-based application is started; this can include the use of Office Template Macros and add-ins.",
        "id": "3516",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Office Application Startup",
        "techniqueid": "T1137"
    },
    {
        "description": "Adversaries may abuse Microsoft Office templates to obtain persistence on a compromised system. Microsoft Office contains templates that are part of common Office applications and are used to customize styles. The base templates within the application are used each time an application starts.",
        "id": "3517",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Office Template Macros",
        "techniqueid": "T1137.001"
    },
    {
        "description": "Adversaries may take control of preexisting sessions with remote services to move laterally in an environment. Users may use valid credentials to log into a service specifically designed to accept remote connections, such as telnet, SSH, and RDP. When a user logs into a service, a session will be established that will allow them to maintain a continuous interaction with that service.",
        "id": "3518",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Remote Service Session Hijacking",
        "techniqueid": "T1563"
    },
    {
        "description": "Adversaries may hijack a legitimate user's SSH session to move laterally within an environment. Secure Shell (SSH) is a standard means of remote access on Linux and macOS systems. It allows a user to connect to another system via an encrypted tunnel, commonly authenticating through a password, certificate or the use of an asymmetric encryption key pair.",
        "id": "3519",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "SSH Hijacking",
        "techniqueid": "T1563.001"
    },
    {
        "description": "Adversaries may hijack a legitimate user��s remote desktop session to move laterally within an environment. Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).",
        "id": "3520",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "RDP Hijacking",
        "techniqueid": "T1563.002"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.",
        "id": "3521",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Remote Desktop Protocol",
        "techniqueid": "T1021.001"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to interact with remote machines by taking advantage of Distributed Component Object Model (DCOM). The adversary may then perform actions as the logged-on user.",
        "id": "3522",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Distributed Component Object Model",
        "techniqueid": "T1021.003"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into remote machines using Secure Shell (SSH). The adversary may then perform actions as the logged-on user.",
        "id": "3523",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "SSH",
        "techniqueid": "T1021.004"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to remotely control machines using Virtual Network Computing (VNC). The adversary may then perform actions as the logged-on user.",
        "id": "3524",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "VNC",
        "techniqueid": "T1021.005"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to interact with remote systems using Windows Remote Management (WinRM). The adversary may then perform actions as the logged-on user.",
        "id": "3525",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Windows Remote Management",
        "techniqueid": "T1021.006"
    },
    {
        "description": "Adversaries may move onto systems, possibly those on disconnected or air-gapped networks, by copying malware to removable media and taking advantage of Autorun features when the media is inserted into a system and executes. In the case of Lateral Movement, this may occur through modification of executable files stored on removable media or by copying malware and renaming it to look like a legitimate file to trick users into executing it on a separate system. In the case of Initial Access, this may occur through manual manipulation of the media, modification of systems used to initially format the media, or modification to the media's firmware itself.",
        "id": "3526",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Replication Through Removable Media",
        "techniqueid": "T1091"
    },
    {
        "description": "Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed binaries. Binaries signed with trusted digital certificates can execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files.",
        "id": "3527",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Signed Binary Proxy Execution",
        "techniqueid": "T1218"
    },
    {
        "description": "Adversaries may abuse CMSTP to proxy execution of malicious code. The Microsoft Connection Manager Profile Installer (CMSTP.exe) is a command-line program used to install Connection Manager service profiles. CMSTP.exe accepts an installation information file (INF) as a parameter and installs a service profile leveraged for remote access connections.",
        "id": "3528",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "CMSTP",
        "techniqueid": "T1218.003"
    },
    {
        "description": "Adversaries may use InstallUtil to proxy execution of code through a trusted Windows utility. InstallUtil is a command-line utility that allows for installation and uninstallation of resources by executing specific installer components specified in .NET binaries. InstallUtil is digitally signed by Microsoft and located in the .NET directories on a Windows system:?C:\\Windows\\Microsoft.NET\\Framework\\v\\InstallUtil.exe?and?C:\\Windows\\Microsoft.NET\\Framework64\\v\\InstallUtil.exe.",
        "id": "3529",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "InstallUtil",
        "techniqueid": "T1218.004"
    },
    {
        "description": "Adversaries may abuse mshta.exe to proxy execution of malicious .hta files and Javascript or VBScript through a trusted Windows utility. There are several examples of different types of threats leveraging mshta.exe during initial compromise and for execution of code",
        "id": "3530",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Mshta",
        "techniqueid": "T1218.005"
    },
    {
        "description": "Adversaries may abuse Regsvcs and Regasm to proxy execution of code through a trusted Windows utility. Regsvcs and Regasm are Windows command-line utilities that are used to register .NET?Component Object Model?(COM) assemblies. Both are digitally signed by Microsoft.",
        "id": "3531",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Regsvcs/Regasm",
        "techniqueid": "T1218.009"
    },
    {
        "description": "Adversaries may abuse odbcconf.exe to proxy execution of malicious payloads. Odbcconf.exe is a Windows utility that allows you to configure Open Database Connectivity (ODBC) drivers and data source names. Odbcconf.exe is digitally signed by Microsoft.",
        "id": "3532",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Odbcconf",
        "techniqueid": "T1218.008"
    },
    {
        "description": "Adversaries may abuse verclsid.exe to proxy execution of malicious code. Verclsid.exe is known as the Extension CLSID Verification Host and is responsible for verifying each shell extension before they are used by Windows Explorer or the Windows Shell.",
        "id": "3533",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Verclsid",
        "techniqueid": "T1218.012"
    },
    {
        "description": "Adversaries may create or modify references in Office document templates to conceal malicious code or force authentication attempts. Microsoft��s Office Open XML (OOXML) specification defines an XML-based format for Office documents (.docx, xlsx, .pptx) to replace older binary formats (.doc, .xls, .ppt). OOXML files are packed together ZIP archives compromised of various XML files, referred to as parts, containing properties that collectively define how a document is rendered.",
        "id": "3534",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Template Injection",
        "techniqueid": "T1221"
    },
    {
        "description": "Adversaries may take advantage of trusted developer utilities to proxy execution of malicious payloads. There are many utilities used for software development related tasks that can be used to execute code in various forms to assist in development, debugging, and reverse engineering. These utilities may often be signed with legitimate certificates that allow them to execute on a system and proxy execution of malicious code through a trusted process that effectively bypasses application control solutions.",
        "id": "3535",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Trusted Developer Utilities Proxy Execution",
        "techniqueid": "T1127"
    },
    {
        "description": "Adversaries may use MSBuild to proxy execution of code through a trusted Windows utility. MSBuild.exe (Microsoft Build Engine) is a software build platform used by Visual Studio. It handles XML formatted project files that define requirements for loading and building various platforms and configurations.",
        "id": "3536",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "MSBuild",
        "techniqueid": "T1127.001"
    },
    {
        "description": "Adversaries may attempt to access the Cloud Instance Metadata API to collect credentials and other sensitive data.",
        "id": "3537",
        "mitigation": "Disable or Remove Feature or Program",
        "mitigationid": "M1042",
        "technique": "Cloud Instance Metadata API",
        "techniqueid": "T1552.005"
    },
    {
        "description": "Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk. An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.",
        "id": "3538",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Abuse Elevation Control Mechanism",
        "techniqueid": "T1548"
    },
    {
        "description": "Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.",
        "id": "3539",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Bypass User Account Control",
        "techniqueid": "T1548.002"
    },
    {
        "description": "Adversaries may attempt to get a listing of cloud accounts. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application.",
        "id": "3540",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Cloud Account",
        "techniqueid": "T1087.004"
    },
    {
        "description": "An adversary may compress and/or encrypt data that is collected prior to exfiltration. Compressing the data can help to obfuscate the collected data and minimize the amount of data sent over the network. Encryption can be used to hide information that is being exfiltrated from detection or make exfiltration less conspicuous upon inspection by a defender.",
        "id": "3541",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Archive Collected Data",
        "techniqueid": "T1560"
    },
    {
        "description": "An adversary may compress or encrypt data that is collected prior to exfiltration using 3rd party utilities. Many utilities exist that can archive data, including 7-Zip, WinRAR, and WinZip. Most utilities include functionality to encrypt and/or compress data.",
        "id": "3542",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Archive via Utility",
        "techniqueid": "T1560.001"
    },
    {
        "description": "Adversaries may abuse Internet browser extensions to establish persistence access to victim systems. Browser extensions or plugins are small programs that can add functionality and customize aspects of Internet browsers. They can be installed directly or through a browser's app store and generally have access and permissions to everything that the browser can access.",
        "id": "3543",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Browser Extensions",
        "techniqueid": "T1176"
    },
    {
        "description": "Adversaries may abuse Python commands and scripts for execution. Python is a very popular scripting/programming language, with capabilities to perform many functions. Python can be executed interactively from the command-line (via the?python.exe?interpreter) or via scripts (.py) that can be written and distributed to different systems. Python code can also be compiled into binary executables.",
        "id": "3544",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Python",
        "techniqueid": "T1059.006"
    },
    {
        "description": "Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services. On macOS, launchd processes known as?Launch Daemon?and?Launch Agent?are run to finish system initialization and load user specific parameters.",
        "id": "3545",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Create or Modify System Process",
        "techniqueid": "T1543"
    },
    {
        "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry. Service configurations can be modified using utilities such as sc.exe and?Reg.",
        "id": "3546",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Windows Service",
        "techniqueid": "T1543.003"
    },
    {
        "description": "Adversaries may access data objects from improperly secured cloud storage.",
        "id": "3547",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Data from Cloud Storage Object",
        "techniqueid": "T1530"
    },
    {
        "description": "Adversaries may leverage information repositories to mine valuable information. Information repositories are tools that allow for storage of information, typically to facilitate collaboration or information sharing between users, and can store a wide variety of data that may aid adversaries in further objectives, or direct access to the target information.",
        "id": "3548",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Data from Information Repositories",
        "techniqueid": "T1213"
    },
    {
        "description": "Adversaries may leverage Confluence repositories to mine valuable information. Often found in development environments alongside Atlassian JIRA, Confluence is generally used to store development-related documentation, however, in general may contain more diverse categories of useful information, such as:",
        "id": "3549",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Confluence",
        "techniqueid": "T1213.001"
    },
    {
        "description": "Adversaries may leverage the SharePoint repository as a source to mine valuable information. SharePoint will often contain useful information for an adversary to learn about the structure and functionality of the internal network and systems. For example, the following is a list of example information that may hold potential value to an adversary and may also be found on SharePoint:",
        "id": "3550",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Sharepoint",
        "techniqueid": "T1213.002"
    },
    {
        "description": "Adversaries may modify the configuration settings of a domain to evade defenses and/or escalate privileges in domain environments. Domains provide a centralized means of managing how computer resources (ex: computers, user accounts) can act, and interact with each other, on a network. The policy of the domain also includes configuration settings that may apply between domains in a multi-domain/forest environment. Modifications to domain settings may include altering domain Group Policy Objects (GPOs) or changing trust settings for domains, including federation trusts.",
        "id": "3551",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Domain Policy Modification",
        "techniqueid": "T1484"
    },
    {
        "description": "Adversaries may modify Group Policy Objects (GPOs) to subvert the intended discretionary access controls for a domain, usually with the intention of escalating privileges on the domain. Group policy allows for centralized management of user and computer settings in Active Directory (AD). GPOs are containers for group policy settings made up of files stored within a predicable network path?\\<DOMAIN>\\SYSVOL\\<DOMAIN>\\Policies\\.",
        "id": "3552",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Group Policy Modification",
        "techniqueid": "T1484.001"
    },
    {
        "description": "Adversaries may attempt to gather information on domain trust relationships that may be used to identify lateral movement opportunities in Windows multi-domain/forest environments. Domain trusts provide a mechanism for a domain to allow access to resources based on the authentication procedures of another domain. Domain trusts allow the users of the trusted domain to access resources in the trusting domain. The information discovered may help the adversary conduct?SID-History Injection,?Pass the Ticket, and?Kerberoasting. Domain trusts can be enumerated using the?DSEnumerateDomainTrusts()?Win32 API call, .NET methods, and LDAP. The Windows utility?Nltest?is known to be used by adversaries to enumerate domain trusts.",
        "id": "3553",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Domain Trust Discovery",
        "techniqueid": "T1482"
    },
    {
        "description": "Adversaries may target user email to collect sensitive information. Emails may contain sensitive data, including trade secrets or personal information, that can prove valuable to adversaries. Adversaries can collect or forward email from mail servers or clients.",
        "id": "3554",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Email Collection",
        "techniqueid": "T1114"
    },
    {
        "description": "Adversaries may setup email forwarding rules to collect sensitive information. Adversaries may abuse email-forwarding rules to monitor the activities of a victim, steal information, and further gain intelligence on the victim or the victim��s organization to use as part of further exploits or operations. Outlook and Outlook Web App (OWA) allow users to create inbox rules for various email functions, including forwarding to a different recipient. Messages can be forwarded to internal or external recipients, and there are no restrictions limiting the extent of this rule. Administrators may also create forwarding rules for user accounts with the same considerations and outcomes.",
        "id": "3555",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Email Forwarding Rule",
        "techniqueid": "T1114.003"
    },
    {
        "description": "Adversaries may establish persistence by executing malicious content triggered by the execution of tainted binaries. Mach-O binaries have a series of headers that are used to perform certain operations when a binary is loaded. The LC_LOAD_DYLIB header in a Mach-O binary tells macOS and OS X which dynamic libraries (dylibs) to load during execution time. These can be added ad-hoc to the compiled binary as long as adjustments are made to the rest of the fields and dependencies. There are tools available to perform these changes.",
        "id": "3556",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "LC_LOAD_DYLIB Addition",
        "techniqueid": "T1546.006"
    },
    {
        "description": "Adversaries may forge credential materials that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies, tokens, or other materials to authenticate and authorize user access.",
        "id": "3557",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Forge Web Credentials",
        "techniqueid": "T1606"
    },
    {
        "description": "Adversaries may forge web cookies that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies to authenticate and authorize user access.",
        "id": "3558",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Web Cookies",
        "techniqueid": "T1606.001"
    },
    {
        "description": "An adversary may forge SAML tokens with any permissions claims and lifetimes if they possess a valid SAML token-signing certificate. The default lifetime of a SAML token is one hour, but the validity period can be specified in the?NotOnOrAfter?value of the?conditions ...?element in a token. This value can be changed using the?AccessTokenLifetime?in a?LifetimeTokenPolicy. Forged SAML tokens enable adversaries to authenticate across services that use SAML 2.0 as an SSO (single sign-on) mechanism.",
        "id": "3559",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "SAML Tokens",
        "techniqueid": "T1606.002"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.",
        "id": "3560",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Hijack Execution Flow",
        "techniqueid": "T1574"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the binaries used by services. Adversaries may use flaws in the permissions of Windows services to replace the binary that is executed upon service start. These service processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.",
        "id": "3561",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Services File Permissions Weakness",
        "techniqueid": "T1574.010"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the binaries used by an installer. These processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.",
        "id": "3562",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Executable Installer File Permissions Weakness",
        "techniqueid": "T1574.005"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking vulnerable file path references. Adversaries can take advantage of paths that lack surrounding quotations by placing an executable in a higher level directory within the path, so that Windows will choose the adversary's executable to launch.",
        "id": "3563",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Path Interception by Unquoted Path",
        "techniqueid": "T1574.009"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking environment variables used to load libraries. Adversaries may place a program in an earlier entry in the list of directories stored in the PATH environment variable, which Windows will then execute when it searches sequentially through that PATH listing in search of the binary that was called from a script or the command line.",
        "id": "3564",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Path Interception by PATH Environment Variable",
        "techniqueid": "T1574.007"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the search order used to load other programs. Because some programs do not call other programs using the full path, adversaries may place their own file in the directory where the calling program is located, causing the operating system to launch their malicious software at the request of the calling program.",
        "id": "3565",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Path Interception by Search Order Hijacking",
        "techniqueid": "T1574.008"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the search order used to load DLLs. Windows systems use a common method to look for required DLLs to load into a program. Hijacking DLL loads may be for the purpose of establishing persistence as well as elevating privileges and/or evading restrictions on file execution.",
        "id": "3566",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "DLL Search Order Hijacking",
        "techniqueid": "T1574.001"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the library manifest used to load DLLs. Adversaries may take advantage of vague references in the library manifest of a program by replacing a legitimate library with a malicious one, causing the operating system to load their malicious library when it is called for by the victim program.",
        "id": "3567",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "DLL Side-Loading",
        "techniqueid": "T1574.002"
    },
    {
        "description": "Adversaries may disable or modify a firewall within a cloud environment to bypass controls that limit access to cloud resources. Cloud firewalls are separate from system firewalls that are described in?Disable or Modify System Firewall.",
        "id": "3568",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Disable or Modify Cloud Firewall",
        "techniqueid": "T1562.007"
    },
    {
        "description": "Adversaries may implant cloud container images with malicious code to establish persistence. Amazon Web Service (AWS) Amazon Machine Images (AMI), Google Cloud Platform (GCP) Images, and Azure Images as well as popular container runtimes such as Docker can be implanted or backdoored. Depending on how the infrastructure is provisioned, this could provide persistent access if the infrastructure provisioning tool is instructed to always use the latest image.",
        "id": "3569",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Implant Container Image",
        "techniqueid": "T1525"
    },
    {
        "description": "An adversary may attempt to modify a cloud account's compute service infrastructure to evade defenses. A modification to the compute service infrastructure can include the creation, deletion, or modification of one or more components such as compute instances, virtual machines, and snapshots.",
        "id": "3570",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Modify Cloud Compute Infrastructure",
        "techniqueid": "T1578"
    },
    {
        "description": "An adversary may create a snapshot or data backup within a cloud account to evade defenses. A snapshot is a point-in-time copy of an existing cloud compute component such as a virtual machine (VM), virtual hard drive, or volume. An adversary may leverage permissions to create a snapshot in order to bypass restrictions that prevent access to existing compute service infrastructure, unlike in?Revert Cloud Instance?where an adversary may revert to a snapshot to evade detection and remove evidence of their presence.",
        "id": "3571",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Create Snapshot",
        "techniqueid": "T1578.001"
    },
    {
        "description": "An adversary may create a new instance or virtual machine (VM) within the compute service of a cloud account to evade defenses. Creating a new instance may allow an adversary to bypass firewall rules and permissions that exist on instances currently residing within an account. An adversary may?Create Snapshot?of one or more volumes in an account, create a new instance, mount the snapshots, and then apply a less restrictive security policy to collect?Data from Local System?or for?Remote Data Staging.",
        "id": "3572",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Create Cloud Instance",
        "techniqueid": "T1578.002"
    },
    {
        "description": "An adversary may delete a cloud instance after they have performed malicious activities in an attempt to evade detection and remove evidence of their presence. Deleting an instance or virtual machine can remove valuable forensic artifacts and other evidence of suspicious behavior if the instance is not recoverable.",
        "id": "3573",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Delete Cloud Instance",
        "techniqueid": "T1578.003"
    },
    {
        "description": "Adversaries may abuse netbooting to load an unauthorized network device operating system from a Trivial File Transfer Protocol (TFTP) server. TFTP boot (netbooting) is commonly used by network administrators to load configuration-controlled network device images from a centralized management server. Netbooting is one option in the boot sequence and can be used to centralize, manage, and control device images.",
        "id": "3574",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "TFTP Boot",
        "techniqueid": "T1542.005"
    },
    {
        "description": "Adversaries may abuse the ROM Monitor (ROMMON) by loading an unauthorized firmware with adversary code to provide persistent access and manipulate device behavior that is difficult to detect.",
        "id": "3575",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "ROMMONkit",
        "techniqueid": "T1542.004"
    },
    {
        "description": "Adversaries may hijack a legitimate user��s remote desktop session to move laterally within an environment. Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).",
        "id": "3576",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "RDP Hijacking",
        "techniqueid": "T1563.002"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.",
        "id": "3577",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Remote Desktop Protocol",
        "techniqueid": "T1021.001"
    },
    {
        "description": "Adversaries may use?Valid Accounts?to remotely control machines using Virtual Network Computing (VNC). The adversary may then perform actions as the logged-on user.",
        "id": "3578",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "VNC",
        "techniqueid": "T1021.005"
    },
    {
        "description": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically requires being a member of an admin or otherwise privileged group on the remote system.",
        "id": "3579",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Scheduled Task/Job",
        "techniqueid": "T1053"
    },
    {
        "description": "Adversaries may abuse the?at.exe?utility to perform task scheduling for initial or recurring execution of malicious code. The?at?utility exists as an executable within Windows for scheduling tasks at a specified time and date. Using?at?requires that the Task Scheduler service be running, and the user to be logged on as a member of the local Administrators group.",
        "id": "3580",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "At (Windows)",
        "techniqueid": "T1053.002"
    },
    {
        "description": "Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The?schtasks?can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task.",
        "id": "3581",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Scheduled Task",
        "techniqueid": "T1053.005"
    },
    {
        "description": "Adversaries may abuse the?at?utility to perform task scheduling for initial or recurring execution of malicious code. The?at?command within Linux operating systems enables administrators to schedule tasks.",
        "id": "3582",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "At (Linux)",
        "techniqueid": "T1053.001"
    },
    {
        "description": "Adversaries may abuse the?Launchd?daemon to perform task scheduling for initial or recurring execution of malicious code. The?launchd?daemon, native to macOS, is responsible for loading and maintaining services within the operating system. This process loads the parameters for each launch-on-demand system-level daemon from the property list (plist) files found in?/System/Library/LaunchDaemons?and?/Library/LaunchDaemons?. These LaunchDaemons have property list files which point to the executables that will be launched .",
        "id": "3583",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Launchd",
        "techniqueid": "T1053.004"
    },
    {
        "description": "Adversaries may abuse the?cron?utility to perform task scheduling for initial or recurring execution of malicious code. The?cron?utility is a time-based job scheduler for Unix-like operating systems. The?crontab?file contains the schedule of cron entries to be run and the specified times for execution. Any?crontab?files are stored in operating system-specific file paths.",
        "id": "3584",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Cron",
        "techniqueid": "T1053.003"
    },
    {
        "description": "Adversaries may abuse legitimate extensible development features of servers to establish persistent access to systems. Enterprise server applications may include features that allow developers to write and install software or scripts to extend the functionality of the main application. Adversaries may install malicious components to extend and abuse server applications.",
        "id": "3585",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Server Software Component",
        "techniqueid": "T1505"
    },
    {
        "description": "Adversaries may abuse Microsoft transport agents to establish persistent access to systems. Microsoft Exchange transport agents can operate on email messages passing through the transport pipeline to perform various tasks such as filtering spam, filtering malicious attachments, journaling, or adding a corporate signature to the end of all outgoing emails. Transport agents can be written by application developers and then compiled to .NET assemblies that are subsequently registered with the Exchange server. Transport agents will be invoked during a specified stage of email processing and carry out developer defined tasks.",
        "id": "3586",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Transport Agent",
        "techniqueid": "T1505.002"
    },
    {
        "description": "Adversaries may abuse SQL stored procedures to establish persistent access to systems. SQL Stored Procedures are code that can be saved and reused so that database users do not waste time rewriting frequently used SQL queries. Stored procedures can be invoked via SQL statements to the database using the procedure name or via defined events (e.g. when a SQL server application is started/restarted).",
        "id": "3587",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "SQL Stored Procedures",
        "techniqueid": "T1505.001"
    },
    {
        "description": "Adversaries can steal user application access tokens as a means of acquiring credentials to access remote systems and resources. This can occur through social engineering and typically requires user action to grant access.",
        "id": "3588",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Steal Application Access Token",
        "techniqueid": "T1528"
    },
    {
        "description": "Adversaries may reveal credentials of accounts that have disabled Kerberos preauthentication by?Password Cracking?Kerberos messages.",
        "id": "3589",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "AS-REP Roasting",
        "techniqueid": "T1558.004"
    },
    {
        "description": "Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g.?Bash History), operating system or application-specific repositories (e.g.?Credentials in Registry), or other specialized files/artifacts (e.g.?Private Keys).",
        "id": "3590",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Unsecured Credentials",
        "techniqueid": "T1552"
    },
    {
        "description": "Adversaries may search local file systems and remote file shares for files containing insecurely stored credentials. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.",
        "id": "3591",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Credentials In Files",
        "techniqueid": "T1552.001"
    },
    {
        "description": "Adversaries may search the Registry on compromised systems for insecurely stored credentials. The Windows Registry stores configuration information that can be used by the system or other programs. Adversaries may query the Registry looking for credentials and passwords that have been stored for use by other programs or services. Sometimes these credentials are used for automatic logons.",
        "id": "3592",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Credentials in Registry",
        "techniqueid": "T1552.002"
    },
    {
        "description": "Adversaries may search for private key certificate files on compromised systems for insecurely stored credentials. Private cryptographic keys and certificates are used for authentication, encryption/decryption, and digital signatures. Common key and certificate file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, .pfx, .cer, .p7b, .asc.",
        "id": "3593",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Private Keys",
        "techniqueid": "T1552.004"
    },
    {
        "description": "Adversaries may attempt to find unsecured credentials in Group Policy Preferences (GPP). GPP are tools that allow administrators to create domain policies with embedded credentials. These policies allow administrators to set local accounts.",
        "id": "3594",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Group Policy Preferences",
        "techniqueid": "T1552.006"
    },
    {
        "description": "Adversaries may use stolen application access tokens to bypass the typical authentication process and access restricted accounts, information, or services on remote systems. These tokens are typically stolen from users and used in lieu of login credentials.",
        "id": "3595",
        "mitigation": "Audit",
        "mitigationid": "M1047",
        "technique": "Application Access Token",
        "techniqueid": "T1550.001"
    },
    {
        "description": "Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.",
        "id": "3596",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Bypass User Account Control",
        "techniqueid": "T1548.002"
    },
    {
        "description": "Adversaries may collect data related to managed devices from configuration repositories. Configuration repositories are used by management systems in order to configure, manage, and control data on remote systems. Configuration repositories may also facilitate remote access and administration of devices.",
        "id": "3597",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Data from Configuration Repository",
        "techniqueid": "T1602"
    },
    {
        "description": "Adversaries may target the Management Information Base (MIB) to collect and/or mine valuable information in a network managed using Simple Network Management Protocol (SNMP).",
        "id": "3598",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "SNMP (MIB Dump)",
        "techniqueid": "T1602.001"
    },
    {
        "description": "Adversaries may access network configuration files to collect sensitive data about the device and the network. The network configuration is a file containing parameters that determine the operation of the device. The device typically stores an in-memory copy of the configuration while operating, and a separate configuration on non-volatile storage to load after device reset. Adversaries can inspect the configuration files to reveal information about the target network and its layout, the network device and its software, or identifying legitimate accounts and credentials for later use.",
        "id": "3599",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Network Device Configuration Dump",
        "techniqueid": "T1602.002"
    },
    {
        "description": "Adversaries may gain access to a system through a user visiting a website over the normal course of browsing. With this technique, the user's web browser is typically targeted for exploitation, but adversaries may also use compromised websites for non-exploitation behavior such as acquiring?Application Access Token.",
        "id": "3600",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Drive-by Compromise",
        "techniqueid": "T1189"
    },
    {
        "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppInit DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the?AppInit_DLLs?value in the Registry keys?HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows?or?HKEY_LOCAL_MACHINE\\Software\\Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion\\Windows?are loaded by user32.dll into every process that loads user32.dll. In practice this is nearly every program, since user32.dll is a very common library.",
        "id": "3601",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "AppInit DLLs",
        "techniqueid": "T1546.010"
    },
    {
        "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims. The Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time. For example, the application shimming feature allows developers to apply fixes to applications (without rewriting code) that were created for Windows XP so that it will work with Windows 10.",
        "id": "3602",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Application Shimming",
        "techniqueid": "T1546.011"
    },
    {
        "description": "Adversaries may exploit software vulnerabilities in an attempt to collect credentials. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.?Credentialing and authentication mechanisms may be targeted for exploitation by adversaries as a means to gain access to useful credentials or circumvent the process to gain access to systems. One example of this is MS14-068, which targets Kerberos and can be used to forge Kerberos tickets using domain user permissions. Exploitation for credential access may also result in Privilege Escalation depending on the process targeted or credentials obtained.",
        "id": "3603",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Exploitation for Credential Access",
        "techniqueid": "T1212"
    },
    {
        "description": "Adversaries may exploit a system or application vulnerability to bypass security features. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.?Vulnerabilities may exist in defensive security software that can be used to disable or circumvent them.",
        "id": "3604",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Exploitation for Defense Evasion",
        "techniqueid": "T1211"
    },
    {
        "description": "Adversaries may exploit software vulnerabilities in an attempt to collect elevate privileges. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Security constructs such as permission levels will often hinder access to information and use of certain techniques, so adversaries will likely need to perform privilege escalation to include use of software exploitation to circumvent those restrictions.",
        "id": "3605",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Exploitation for Privilege Escalation",
        "techniqueid": "T1068"
    },
    {
        "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.?A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.",
        "id": "3606",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Exploitation of Remote Services",
        "techniqueid": "T1210"
    },
    {
        "description": "Adversaries may overwrite or corrupt the flash memory contents of system BIOS or other firmware in devices attached to a system in order to render them inoperable or unable to boot. Firmware is software that is loaded and executed from non-volatile memory on hardware devices in order to initialize and manage device functionality. These devices could include the motherboard, hard drive, or video cards.",
        "id": "3607",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Firmware Corruption",
        "techniqueid": "T1495"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.",
        "id": "3608",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Hijack Execution Flow",
        "techniqueid": "T1574"
    },
    {
        "description": "Adversaries may execute their own malicious payloads by hijacking the library manifest used to load DLLs. Adversaries may take advantage of vague references in the library manifest of a program by replacing a legitimate library with a malicious one, causing the operating system to load their malicious library when it is called for by the victim program.",
        "id": "3609",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "DLL Side-Loading",
        "techniqueid": "T1574.002"
    },
    {
        "description": "Adversaries may leverage Microsoft Office-based applications for persistence between startups. Microsoft Office is a fairly common application suite on Windows-based operating systems within an enterprise network. There are multiple mechanisms that can be used with Office for persistence when an Office-based application is started; this can include the use of Office Template Macros and add-ins.",
        "id": "3610",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Office Application Startup",
        "techniqueid": "T1137"
    },
    {
        "description": "Adversaries may abuse Microsoft Outlook rules to obtain persistence on a compromised system. Outlook rules allow a user to define automated behavior to manage email messages. A benign rule might, for example, automatically move an email to a particular folder in Outlook if it contains specific words from a specific sender. Malicious Outlook rules can be created that can trigger code execution when an adversary sends a specifically crafted email to that user.",
        "id": "3611",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Outlook Rules",
        "techniqueid": "T1137.005"
    },
    {
        "description": "Adversaries may abuse Microsoft Outlook forms to obtain persistence on a compromised system. Outlook forms are used as templates for presentation and functionality in Outlook messages. Custom Outlook forms can be created that will execute code when a specifically crafted email is sent by an adversary utilizing the same custom Outlook form.",
        "id": "3612",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Outlook Forms",
        "techniqueid": "T1137.003"
    },
    {
        "description": "Adversaries may abuse Microsoft Outlook's Home Page feature to obtain persistence on a compromised system. Outlook Home Page is a legacy feature used to customize the presentation of Outlook folders. This feature allows for an internal or external URL to be loaded and presented whenever a folder is opened. A malicious HTML page can be crafted that will execute code when loaded by Outlook Home Page.",
        "id": "3613",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Outlook Home Page",
        "techniqueid": "T1137.004"
    },
    {
        "description": "Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control.",
        "id": "3614",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Pre-OS Boot",
        "techniqueid": "T1542"
    },
    {
        "description": "Adversaries may modify system firmware to persist on systems.The BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer.",
        "id": "3615",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "System Firmware",
        "techniqueid": "T1542.001"
    },
    {
        "description": "Adversaries may gain access to and use third-party software suites installed within an enterprise network, such as administration, monitoring, and deployment systems, to move laterally through the network. Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, VNC, HBSS, Altiris, etc.).",
        "id": "3616",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Software Deployment Tools",
        "techniqueid": "T1072"
    },
    {
        "description": "Adversaries may manipulate products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise.",
        "id": "3617",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Supply Chain Compromise",
        "techniqueid": "T1195"
    },
    {
        "description": "Adversaries may manipulate software dependencies and development tools prior to receipt by a final consumer for the purpose of data or system compromise. Applications often depend on external software to function properly. Popular open source projects that are used as dependencies in many applications may be targeted as a means to add malicious code to users of the dependency.",
        "id": "3618",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Compromise Software Dependencies and Development Tools",
        "techniqueid": "T1195.001"
    },
    {
        "description": "Adversaries may manipulate application software prior to receipt by a final consumer for the purpose of data or system compromise. Supply chain compromise of software can take place in a number of ways, including manipulation of the application source code, manipulation of the update/distribution mechanism for that software, or replacing compiled releases with a modified version.",
        "id": "3619",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Compromise Software Supply Chain",
        "techniqueid": "T1195.002"
    },
    {
        "description": "Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g.?Bash History), operating system or application-specific repositories (e.g.?Credentials in Registry), or other specialized files/artifacts (e.g.?Private Keys).",
        "id": "3620",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Unsecured Credentials",
        "techniqueid": "T1552"
    },
    {
        "description": "Adversaries may attempt to find unsecured credentials in Group Policy Preferences (GPP). GPP are tools that allow administrators to create domain policies with embedded credentials. These policies allow administrators to set local accounts.",
        "id": "3621",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Group Policy Preferences",
        "techniqueid": "T1552.006"
    },
    {
        "description": "Adversaries may \"pass the hash\" using stolen password hashes to move laterally within an environment, bypassing normal system access controls. Pass the hash (PtH) is a method of authenticating as a user without having access to the user's cleartext password. This method bypasses standard authentication steps that require a cleartext password, moving directly into the portion of the authentication that uses the password hash. In this technique, valid password hashes for the account being used are captured using a Credential Access technique. Captured hashes are used with PtH to authenticate as that user. Once authenticated, PtH may be used to perform actions on local or remote systems.",
        "id": "3622",
        "mitigation": "Update Software",
        "mitigationid": "M1051",
        "technique": "Pass the Hash",
        "techniqueid": "T1550.002"
    },
    {
        "description": "Adversaries may gain persistence and elevate privileges by executing malicious content triggered by PowerShell profiles. A PowerShell profile (profile.ps1) is a script that runs when?PowerShell?starts and can be used as a logon script to customize user environments.",
        "id": "3623",
        "mitigation": "Software Configuration",
        "mitigationid": "M1054",
        "technique": "PowerShell Profile",
        "techniqueid": "T1546.013"
    },
    {
        "description": "Adversaries may forge credential materials that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies, tokens, or other materials to authenticate and authorize user access.",
        "id": "3624",
        "mitigation": "Software Configuration",
        "mitigationid": "M1054",
        "technique": "Forge Web Credentials",
        "techniqueid": "T1606"
    },
    {
        "description": "Adversaries may forge web cookies that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies to authenticate and authorize user access.",
        "id": "3625",
        "mitigation": "Software Configuration",
        "mitigationid": "M1054",
        "technique": "Web Cookies",
        "techniqueid": "T1606.001"
    },
    {
        "description": "An adversary may attempt to block indicators or events typically captured by sensors from being gathered and analyzed. This could include maliciously redirecting or even disabling host-based sensors, such as Event Tracing for Windows (ETW), by tampering settings that control the collection and flow of event telemetry. These settings may be stored on the system in configuration files and/or in the Registry as well as being accessible via administrative utilities such as?PowerShell?or?Windows Management Instrumentation.",
        "id": "3626",
        "mitigation": "Software Configuration",
        "mitigationid": "M1054",
        "technique": "Indicator Blocking",
        "techniqueid": "T1562.006"
    },
    {
        "description": "Adversaries may abuse inter-process communication (IPC) mechanisms for local code or command execution. IPC is typically used by processes to share data, communicate with each other, or synchronize execution. IPC is also commonly used to avoid situations such as deadlocks, which occurs when processes are stuck in a cyclic waiting pattern.",
        "id": "3627",
        "mitigation": "Software Configuration",
        "mitigationid": "M1054",
        "technique": "Inter-Process Communication",
        "techniqueid": "T1559"
    },
    {
        "description": "Adversaries may use Windows Dynamic Data Exchange (DDE) to execute arbitrary commands. DDE is a client-server protocol for one-time and/or continuous inter-process communication (IPC) between applications. Once a link is established, applications can autonomously exchange transactions consisting of strings, warm data links (notifications when a data item changes), hot data links (duplications of changes to a data item), and requests for command execution.",
        "id": "3628",
        "mitigation": "Software Configuration",
        "mitigationid": "M1054",
        "technique": "Dynamic Data Exchange",
        "techniqueid": "T1559.002"
    },
    {
        "description": "Adversaries may leverage Microsoft Office-based applications for persistence between startups. Microsoft Office is a fairly common application suite on Windows-based operating systems within an enterprise network. There are multiple mechanisms that can be used with Office for persistence when an Office-based application is started; this can include the use of Office Template Macros and add-ins.",
        "id": "3629",
        "mitigation": "Software Configuration",
        "mitigationid": "M1054",
        "technique": "Office Application Startup",
        "techniqueid": "T1137"
    },
    {
        "description": "Adversaries may abuse the Microsoft Office \"Office Test\" Registry key to obtain persistence on a compromised system. An Office Test Registry location exists that allows a user to specify an arbitrary DLL that will be executed every time an Office application is started. This Registry key is thought to be used by Microsoft to load DLLs for testing and debugging purposes while developing Office applications. This Registry key is not created by default during an Office installation.",
        "id": "3630",
        "mitigation": "Software Configuration",
        "mitigationid": "M1054",
        "technique": "Office Test",
        "techniqueid": "T1137.002"
    },
    {
        "description": "An adversary may steal web application or service session cookies and use them to gain access web applications or Internet services as an authenticated user without needing credentials. Web applications and services often use session cookies as an authentication token after a user has authenticated to a website.",
        "id": "3631",
        "mitigation": "Software Configuration",
        "mitigationid": "M1054",
        "technique": "Steal Web Session Cookie",
        "techniqueid": "T1539"
    },
    {
        "description": "Adversaries may undermine security controls that will either warn users of untrusted activity or prevent execution of untrusted programs. Operating systems and security products may contain mechanisms to identify programs or websites as possessing some level of trust. Examples of such features would include a program being allowed to run because it is signed by a valid code signing certificate, a program prompting the user with a warning because it has an attribute set from being downloaded from the Internet, or getting an indication that you are about to connect to an untrusted site.",
        "id": "3632",
        "mitigation": "Software Configuration",
        "mitigationid": "M1054",
        "technique": "Subvert Trust Controls",
        "techniqueid": "T1553"
    },
    {
        "description": "Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers. Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate. Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.",
        "id": "3633",
        "mitigation": "Software Configuration",
        "mitigationid": "M1054",
        "technique": "Install Root Certificate",
        "techniqueid": "T1553.004"
    },
    {
        "description": "Adversaries may create cloud instances in unused geographic service regions in order to evade detection. Access is usually obtained through compromising accounts used to manage cloud infrastructure.",
        "id": "3634",
        "mitigation": "Software Configuration",
        "mitigationid": "M1054",
        "technique": "Unused/Unsupported Cloud Regions",
        "techniqueid": "T1535"
    },
    {
        "description": "Adversaries can use stolen session cookies to authenticate to web applications and services. This technique bypasses some multi-factor authentication protocols since the session is already authenticated.",
        "id": "3635",
        "mitigation": "Software Configuration",
        "mitigationid": "M1054",
        "technique": "Web Session Cookie",
        "techniqueid": "T1550.004"
    }
]